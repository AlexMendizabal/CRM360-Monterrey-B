{"version":3,"sources":["webpack:///src/app/modules/comercial/cadastros/tipo-operadores/formulario/formulario.component.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/formulario/formulario-resolver.guard.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/lista/lista.component.scss","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/lista/lista.component.ts","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/tipo-operadores-routing.module.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/tipo-operadores.module.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/formulario/formulario.component.html","webpack:///src/app/guards/form-deactivate.guard.ts","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/lista/lista.component.html","webpack:///src/app/modules/comercial/cadastros/tipo-operadores/formulario/formulario.component.scss"],"names":["ComercialCadastrosTipoOperadorFormularioComponent","activatedRoute","router","location","formBuilder","tipoOperadorService","pnotifyService","atividadesService","titleService","breadCrumbTree","formChanged","getPNotify","registrarAcesso","setBreadCrumb","setFormBuilder","subscribe","params","id","appTitle","setTitle","descricao","routerLink","idSubModulo","snapshot","data","detalhes","success","form","group","codTipoOperador","tipo","required","codSituacao","error","back","field","onFieldInvalid","get","status","touched","abstractControl","abstractControlField","validator","controlName","onFieldRequired","pristine","valid","loaderNavbar","submittingForm","save","value","pipe","next","response","hasOwnProperty","reset","mensagem","navigate","relativeTo","notice","confirm","selector","template","ComercialCadastrosTipoOperadorFormularioResolverGuard","route","getDetalhes","providedIn","ComercialCadastrosTipoOperadorListaComponent","confirmModalService","detailPanelService","subtitles","text","color","tableConfig","subtitleBorder","showDetailPanel","orderBy","orderType","maxSize","itemsPerPage","currentPage","totalItems","dados","dadosPagination","dadosLoaded","dadosEmpty","alteracoes","setFormFilter","onDetailPanelEmitter","setTipoOperadorSelecionado","showDetailPanelSubscription","unsubscribe","config","event","showing","formValue","checkRouterParams","pagina","registros","checkOrder","activatedRouteSubscription","queryParams","Object","keys","length","atob","JSON","parse","search","forEach","formKey","paramKey","isNaN","Number","tipoOperadorSelecionado","situacao","nomeUsuario","dataCadastro","column","onFilter","setRouterParams","verificaParams","q","btoa","stringify","hide","getListaTipoOperador","slice","tipoOperador","borderClass","startItem","page","endItem","scrollToFilter","nativeElement","scrollIntoView","behavior","show","detailPanelTitle","getAlteracoes","setTimeout","loadedFinished","index","confirmActivate","asObservable","result","activateTipoOperador","refreshMainData","showConfirm","confirmInactive","inactivateTipoOperador","i","ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","routes","path","component","resolve","canDeactivate","redirectTo","pathMatch","ComercialCadastrosTipoOperadorModuleRoutingModule","imports","forChild","exports","ComercialCadastrosTipoOperadorModule","declarations","forRoot","providers","FormDeactivateGuard","state","formCanDeactivate"],"mappings":"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","file":"tipo-operadores-tipo-operadores-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\nimport { finalize } from 'rxjs/operators';\n\n// Interfaces\nimport { IFormCanDeactivate } from 'src/app/guards/iform-candeactivate';\n\n// Services\nimport { ComercialCadastrosTipoOperadorService } from '../tipo-operadores.service';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\nimport { TitleService } from 'src/app/shared/services/core/title.service';\n\n// Interfaces\nimport { TipoOperador } from '../models/tipo-operador';\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\n\n@Component({\n  selector: 'comercial-cadastros-tipo-operador-formulario',\n  templateUrl: './formulario.component.html',\n  styleUrls: ['./formulario.component.scss']\n})\nexport class ComercialCadastrosTipoOperadorFormularioComponent\n  implements OnInit, IFormCanDeactivate {\n  loaderNavbar: boolean;\n\n  appTitle: string;\n  breadCrumbTree: Array<Breadcrumb> = [];\n\n  form: FormGroup;\n  formChanged = false;\n  submittingForm: boolean;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private formBuilder: FormBuilder,\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\n    private pnotifyService: PNotifyService,\n    private atividadesService: AtividadesService,\n    private titleService: TitleService\n  ) {\n    this.pnotifyService.getPNotify();\n  }\n\n  ngOnInit(): void {\n    this.registrarAcesso();\n    this.setBreadCrumb();\n    this.setFormBuilder();\n  }\n\n  registrarAcesso(): void {\n    this.atividadesService.registrarAcesso().subscribe();\n  }\n\n  setBreadCrumb(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      if (params.id) {\n        this.appTitle = 'Editar tipo de operador';\n      } else {\n        this.appTitle = 'Nova tipo de operador';\n      }\n\n      this.titleService.setTitle(this.appTitle);\n\n      this.breadCrumbTree = [\n        {\n          descricao: 'Home',\n          routerLink: '/comercial/home'\n        },\n        {\n          descricao: 'Cadastros',\n          routerLink: `/comercial/cadastros/${params.idSubModulo}`\n        },\n        {\n          descricao: 'Tipo de operadores',\n          routerLink: `/comercial/cadastros/${params.idSubModulo}/tipo-operadores/lista`\n        },\n        {\n          descricao: this.appTitle\n        }\n      ];\n    });\n  }\n\n  setFormBuilder(): void {\n    if (this.activatedRoute.snapshot.data.detalhes.success === true) {\n      const detalhes: TipoOperador = this.activatedRoute.snapshot.data.detalhes\n        .data;\n\n      this.form = this.formBuilder.group({\n        codTipoOperador: [detalhes.codTipoOperador],\n        tipo: [detalhes.tipo, [Validators.required]],\n        codSituacao: [detalhes.codSituacao, [Validators.required]]\n      });\n    } else {\n      this.pnotifyService.error();\n      this.location.back();\n    }\n  }\n\n  onFieldError(field: string): string {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n\n    return '';\n  }\n\n  onFieldInvalid(field: any): boolean {\n    field = this.form.get(field);\n\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  onFieldRequired(\n    abstractControl: AbstractControl,\n    abstractControlField?: string\n  ): string {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({} as AbstractControl);\n      if (validator && validator.required) {\n        return 'is-required';\n      }\n    }\n\n    if (abstractControlField) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\n            controlName == abstractControlField\n          ) {\n            return 'is-required';\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  onSubmit(): void {\n    if (this.form.pristine) {\n      this.location.back();\n    } else {\n      if (this.form.valid) {\n        this.loaderNavbar = true;\n        this.submittingForm = true;\n\n        this.tipoOperadorService\n          .save(this.form.value)\n          .pipe(\n            finalize(() => {\n              this.loaderNavbar = false;\n              this.submittingForm = false;\n            })\n          )\n          .subscribe({\n            next: (response: any) => {\n              if (\n                response.hasOwnProperty('mensagem') &&\n                response.hasOwnProperty('success') &&\n                response.success === true\n              ) {\n                this.form.reset();\n                this.formChanged = false;\n                this.pnotifyService.success(response.mensagem);\n\n                this.activatedRoute.params.subscribe((params: any) => {\n                  if (params.hasOwnProperty('id')) {\n                    this.location.back();\n                  } else {\n                    this.router.navigate(['../lista'], {\n                      relativeTo: this.activatedRoute\n                    });\n                  }\n                });\n              } else if (\n                response.hasOwnProperty('mensagem') &&\n                response.hasOwnProperty('success') &&\n                response.success === false\n              ) {\n                this.pnotifyService.notice(response.mensagem);\n              } else {\n                this.pnotifyService.error();\n              }\n            },\n            error: (error: any) => {\n              this.pnotifyService.error();\n            }\n          });\n      }\n    }\n  }\n\n  onCancel(): void {\n    this.location.back();\n  }\n\n  onInput(): void {\n    this.formChanged = true;\n  }\n\n  formCanDeactivate(): boolean {\n    if (this.formChanged) {\n      if (confirm('Este cliente no forma parte de tu cartera?')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n// Services\nimport { ComercialCadastrosTipoOperadorService } from '../tipo-operadores.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComercialCadastrosTipoOperadorFormularioResolverGuard\n  implements Resolve<any> {\n  constructor(\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService\n  ) { }\n\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    if (route.params && route.params.id) {\n      return this.tipoOperadorService.getDetalhes(route.params.id);\n    }\n\n    // É implementado o método \"of\" para manter a tipagem de retorno com Observable.\n    return of({\n      success: true,\n      data: {\n        codTipoOperador: null,\n        tipo: null,\n        codSituacao: 1\n      }\n    });\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy90aXBvLW9wZXJhZG9yZXMvbGlzdGEvbGlzdGEuY29tcG9uZW50LnNjc3MifQ== */\";","import {\n  Component,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  OnDestroy\n} from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\nimport { Subscription, EMPTY, Observable } from 'rxjs';\nimport { take, switchMap, finalize } from 'rxjs/operators';\n\n// ngx-bootstrap\nimport { PageChangedEvent } from 'ngx-bootstrap/pagination';\n\n// Services\nimport { ComercialCadastrosTipoOperadorService } from '../tipo-operadores.service';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\nimport { TitleService } from 'src/app/shared/services/core/title.service';\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\nimport { DetailPanelService } from 'src/app/shared/templates/detail-panel/detal-panel.service';\n\n// Interfaces\nimport { TipoOperador } from '../models/tipo-operador';\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\nimport { Subtitles } from 'src/app/shared/modules/subtitles/subtitles';\nimport { CustomTableConfig } from 'src/app/shared/templates/custom-table/models/config';\n\n@Component({\n  selector: 'comercial-cadastros-tipo-operador-lista',\n  templateUrl: './lista.component.html',\n  styleUrls: ['./lista.component.scss']\n})\nexport class ComercialCadastrosTipoOperadorListaComponent\n  implements OnInit, OnDestroy {\n  @ViewChild('scrollToFilter', {}) scrollToFilter: ElementRef;\n\n  loaderNavbar = false;\n\n  breadCrumbTree: Array<Breadcrumb> = [];\n\n  subtitles: Array<Subtitles> = [\n    {\n      id: 1,\n      text: 'Ativo',\n      color: 'green'\n    },\n    {\n      id: 2,\n      text: 'Inativo',\n      color: 'red'\n    }\n  ];\n\n  tableConfig: Partial<CustomTableConfig> = {\n    subtitleBorder: true\n  };\n\n  activatedRouteSubscription: Subscription;\n\n  showDetailPanelSubscription: Subscription;\n  showDetailPanel = false;\n  detailPanelTitle: string;\n\n  form: FormGroup;\n  orderBy = 'data';\n  orderType = 'ASC';\n\n  maxSize = 10;\n  itemsPerPage = 300;\n  currentPage = 1;\n  totalItems = 0;\n\n  dados: Array<TipoOperador> = [];\n  dadosPagination: Array<TipoOperador> = [];\n  dadosLoaded = false;\n  dadosEmpty = false;\n\n  tipoOperadorSelecionado: TipoOperador;\n  alteracoes: Array<any> = [];\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private formBuilder: FormBuilder,\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\n    private pnotifyService: PNotifyService,\n    private atividadesService: AtividadesService,\n    private titleService: TitleService,\n    private confirmModalService: ConfirmModalService,\n    private detailPanelService: DetailPanelService\n  ) {\n    this.pnotifyService.getPNotify();\n  }\n\n  ngOnInit(): void {\n    this.registrarAcesso();\n    this.setBreadCrumb();\n    this.setFormFilter();\n    this.titleService.setTitle('Tipo de operadores');\n    this.onDetailPanelEmitter();\n    this.setTipoOperadorSelecionado();\n  }\n\n  ngOnDestroy(): void {\n    this.showDetailPanelSubscription.unsubscribe();\n  }\n\n  registrarAcesso(): void {\n    this.atividadesService.registrarAcesso().subscribe();\n  }\n\n  setBreadCrumb(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      this.breadCrumbTree = [\n        {\n          descricao: 'Home',\n          routerLink: '/comercial/home'\n        },\n        {\n          descricao: 'Cadastros',\n          routerLink: `/comercial/cadastros/${params['idSubModulo']}`\n        },\n        {\n          descricao: 'Tipo de operadores'\n        }\n      ];\n    });\n  }\n\n  onDetailPanelEmitter(): void {\n    this.showDetailPanelSubscription = this.detailPanelService.config.subscribe(\n      (event: any) => {\n        this.showDetailPanel = event.showing;\n      }\n    );\n  }\n\n  setFormFilter(): void {\n    const formValue: any = this.checkRouterParams();\n\n    this.form = this.formBuilder.group({\n      tipo: [formValue.tipo],\n      codSituacao: [formValue.codSituacao],\n      orderBy: [formValue.orderBy],\n      orderType: [formValue.orderType],\n      pagina: [formValue.pagina],\n      registros: [formValue.registros, Validators.required]\n    });\n\n    this.checkOrder();\n  }\n\n  checkRouterParams(): Object {\n    let formValue = {\n      tipo: null,\n      codSituacao: 0,\n      orderBy: this.orderBy,\n      orderType: this.orderType,\n      pagina: 1,\n      registros: this.itemsPerPage\n    };\n\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\n      (queryParams: any) => {\n        if (Object.keys(queryParams).length > 0) {\n          let params = atob(queryParams['q']);\n          params = JSON.parse(params);\n          this.search(params);\n\n          Object.keys(formValue).forEach(formKey => {\n            Object.keys(params).forEach(paramKey => {\n              if (\n                formKey == paramKey &&\n                formValue[formKey] != params[paramKey]\n              ) {\n                if (!isNaN(Number(params[paramKey]))) {\n                  formValue[formKey] = Number(params[paramKey]);\n                } else {\n                  formValue[formKey] = params[paramKey];\n                }\n              }\n            });\n          });\n        }\n      }\n    );\n    this.activatedRouteSubscription.unsubscribe();\n\n    return formValue;\n  }\n\n  checkOrder(): void {\n    if (this.form.value.orderBy !== this.orderBy) {\n      this.orderBy = this.form.value.orderBy;\n    }\n\n    if (this.form.value.orderType !== this.orderType) {\n      this.orderType = this.form.value.orderType;\n    }\n  }\n\n  setTipoOperadorSelecionado(): void {\n    this.tipoOperadorSelecionado = {\n      codTipoOperador: -1,\n      tipo: null,\n      codSituacao: null,\n      situacao: null,\n      nomeUsuario: null,\n      dataCadastro: null\n    };\n  }\n\n  onFieldError(field: string): string {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n\n    return '';\n  }\n\n  onFieldInvalid(field: any): boolean {\n    field = this.form.get(field);\n\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  onFieldRequired(\n    abstractControl: AbstractControl,\n    abstractControlField?: string\n  ): string {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({} as AbstractControl);\n      if (validator && validator.required) {\n        return 'is-required';\n      }\n    }\n\n    if (abstractControlField) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\n            controlName == abstractControlField\n          ) {\n            return 'is-required';\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  setOrderBy(column: string): void {\n    if (this.orderBy === column) {\n      if (this.orderType == 'DESC') {\n        this.orderType = 'ASC';\n      } else if (this.orderType == 'ASC') {\n        this.orderType = 'DESC';\n      }\n    } else {\n      this.orderBy = column;\n      this.orderType = 'ASC';\n    }\n\n    this.form.value.orderBy = this.orderBy;\n    this.form.value.orderType = this.orderType;\n\n    this.onFilter();\n  }\n\n  onFilter(): void {\n    if (this.form.valid) {\n      this.itemsPerPage = this.form.value.registros;\n      this.currentPage = 1;\n      this.setRouterParams(this.verificaParams());\n    }\n  }\n\n  setRouterParams(params: any): void {\n    this.router.navigate([], {\n      relativeTo: this.activatedRoute,\n      queryParams: { q: btoa(JSON.stringify(params)) }\n    });\n    this.search(params);\n  }\n\n  verificaParams(): Object {\n    let params: any = {};\n\n    if (this.form.value.tipo) {\n      params.tipo = this.form.value.tipo;\n    }\n\n    if (this.form.value.codSituacao) {\n      params.codSituacao = this.form.value.codSituacao;\n    }\n\n    params.orderBy = this.form.value.orderBy;\n    params.orderType = this.form.value.orderType;\n\n    return params;\n  }\n\n  search(params: any): void {\n    this.loaderNavbar = true;\n    this.dados = [];\n    this.dadosPagination = [];\n    this.dadosLoaded = false;\n    this.dadosEmpty = false;\n    this.detailPanelService.hide();\n\n    this.tipoOperadorService\n      .getListaTipoOperador(params)\n      .pipe(\n        finalize(() => {\n          this.loaderNavbar = false;\n          this.dadosLoaded = true;\n        })\n      )\n      .subscribe({\n        next:( response: any) => {\n          if (response.hasOwnProperty('success') && response.success === true) {\n            this.dados = response.data;\n            this.dadosPagination = this.dados.slice(0, this.itemsPerPage);\n            this.totalItems = this.dados.length;\n            this.dadosLoaded = true;\n          } else if (\n            response.hasOwnProperty('success') &&\n            response.success === false\n          ) {\n            this.dadosEmpty = true;\n          } else {\n            this.pnotifyService.error();\n            this.dadosEmpty = true;\n          }\n        },\n        error: (error: any) => {\n          this.dadosEmpty = true;\n\n          if (error.error.hasOwnProperty('mensagem')) {\n            this.pnotifyService.error(error.error.mensagem);\n          } else {\n            this.pnotifyService.error();\n          }\n        }\n      });\n  }\n\n  classStatusBorder(tipoOperador: TipoOperador): string {\n    let borderClass: string;\n\n    if (tipoOperador.codSituacao === 1) {\n      borderClass = 'border-success';\n    } else if (tipoOperador.codSituacao === 2) {\n      borderClass = 'border-danger';\n    }\n\n    return borderClass;\n  }\n\n  onPageChanged(event: PageChangedEvent): void {\n    const startItem = (event.page - 1) * event.itemsPerPage;\n    const endItem = event.page * event.itemsPerPage;\n    this.dadosPagination = this.dados.slice(startItem, endItem);\n\n    this.scrollToFilter.nativeElement.scrollIntoView({\n      behavior: 'instant'\n    });\n  }\n\n  onDetails(tipoOperador: TipoOperador): void {\n    this.loaderNavbar = true;\n    this.detailPanelService.show();\n    this.detailPanelTitle = `HISTÓRICO DE ALTERAÇÕES / ${tipoOperador.tipo}`;\n    this.setTipoOperadorSelecionado();\n    this.tipoOperadorSelecionado = tipoOperador;\n    this.alteracoes = [];\n\n    this.tipoOperadorService\n      .getAlteracoes(tipoOperador.codTipoOperador)\n      .pipe(\n        finalize(() => {\n          setTimeout(() => {\n            this.loaderNavbar = false;\n          }, 500);\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (response.hasOwnProperty('success') && response.success === true) {\n            // Não está vazio.\n            this.detailPanelService.loadedFinished(false);\n            this.alteracoes = response.data;\n          } else if (\n            response.hasOwnProperty('success') &&\n            response.success === false\n          ) {\n            // Vazio.\n            this.detailPanelService.loadedFinished(true);\n          } else {\n            // Vazio e com possível erro.\n            this.pnotifyService.error();\n            this.detailPanelService.loadedFinished(true);\n          }\n        },\n        error: (error: any) => {\n          // Vazio e com erro.\n          this.detailPanelService.loadedFinished(true);\n\n          if (error.error.hasOwnProperty('mensagem')) {\n            this.pnotifyService.error(error.error.mensagem);\n          } else {\n            this.pnotifyService.error();\n          }\n        }\n      });\n  }\n\n  onEdit(tipoOperador: TipoOperador): void {\n    this.router.navigate(['../editar', tipoOperador.codTipoOperador], {\n      relativeTo: this.activatedRoute\n    });\n  }\n\n  onActivate(index: number, tipoOperador: TipoOperador): void {\n    this.confirmActivate()\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap(result =>\n          result ? this.activateTipoOperador(index, tipoOperador) : EMPTY\n        ),\n        finalize(() => {\n          this.loaderNavbar = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotifyService.success();\n          this.refreshMainData(tipoOperador);\n        },\n        (error: any) => {\n          this.pnotifyService.error();\n          this.dadosPagination[index].codSituacao = 2;\n        }\n      );\n  }\n\n  confirmActivate(): any {\n    return this.confirmModalService.showConfirm(\n      null,\n      null,\n      'Deseja realmente prosseguir com a ativação do registro?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  activateTipoOperador(\n    index: number,\n    tipoOperador: TipoOperador\n  ): Observable<any> {\n    this.loaderNavbar = true;\n    this.dadosPagination[index].codSituacao = 1;\n\n    return this.tipoOperadorService.activateTipoOperador(\n      tipoOperador.codTipoOperador\n    );\n  }\n\n  onInactivate(index: number, tipoOperador: TipoOperador): void {\n    this.confirmInactive()\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap(result =>\n          result ? this.inactivateTipoOperador(index, tipoOperador) : EMPTY\n        ),\n        finalize(() => {\n          this.loaderNavbar = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotifyService.success();\n          this.refreshMainData(tipoOperador);\n        },\n        (error: any) => {\n          this.pnotifyService.error();\n          this.dadosPagination[index].codSituacao = 1;\n        }\n      );\n  }\n\n  confirmInactive(): any {\n    return this.confirmModalService.showConfirm(\n      'inactivate',\n      'Confirmar inativação',\n      'Deseja realmente prosseguir com a inativação do registro?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  inactivateTipoOperador(\n    index: number,\n    tipoOperador: TipoOperador\n  ): Observable<any> {\n    this.loaderNavbar = true;\n    this.dadosPagination[index].codSituacao = 2;\n\n    return this.tipoOperadorService.inactivateTipoOperador(\n      tipoOperador.codTipoOperador\n    );\n  }\n\n  refreshMainData(tipoOperador: TipoOperador): void {\n    for (let i = 0; i < this.dados.length; i++) {\n      if (tipoOperador.codTipoOperador === this.dados[i].codTipoOperador) {\n        this.dados[i].codSituacao = tipoOperador.codSituacao;\n        return;\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\n// Components\nimport { ConfirmModalComponent } from './confirm-modal.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmModalService {\n  constructor(private modalService: BsModalService) {}\n\n  showConfirm(\n    type: string,\n    title: string,\n    message: string,\n    cancelTxt?: string,\n    okTxt?: string\n  ) {\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: false,\n      ignoreBackdropClick: true,\n      keyboard: false,\n      class: 'confirm'\n    });\n\n    modalRef.content.type = type;\n    modalRef.content.title = title;\n    modalRef.content.message = message;\n\n    if (type === 'delete') {\n      modalRef.content.messageAlerts = [\n        \"Se eliminará toda la información relacionada.\",\n        \"Esta acción no se puede deshacer.\"\n      ];\n    }\n\n    if (type === 'inactivate') {\n      modalRef.content.messageAlerts = [\n        'Las informacion serán inactivadas.'\n      ];\n    }\n\n    if (cancelTxt) {\n      modalRef.content.cancelTxt = cancelTxt;\n    }\n\n    if (okTxt) {\n      modalRef.content.okTxt = okTxt;\n    }\n\n    // É uma boa prática tipar o retorno.\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Guards\nimport { FormDeactivateGuard } from 'src/app/guards/form-deactivate.guard';\nimport { ComercialCadastrosTipoOperadorFormularioResolverGuard } from './formulario/formulario-resolver.guard';\n\n// Components\nimport { ComercialCadastrosTipoOperadorListaComponent } from './lista/lista.component';\nimport { ComercialCadastrosTipoOperadorFormularioComponent } from './formulario/formulario.component';\n\nconst routes: Routes = [\n  { path: 'lista', component: ComercialCadastrosTipoOperadorListaComponent },\n  {\n    path: 'novo',\n    component: ComercialCadastrosTipoOperadorFormularioComponent,\n    resolve: {\n      detalhes: ComercialCadastrosTipoOperadorFormularioResolverGuard\n    },\n    canDeactivate: [FormDeactivateGuard]\n  },\n  {\n    path: 'editar/:id',\n    component: ComercialCadastrosTipoOperadorFormularioComponent,\n    resolve: {\n      detalhes: ComercialCadastrosTipoOperadorFormularioResolverGuard\n    },\n    canDeactivate: [FormDeactivateGuard]\n  },\n  {\n    path: '',\n    redirectTo: 'lista',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ComercialCadastrosTipoOperadorModuleRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// ngx-bootstrap\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\n\n// ng-select\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n// ng-brazil\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { NgBrazil } from 'ng-brazil';\n\n// PNotify\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\n\n// Modules\nimport { ComercialCadastrosTipoOperadorModuleRoutingModule } from './tipo-operadores-routing.module';\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\n\n// Components\nimport { ComercialCadastrosTipoOperadorListaComponent } from './lista/lista.component';\nimport { ComercialCadastrosTipoOperadorFormularioComponent } from './formulario/formulario.component';\n\n@NgModule({\n  declarations: [\n    ComercialCadastrosTipoOperadorListaComponent,\n    ComercialCadastrosTipoOperadorFormularioComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    PaginationModule.forRoot(),\n    TooltipModule.forRoot(),\n    NgSelectModule,\n    TextMaskModule,\n    NgBrazil,\n    ComercialCadastrosTipoOperadorModuleRoutingModule,\n    SharedModule,\n    TemplatesModule\n  ],\n  providers: [PNotifyService]\n})\nexport class ComercialCadastrosTipoOperadorModule {}\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\n<app-header [appTitle]=\\\"appTitle\\\">\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onCancel()\\\"\\n    [disabled]=\\\"submittingForm\\\">\\n    Cancelar\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onSubmit()\\\"\\n    [disabled]=\\\"!form.valid || submittingForm\\\">\\n    Salvar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-4\\\">\\n      <form [formGroup]=\\\"form\\\">\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"tipo\\\">Tipo de operador</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"tipo\\\"\\n              formControlName=\\\"tipo\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('tipo') + ' ' + onFieldRequired(form.controls.tipo)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('tipo')\\\" message=\\\"Tipo de operador é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"codSituacao\\\">Situação</label>\\n            <select\\n              class=\\\"form-control custom-select\\\"\\n              id=\\\"codSituacao\\\"\\n              formControlName=\\\"codSituacao\\\"\\n              [ngClass]=\\\"onFieldError('codSituacao') + ' ' + onFieldRequired(form.controls.codSituacao)\\\">\\n              <option value=\\\"1\\\">Ativo</option>\\n              <option value=\\\"2\\\">Inativo</option>\\n            </select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codSituacao')\\\" message=\\\"Situação é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</app-body>\\n\";","import { Injectable } from '@angular/core';\nimport {\n  CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\n// Interfaces\nimport { IFormCanDeactivate } from './iform-candeactivate';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormDeactivateGuard implements CanDeactivate<IFormCanDeactivate> {\n  canDeactivate(\n    component: IFormCanDeactivate,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return component.formCanDeactivate();\n  }\n}\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\n<app-header appTitle=\\\"Tipo de operadores\\\">\\n  <button\\n    type=\\\"button\\\"\\n    [routerLink]=\\\"['../novo']\\\">\\n    Adicionar\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onFilter()\\\">\\n    Filtrar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\">\\n  <div class=\\\"row\\\" #scrollToFilter>\\n    <div class=\\\"col\\\">\\n      <advanced-filter>\\n        <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"tipo\\\">Tipo</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                formControlName=\\\"tipo\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-4\\\">\\n              <label for=\\\"codSituacao\\\">Situação</label>\\n              <select\\n                class=\\\"form-control custom-select\\\"\\n                id=\\\"codSituacao\\\"\\n                formControlName=\\\"codSituacao\\\">\\n                <option value=\\\"0\\\">Todos</option>\\n                <option value=\\\"1\\\">Ativos</option>\\n                <option value=\\\"2\\\">Inativos</option>\\n              </select>\\n            </div>\\n            <div class=\\\"form-group col-lg-2\\\">\\n              <label for=\\\"registros\\\">Registros</label>\\n              <select\\n                class=\\\"form-control\\\"\\n                id=\\\"registros\\\"\\n                formControlName=\\\"registros\\\">\\n                <option>25</option>\\n                <option>50</option>\\n                <option>100</option>\\n                <option>200</option>\\n                <option>300</option>\\n              </select>\\n            </div>\\n          </div>\\n        </form>\\n      </advanced-filter>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <subtitles\\n        [data]=\\\"subtitles\\\"\\n        [show]=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\n      </subtitles>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div [ngClass]=\\\"{'col': !showDetailPanel, 'col-5 pr-0': showDetailPanel}\\\">\\n      <custom-table [config]=\\\"tableConfig\\\" *ngIf=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\n        <ng-template #thead let-thead>\\n          <tr>\\n            <th scope=\\\"col\\\">Tipo</th>\\n            <th scope=\\\"col\\\" class=\\\"text-center\\\" [hidden]=\\\"showDetailPanel\\\">Cadastrado em</th>\\n            <th scope=\\\"col\\\" [hidden]=\\\"showDetailPanel\\\"></th>\\n          </tr>\\n        </ng-template>\\n        <ng-template #tbody let-tbody>\\n          <tr *ngFor=\\\"let tipoOperador of dadosPagination; let i = index\\\" [class.table-active]=\\\"tipoOperador.codTipoOperador == tipoOperadorSelecionado.codTipoOperador && showDetailPanel\\\">\\n            <td\\n              class=\\\"hover\\\"\\n              [ngClass]=\\\"classStatusBorder(tipoOperador)\\\"\\n              (click)=\\\"onDetails(tipoOperador)\\\">\\n              {{ tipoOperador.tipo | uppercase }}\\n            </td>\\n            <td\\n              class=\\\"text-center hover\\\"\\n              (click)=\\\"onDetails(tipoOperador)\\\"\\n              [hidden]=\\\"showDetailPanel\\\">\\n              {{ tipoOperador.dataCadastro | date: 'dd/MM/yyyy' }}\\n            </td>\\n            <td class=\\\"text-right\\\" [hidden]=\\\"showDetailPanel\\\">\\n              <span *ngIf=\\\"tipoOperador.codSituacao == 1\\\" class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onInactivate(i, tipoOperador)\\\">\\n                  <i class=\\\"fas fa-toggle-on\\\"></i>\\n                </button>\\n              </span>\\n              <span *ngIf=\\\"tipoOperador.codSituacao == 2\\\" class=\\\"mr-3\\\" tooltip=\\\"Ativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onActivate(i, tipoOperador)\\\">\\n                  <i class=\\\"fas fa-toggle-off\\\"></i>\\n                </button>\\n              </span>\\n              <span class=\\\"mr-3\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onEdit(tipoOperador)\\\">\\n                  <i class=\\\"fas fa-edit\\\"></i>\\n                </button>\\n              </span>\\n            </td>\\n          </tr>\\n        </ng-template>\\n      </custom-table>\\n      <empty-result\\n        message=\\\"Nenhuma informação encontrada\\\"\\n        class=\\\"my-3\\\"\\n        *ngIf=\\\"dadosEmpty\\\">\\n      </empty-result>\\n      <div class=\\\"d-flex justify-content-center mt-3\\\" *ngIf=\\\"totalItems > itemsPerPage && dadosLoaded\\\">\\n        <pagination\\n          [maxSize]=\\\"maxSize\\\"\\n          [(totalItems)]=\\\"totalItems\\\"\\n          (pageChanged)=\\\"onPageChanged($event)\\\"\\n          [(itemsPerPage)]=\\\"itemsPerPage\\\"\\n          [boundaryLinks]=\\\"true\\\"\\n          [(ngModel)]=\\\"currentPage\\\"\\n          previousText=\\\"&lsaquo;\\\"\\n          nextText=\\\"&rsaquo;\\\"\\n          firstText=\\\"&laquo;\\\"\\n          lastText=\\\"&raquo;\\\">\\n        </pagination>\\n      </div>\\n    </div>\\n    <div class=\\\"col-7\\\" [hidden]=\\\"!showDetailPanel\\\">\\n      <detail-panel [panelTitle]=\\\"detailPanelTitle\\\">\\n        <custom-table *ngIf=\\\"alteracoes.length > 0\\\">\\n          <ng-template #thead let-thead>\\n            <tr>\\n              <th scope=\\\"col\\\" class=\\\"text-center\\\">Data</th>\\n              <th scope=\\\"col\\\">Usuário</th>\\n              <th scope=\\\"col\\\">Alteração</th>\\n            </tr>\\n          </ng-template>\\n          <ng-template #tbody let-tbody>\\n            <tr *ngFor=\\\"let alteracao of alteracoes\\\">\\n              <td class=\\\"text-center\\\">{{ alteracao.dataLog | date: 'dd/MM/yyyy HH:mm' }}</td>\\n              <td>{{ alteracao.nomeUsuario | uppercase }}</td>\\n              <td>{{ alteracao.mensagem | uppercase }}</td>\\n            </tr>\\n          </ng-template>\\n        </custom-table>\\n      </detail-panel>\\n    </div>\\n  </div>\\n</app-body>\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy90aXBvLW9wZXJhZG9yZXMvZm9ybXVsYXJpby9mb3JtdWxhcmlvLmNvbXBvbmVudC5zY3NzIn0= */\";"]}