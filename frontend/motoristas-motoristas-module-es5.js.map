{"version":3,"sources":["webpack:///src/app/modules/logistica/cadastros/motoristas/cadastro/cadastro.component.scss","webpack:///src/app/modules/logistica/cadastros/motoristas/lista/lista.component.ts","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/logistica/cadastros/motoristas/lista/lista.component.html","webpack:///src/app/shared/services/core/date.service.ts","webpack:///src/app/modules/logistica/cadastros/motoristas/lista/lista.component.scss","webpack:///src/app/modules/logistica/cadastros/motoristas/motoristas-routing.module.ts","webpack:///src/app/modules/logistica/cadastros/motoristas/motoristas.module.ts","webpack:///src/app/modules/logistica/cadastros/motoristas/cadastro/cadastro.component.html","webpack:///src/app/modules/logistica/cadastros/motoristas/cadastro/cadastro.component.ts","webpack:///src/app/modules/logistica/cadastros/motoristas/services/motorista.service.ts"],"names":["LogisticaMotoristasListaComponent","route","pnotify","activatedRoute","confirmModalService","motoristaService","formBuilder","routerService","dateService","MASKS","loading","loadingNavBar","tipos","cod","nome","subtitles","id","text","color","itemsPerPage","totalItems","currentPage","buildForm","setBreadCrumb","onActivatedRoute","$activatedRouteSubscription","unsubscribe","queryParams","subscribe","response","_response","getBase64UrlParams","form","patchValue","getMotoristas","getParams","group","ID_LOGI_MOTO","NM_MOTO","CPF","cpf","DS_OBSE","IN_STAT","PAGI","TT_REGI_PAGI","TIME","Date","getTime","onFilter","snapshot","params","idSubModulo","breadCrumbTree","descricao","routerLink","get","setValue","navigate","relativeTo","setBase64UrlParams","pipe","status","motoristas","body","noResult","error","motorista","stat","confirmChange","asObservable","result","postMotorista","success","reset","showConfirm","event","page","_params","_obj","value","prop","convertToUrlDate","selector","template","ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","show","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","providedIn","DateService","months","weeks","dateA","dateB","getFullYear","getMonth","getDate","date","getHours","getMinutes","hours","minutes","showTime","day","weekDay","getDay","month","year","hour","getHourMinute","hourB","y","m","d","h","i","toString","padStart","s","getSeconds","time","timeSplit","split","stringDate","dateType","indexOf","stringDateSplit","dateSplit","parseInt","substr","days","setDate","routes","path","component","LogisticaMotoristasRoutingModule","imports","forChild","exports","MotoristasModule","declarations","forRoot","LogisticaMotoristasCadastroComponent","router","titleService","atividadesService","localeService","tipoMotoristaService","tipoMotorista","use","bsConfig","Object","assign","containerClass","adaptivePosition","showWeekNumbers","registrarAcesso","setFormBuilder","getTipoMotorista","appTitle","setTitle","required","ID_LOGI_MOTO_TIPO","field","onFieldInvalid","touched","loadingTipoMotorista","getTipoMotoristas","formControl","controls","validator","validationResult","LogisticaMotoristaService","http","API","observe","post"],"mappings":"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","file":"motoristas-motoristas-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvbG9naXN0aWNhL2NhZGFzdHJvcy9tb3RvcmlzdGFzL2NhZGFzdHJvL2NhZGFzdHJvLmNvbXBvbmVudC5zY3NzIn0= */\";","//angular\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder } from '@angular/forms';\n\n//servicos\nimport { ConfirmModalService } from './../../../../../shared/modules/confirm-modal/confirm-modal.service';\nimport { Subtitles } from './../../../../../shared/modules/subtitles/subtitles';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { LogisticaMotoristaService } from '../services/motorista.service';\nimport { RouterService } from 'src/app/shared/services/core/router.service';\n\n// rxjs\nimport { finalize } from 'rxjs/operators';\nimport { Subscription, EMPTY } from 'rxjs';\nimport { take, switchMap } from 'rxjs/operators';\n\n//modelos\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\nimport { ILogisticaMotorista } from './../models/motorista';\nimport { DateService } from 'src/app/shared/services/core/date.service';\n\n//masks\nimport { MASKS, NgBrazilValidators } from 'ng-brazil';\n\n@Component({\n  selector: 'logistica-motoristas-lista',\n  templateUrl: './lista.component.html',\n  styleUrls: ['./lista.component.scss'],\n})\nexport class LogisticaMotoristasListaComponent implements OnInit, OnDestroy {\n  public MASKS = MASKS;\n\n  breadCrumbTree: Array<Breadcrumb>;\n  idSubModulo: number;\n  motoristas: Array<ILogisticaMotorista>;\n  noResult: boolean;\n  loading = true; //Loading FullPage\n  loadingNavBar = false; //Loading do NAVBAR\n\n  $activatedRouteSubscription: Subscription;\n\n  form: FormGroup;\n\n  // Tipos de Situação dos Motoristas (Ativo/Inativo)\n  tipos = [\n    {\n      cod: '1',\n      nome: 'Activo',\n    },\n    {\n      cod: '0',\n      nome: 'Inactivo',\n    },\n  ];\n\n  subtitles: Array<Subtitles> = [\n    {\n      id: 1,\n      text: 'Activo',\n      color: 'green',\n    },\n    {\n      id: 2,\n      text: 'Inactivo',\n      color: 'red',\n    },\n  ];\n\n  /* Pagination */\n  itemsPerPage = 100;\n  totalItems = 0;\n  currentPage = 1;\n  /* Pagination */\n\n  constructor(\n    private route: Router,\n    private pnotify: PNotifyService,\n    private activatedRoute: ActivatedRoute,\n    private confirmModalService: ConfirmModalService,\n    private motoristaService: LogisticaMotoristaService,\n    private formBuilder: FormBuilder,\n    private routerService: RouterService,\n    private dateService: DateService\n  ) {}\n\n  ngOnInit() {\n    this.buildForm();\n    this.setBreadCrumb();\n    this.onActivatedRoute();\n  }\n\n  ngOnDestroy() {\n    this.$activatedRouteSubscription.unsubscribe();\n  }\n\n  onActivatedRoute() {\n    this.$activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\n      (response) => {\n        const _response = this.routerService.getBase64UrlParams(response);\n        this.form.patchValue(_response);\n        this.getMotoristas(this.getParams());\n      }\n    );\n  }\n\n  buildForm() {\n    this.form = this.formBuilder.group({\n      ID_LOGI_MOTO: [null],\n      NM_MOTO: [null],\n      CPF: [null, NgBrazilValidators.cpf],\n      DS_OBSE: [null],\n      IN_STAT: [null],\n      PAGI: [1],\n      TT_REGI_PAGI: [this.itemsPerPage],\n      TIME: [new Date().getTime()],\n    });\n  }\n  setPageRegistros(itemsPerPage) {\n    this.itemsPerPage = itemsPerPage;\n    this.onFilter();\n  }\n  setBreadCrumb() {\n    const id = this.activatedRoute.snapshot.params.idSubModulo;\n    this.breadCrumbTree = [\n      {\n        descricao: 'Home',\n        routerLink: `/logistica/home`,\n      },\n      {\n        descricao: 'Prontuários',\n        routerLink: `/logistica/cadastros/${id}`,\n      },\n      {\n        descricao: 'Conductores',\n      },\n    ];\n  }\n\n  onFilter() {\n    this.form.get('TIME').setValue(new Date().getTime());\n    this.route.navigate([], {\n      relativeTo: this.activatedRoute,\n      queryParams: this.routerService.setBase64UrlParams(this.getParams()),\n    });\n  }\n\n  getMotoristas(params?) {\n    if (!this.loading) this.loadingNavBar = true;\n\n    this.motoristaService\n      .getMotoristas(params)\n      .pipe(\n        finalize(() => {\n          this.loading = false;\n          this.loadingNavBar = false;\n        })\n      )\n      .subscribe(\n        (response) => {\n          if (response.status === 200) {\n            this.motoristas = response.body['data'];\n            this.totalItems = response.body['total'];\n            this.noResult = false;\n          } else {\n            this.noResult = true;\n            this.motoristas = [];\n          }\n        },\n        (error) => {\n          this.pnotify.error();\n          this.noResult = true;\n        }\n      );\n  }\n\n  changeType(motorista: ILogisticaMotorista) {\n    const stat = motorista.IN_STAT == '1' ? '0' : '1';\n\n    this.confirmChange(stat)\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap((result) => {\n          if (!result) return EMPTY;\n\n          this.loadingNavBar = true;\n          motorista.IN_STAT = stat;\n          return this.motoristaService.postMotorista(motorista);\n        }),\n        finalize(() => {\n          this.loadingNavBar = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotify.success();\n          //tipoContrato.IN_STAT = stat;\n        },\n        (error: any) => {\n          motorista.IN_STAT = motorista.IN_STAT == '1' ? '0' : '1';\n          this.pnotify.error();\n        }\n      );\n  }\n\n  onReset() {\n    this.form.reset();\n    this.form.patchValue({\n      PAGI: 1,\n      TT_REGI_PAGI: 100,\n      TIME: [new Date().getTime()],\n    });\n  }\n\n  confirmChange(stat): any {\n    if (stat == '1')\n      return this.confirmModalService.showConfirm(\n        null,\n        null,\n        'Desea continuar?',\n        'Cancelar',\n        'Confirmar'\n      );\n\n    return this.confirmModalService.showConfirm(\n      'inactivate',\n      'Confirmar in inactivación',\n      'Desea continuar?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  openRegister(motorista: ILogisticaMotorista) {\n    this.route.navigate(['../cadastro'], {\n      relativeTo: this.activatedRoute,\n      queryParams: this.routerService.setBase64UrlParams(motorista),\n    });\n  }\n\n  onPageChanged(event) {\n    this.form.get('PAGI').setValue(event.page);\n    this.onFilter();\n  }\n\n  getParams() {\n    let _params = {};\n    let _obj = this.form.value;\n\n    for (let prop in _obj) {\n      if (_obj[prop]) {\n        if (_obj[prop] instanceof Date)\n          _params[prop] = this.dateService.convertToUrlDate(_obj[prop]);\n        else _params[prop] = _obj[prop];\n      }\n    }\n\n    return _params;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\n// Components\nimport { ConfirmModalComponent } from './confirm-modal.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmModalService {\n  constructor(private modalService: BsModalService) {}\n\n  showConfirm(\n    type: string,\n    title: string,\n    message: string,\n    cancelTxt?: string,\n    okTxt?: string\n  ) {\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: false,\n      ignoreBackdropClick: true,\n      keyboard: false,\n      class: 'confirm'\n    });\n\n    modalRef.content.type = type;\n    modalRef.content.title = title;\n    modalRef.content.message = message;\n\n    if (type === 'delete') {\n      modalRef.content.messageAlerts = [\n        \"Se eliminará toda la información relacionada.\",\n        \"Esta acción no se puede deshacer.\"\n      ];\n    }\n\n    if (type === 'inactivate') {\n      modalRef.content.messageAlerts = [\n        'Las informacion serán inactivadas.'\n      ];\n    }\n\n    if (cancelTxt) {\n      modalRef.content.cancelTxt = cancelTxt;\n    }\n\n    if (okTxt) {\n      modalRef.content.okTxt = okTxt;\n    }\n\n    // É uma boa prática tipar o retorno.\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\n  }\n}\n","export default \"<loader-spinner-navbar *ngIf=\\\"loadingNavBar\\\"></loader-spinner-navbar>\\n<loader-spinner-full-screen *ngIf=\\\"loading\\\"></loader-spinner-full-screen>\\n<app-header appTitle=\\\"Conductores\\\">\\n  <button\\n  type=\\\"button\\\"\\n  (click)=\\\"onReset()\\\">\\n  Limpiar\\n</button>\\n  <button\\n    type=\\\"button\\\"\\n    [routerLink]=\\\"['../cadastro']\\\">\\n    Añadir\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onFilter()\\\">\\n    Filtrar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loading\\\">\\n  <div class=\\\"row\\\" #scrollToFilter>\\n    <div class=\\\"col\\\">\\n      <advanced-filter>\\n        <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\">\\n              <label for=\\\"ID_LOGI_MOTO\\\">ID</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"ID_LOGI_MOTO\\\"\\n                formControlName=\\\"ID_LOGI_MOTO\\\"\\n                placeholder=\\\"DIGITE...\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-4\\\">\\n              <label for=\\\"NM_MOTO\\\">Nombre del conductor</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"NM_MOTO\\\"\\n                formControlName=\\\"NM_MOTO\\\"\\n                placeholder=\\\"DIGITE...\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col\\\">\\n              <label for=\\\"CPF\\\">Seguro social</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                cpf [textMask]=\\\"{mask: MASKS.cpf.textMask}\\\"\\n                id=\\\"CPF\\\"\\n                formControlName=\\\"CPF\\\"\\n                placeholder=\\\"DIGITE...\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col\\\">\\n              <label for=\\\"IN_STAT\\\">Status</label>\\n              <ng-select\\n                [searchable]=\\\"true\\\"\\n                [clearable]=\\\"true\\\"\\n                [items]=\\\"tipos\\\"\\n                [virtualScroll]=\\\"true\\\"\\n                labelForId=\\\"tipo\\\"\\n                bindLabel=\\\"nome\\\"\\n                bindValue=\\\"cod\\\"\\n                id=\\\"tipo\\\"\\n                (change)=\\\"onFilter()\\\"\\n                formControlName=\\\"IN_STAT\\\"\\n                placeholder=\\\"SELECCIONE...\\\"\\n              >\\n                <ng-template ng-option-tmp let-item=\\\"item\\\" let-index=\\\"index\\\"> {{item.nome}}\\n                </ng-template>\\n              </ng-select>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n              <label>Registros</label>\\n              <select \\n                class=\\\"form-control custom-select\\\"\\n                formControlName=\\\"TT_REGI_PAGI\\\"\\n                (change)=\\\"setPageRegistros($event.target.value)\\\"  \\n              >\\n                <option value=\\\"10\\\">10</option>\\n                <option value=\\\"25\\\">25</option>\\n                <option value=\\\"50\\\">50</option>\\n                <option value=\\\"100\\\">100</option>\\n                <option value=\\\"250\\\">250</option>\\n                <option value=\\\"500\\\">500</option>\\n              </select>\\n            </div>\\n          </div>\\n        </form>\\n      </advanced-filter>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <subtitles\\n        [data]=\\\"subtitles\\\"\\n        [show]=\\\"!noResult\\\">\\n      </subtitles>\\n    </div>\\n  </div>\\n  <div class=\\\"col-12 p-0\\\" [hidden] = \\\"loading || noResult\\\">\\n    <div>\\n      <table  class=\\\"table table-sm table-hover custom-border border-left border-right border-bottom text-center table-fixed\\\">\\n        <thead class=\\\"thead-light\\\">\\n          <tr>\\n            <th>ID </th>\\n            <th>Nombre del conductor</th>\\n            <th>Seguro social</th>\\n            <th style=\\\"width:80px\\\"></th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let motorista of motoristas; let i = index\\\">\\n            <td [ngClass]=\\\"motorista.IN_STAT == '1' ? 'border-success' : 'border-danger'\\\">\\n            {{motorista.ID_LOGI_MOTO | number : '6.0-0'}}\\n            </td>\\n            <td>{{ motorista.NM_MOTO | uppercase }}</td>\\n            <td>{{ motorista.CPF | cpf}} </td>\\n            <td class=\\\"align-middle\\\" style=\\\"width:70px\\\">\\n              <span class=\\\"mr-3\\\" [tooltip]=\\\"motorista.IN_STAT == 1 ? 'Inactivar' : 'Activar'\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"changeType(motorista)\\\">\\n                  <i [ngClass]=\\\"motorista.IN_STAT == '1' ? 'fas fa-toggle-on' : 'fas fa-toggle-off'\\\"></i>\\n                </button>\\n              </span>\\n              <span class=\\\"mr-3\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"openRegister(motorista)\\\">\\n                  <i class=\\\"fas fa-edit\\\"></i>\\n                </button>\\n              </span>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <div>\\n      Mostrando {{ itemsPerPage*(currentPage - 1) + 1 }} a {{ currentPage*(itemsPerPage) > totalItems ? totalItems : currentPage*(itemsPerPage) }} de {{ totalItems }}\\n      <pagination\\n        [maxSize]=\\\"10\\\"\\n        [totalItems]=\\\"totalItems\\\"\\n        (pageChanged)=\\\"onPageChanged($event)\\\"\\n        [(itemsPerPage)]=\\\"itemsPerPage\\\"\\n        [boundaryLinks]=\\\"true\\\"\\n        [(ngModel)]=\\\"currentPage\\\"\\n        previousText=\\\"&lsaquo;\\\"\\n        nextText=\\\"&rsaquo;\\\"\\n        firstText=\\\"&laquo;\\\"\\n        lastText=\\\"&raquo;\\\">\\n      </pagination>\\n    </div>\\n  </div>\\n  <div [hidden]=\\\"loading || !noResult\\\" class=\\\"text-center d-flex justify-content-center align-items-center\\\" style=\\\"height: 80%\\\">\\n    <empty-result message=\\\"Ningún informacion econtrada\\\"></empty-result>\\n  </div>\\n</app-body>\";","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DateService {\n  months: Array<string> = [\n    'Enero',\n    'Febrero',\n    'Marzon',\n    'Abril',\n    'Mayo',\n    'Junio',\n    'Julio',\n    'Agosto',\n    'Septiembre',\n    'Octubre',\n    'Noviembre',\n    'Diciembre',\n  ];\n\n  weeks: Array<string> = [\n    'Domingo',\n    'Lunes',\n    'Martes',\n    'Miercoles',\n    'Jueves',\n    'Viernes',\n    'Sábado',\n  ];\n\n  sameDay(dateA: Date, dateB: Date): boolean {\n    return (\n      dateA.getFullYear() === dateB.getFullYear() &&\n      dateA.getMonth() === dateB.getMonth() &&\n      dateA.getDate() === dateB.getDate()\n    );\n  }\n\n  getHourMinute(date: Date): string {\n    const getHours = date.getHours();\n    const getMinutes = date.getMinutes();\n    let hours: any, minutes: any;\n\n    if (getHours < 10) {\n      hours = `0${getHours}`;\n    } else {\n      hours = getHours;\n    }\n\n    if (getMinutes < 10) {\n      minutes = `0${getMinutes}`;\n    } else {\n      minutes = getMinutes;\n    }\n\n    return `${hours}:${minutes}`;\n  }\n\n  getFullDate(dateA: Date, dateB?: Date, showTime: boolean = true): string {\n    const day = dateA.getDate();\n    const weekDay = dateA.getDay();\n    const month = dateA.getMonth();\n    const year = dateA.getFullYear();\n    const hour = this.getHourMinute(dateA);\n\n    if (showTime) {\n      if (dateB) {\n        const hourB = this.getHourMinute(dateB);\n\n        return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}, desde ${hour} hasta ${hourB}`;\n      }\n\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year} hasta ${hour}`;\n    } else {\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}`;\n    }\n  }\n\n  getFullMonth(date: Date): string {\n    return this.months[date.getMonth()];\n  }\n\n  getFirstDayYear(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), 0, 1);\n  }\n\n  getLastDayYear(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), 11, 31);\n  }\n\n  getFirstDayMonth(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth(), 1);\n  }\n\n  getLastDayMonth(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n  }\n\n  getToday(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  convert2PhpDate(date: Date): string {\n    const y = date.getFullYear();\n    let m: any = date.getMonth() + 1;\n    let d: any = date.getDate();\n    let h: any = date.getHours();\n    let i: any = date.getMinutes();\n\n    if (m < 10) m = `0${m}`;\n    if (d < 10) d = `0${d}`;\n    if (h < 10) h = `0${h}`;\n    if (i < 10) i = `0${i}`;\n\n    return `${y}-${m}-${d} ${h}:${i}`;\n  }\n\n  convertToBrazilianDate(date: Date): string {\n    let y = date.getFullYear().toString();\n    let m = (date.getMonth() + 1).toString().padStart(2, '0');\n    let d = date.getDate().toString().padStart(2, '0');\n    let h = date.getHours().toString().padStart(2, '0');\n    let i = date.getMinutes().toString().padStart(2, '0');\n    let s = date.getSeconds().toString().padStart(2, '0');\n\n    return `${d}/${m}/${y} ${h}:${i}:${s}`;\n  }\n\n  convertMysqlTime(time: string): string {\n    if (time !== null) {\n      let timeSplit = time.split(':');\n\n      return `${timeSplit[0]}:${timeSplit[1]}`;\n    }\n\n    return time;\n  }\n\n  convertToUrlDate(date: Date): string {\n    let d: any = date.getDate();\n    let m: any = date.getMonth() + 1;\n    let y: any = date.getFullYear();\n\n    if (d < 10) d = `0${d}`;\n    if (m < 10) m = `0${m}`;\n\n    return `${d}-${m}-${y}`;\n  }\n\n  convertStringToDate(stringDate: any, dateType: string): Date {\n    let date: Date;\n\n    if (stringDate.indexOf(':') > -1) {\n      const stringDateSplit = stringDate.split(' ');\n      const dateSplit = stringDateSplit[0].split('-');\n      const timeSplit = stringDateSplit[1].split(':');\n\n      if (dateType == 'latam') {\n        date = new Date(\n          dateSplit[2],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[0].substr(0, 2),\n          timeSplit[0],\n          timeSplit[1],\n          timeSplit[2]\n        );\n      } else if (dateType == 'usa') {\n        date = new Date(\n          dateSplit[0],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[2].substr(0, 2),\n          timeSplit[0],\n          timeSplit[1],\n          timeSplit[2]\n        );\n      }\n    } else {\n      const dateSplit = stringDate.split('-');\n\n      if (dateType == 'latam') {\n        date = new Date(\n          dateSplit[2],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[0].substr(0, 2)\n        );\n      } else if (dateType == 'usa') {\n        date = new Date(\n          dateSplit[0],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[2].substr(0, 2)\n        );\n      }\n    }\n\n    return date;\n  }\n\n  formatWithSlashes(stringDate: any, dateType: string): string {\n    const dateSplit = stringDate.split('-');\n    let date: string;\n\n    if (dateType == 'latam') {\n      date = `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`;\n    } else if (dateType == 'usa') {\n      date = `${dateSplit[1]}/${dateSplit[2]}/${dateSplit[0]}`;\n    }\n\n    return date;\n  }\n\n  addDaysToDate(date: Date, days: number): Date {\n    return new Date(date.setDate(date.getDate() + days));\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvbG9naXN0aWNhL2NhZGFzdHJvcy9tb3RvcmlzdGFzL2xpc3RhL2xpc3RhLmNvbXBvbmVudC5zY3NzIn0= */\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NotFoundComponent } from 'src/app/core/not-found/not-found.component';\nimport { LogisticaMotoristasCadastroComponent } from './cadastro/cadastro.component';\nimport { LogisticaMotoristasListaComponent } from './lista/lista.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LogisticaMotoristasListaComponent,\n  },\n  {\n    path: 'novo',\n    component: LogisticaMotoristasCadastroComponent,\n  },\n  {\n    path: ':id',\n    component: LogisticaMotoristasCadastroComponent,\n  },\n  {\n    path: '**',\n    component: NotFoundComponent,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LogisticaMotoristasRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport {\n  PaginationModule,\n  TooltipModule,\n  TabsModule,\n  TimepickerModule,\n  BsDatepickerModule,\n  ModalModule,\n} from 'ngx-bootstrap';\n\nimport { NgSelectModule } from '@ng-select/ng-select';\n\nimport { PipesModule } from 'src/app/shared/pipes/pipes.module';\nimport { NotFoundModule } from 'src/app/core/not-found/not-found.module';\nimport { ModuleWrapperModule } from 'src/app/core/module-wrapper/module-wrapper.module';\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\n\nimport { NgBrazil } from 'ng-brazil';\nimport { TextMaskModule } from 'angular2-text-mask';\n\nimport { LogisticaMotoristasRoutingModule } from './motoristas-routing.module';\n\nimport { LogisticaMotoristasCadastroComponent } from './cadastro/cadastro.component';\nimport { LogisticaMotoristasListaComponent } from './lista/lista.component';\n\n\n@NgModule({\n  declarations: [\n    LogisticaMotoristasListaComponent,\n    LogisticaMotoristasCadastroComponent\n  ],\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    PaginationModule.forRoot(),\n    TooltipModule.forRoot(),\n    TabsModule.forRoot(),\n    TimepickerModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    ModalModule.forRoot(),\n    PipesModule,\n    NotFoundModule,\n    ModuleWrapperModule,\n    SharedModule,\n    TemplatesModule,\n    NgBrazil,\n    TextMaskModule,\n    LogisticaMotoristasRoutingModule,\n  ]\n})\nexport class MotoristasModule { }\n","export default \"<loader-spinner-full-screen *ngIf=\\\"loading\\\"></loader-spinner-full-screen>\\n<loader-spinner-navbar [hidden]=\\\"!loadingNavBar\\\"></loader-spinner-navbar>\\n<app-header appTitle=\\\"Prontuario de conductor\\\">\\n  <button \\n    [disabled]=\\\"form.valid === false\\\"\\n    (click)=\\\"postMotorista()\\\"\\n    >\\n    Ahorrar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-4\\\">\\n      <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"NM_MOTO\\\">Nombre del conductor</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"NM_MOTO\\\"\\n              formControlName=\\\"NM_MOTO\\\"\\n              placeholder=\\\"Digite...\\\"\\n              [ngClass]=\\\"onFieldError('NM_MOTO') + ' ' + onFieldRequired('NM_MOTO')\\\"\\n            />\\n            <invalid-form-control [show]=\\\"onFieldInvalid('NM_MOTO')\\\" message=\\\"Se requiere el nombre del conductor.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"tipoMotorista\\\">Tipo de conductor</label>\\n              <ng-select\\n                [searchable]=\\\"true\\\"\\n                [clearable]=\\\"true\\\"\\n                [items]=\\\"tipoMotorista\\\"\\n                [virtualScroll]=\\\"true\\\"\\n                placeholder=\\\"SELECCIONE...\\\"\\n                [loading]=\\\"loadingTipoMotorista\\\"\\n                labelForId=\\\"ID_LOGI_MOTO_TIPO\\\"\\n                bindLabel=\\\"NM_MOTO_TIPO\\\"\\n                bindValue=\\\"ID_LOGI_MOTO_TIPO\\\"\\n                id=\\\"ID_LOGI_MOTO_TIPO\\\"\\n                formControlName=\\\"ID_LOGI_MOTO_TIPO\\\">\\n              </ng-select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('ID_LOGI_MOTO_TIPO')\\\" message=\\\"El tipo del conductor es obligatorio.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-md-6\\\">\\n            <label for=\\\"CPF\\\">Seguro social</label>\\n            <input\\n              type=\\\"text\\\"\\n              [textMask]=\\\"{mask: MASKS.cpf.textMask}\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"CPF\\\"\\n              formControlName=\\\"CPF\\\"\\n              placeholder=\\\"Digite...\\\"\\n              [ngClass]=\\\"onFieldError('CPF') + ' ' + onFieldRequired('CPF')\\\"\\n            />\\n            <invalid-form-control [show]=\\\"onFieldInvalid('CPF')\\\" message=\\\"El Seguro social del conductor es obligatorio.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"IN_STAT\\\">Status</label>\\n            <select\\n              class=\\\"form-control custom-select\\\"\\n              id=\\\"IN_STAT\\\"\\n              formControlName=\\\"IN_STAT\\\"\\n              [ngClass]=\\\"onFieldRequired('IN_STAT')\\\">\\n              <option value=\\\"1\\\">Activo</option>\\n              <option value=\\\"0\\\">Inactivo</option>\\n            </select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('IN_STAT')\\\" message=\\\"El status es obligatorio.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"DS_OBSE\\\">Observacion:</label>\\n            <textarea class=\\\"form-control\\\" id=\\\"DS_OBSE\\\" formControlName=\\\"DS_OBSE\\\" rows=\\\"3\\\"></textarea>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n</app-body>\";","import { ILogisticaTipoMotorista } from './../../tipo-motorista/models/tipo-motorista';\nimport { LogisticaTipoMotoristaService } from './../../tipo-motorista/services/tipo-motorista.service';\nimport { MASKS, NgBrazilValidators } from 'ng-brazil';\nimport { RouterService } from 'src/app/shared/services/core/router.service';\nimport { TitleService } from 'src/app/shared/services/core/title.service';\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\nimport { BsLocaleService, BsDatepickerConfig } from 'ngx-bootstrap';\nimport { finalize } from 'rxjs/operators';\n\nimport { LogisticaMotoristaService } from '../services/motorista.service';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  AbstractControl,\n  Validators,\n  FormControl,\n} from '@angular/forms';\n//interfaces\nimport { ILogisticaMotorista } from './../models/motorista';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'logistica-motoristas-cadastro',\n  templateUrl: './cadastro.component.html',\n  styleUrls: ['./cadastro.component.scss'],\n})\nexport class LogisticaMotoristasCadastroComponent implements OnInit, OnDestroy {\n  noResult: boolean;\n  loading = false;\n  loadingNavBar = false;\n  breadCrumbTree: Array<any> = [];\n  form: FormGroup;\n  appTitle: string;\n  bsConfig: Partial<BsDatepickerConfig>;\n\n  tipoMotorista: ILogisticaTipoMotorista[] = [];\n  loadingTipoMotorista: boolean;\n  motoristas: Array<ILogisticaMotorista>;\n  $activatedRouteSubscription: Subscription;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private pnotify: PNotifyService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private routerService: RouterService,\n    private titleService: TitleService,\n    private atividadesService: AtividadesService,\n    private localeService: BsLocaleService,\n    private motoristaService: LogisticaMotoristaService,\n    private tipoMotoristaService: LogisticaTipoMotoristaService\n  ) {\n    this.localeService.use('pt-br');\n    this.bsConfig = Object.assign(\n      {},\n      { containerClass: 'theme-dark-blue' },\n      { adaptivePosition: true },\n      { showWeekNumbers: false }\n    );\n  }\n  public MASKS = MASKS;\n  ngOnInit(): void {\n    this.registrarAcesso();\n    this.setBreadCrumb();\n    this.setFormBuilder();\n    this.onActivatedRoute();\n    this.getTipoMotorista();\n  }\n\n  registrarAcesso(): void {\n    this.atividadesService.registrarAcesso().subscribe();\n  }\n\n  setBreadCrumb(): void {\n    this.appTitle = 'Cadastro';\n    const id = this.activatedRoute.snapshot.params.idSubModulo;\n    this.titleService.setTitle(this.appTitle);\n    this.breadCrumbTree = [\n      {\n        descricao: 'Home',\n        routerLink: '/logistica/home',\n      },\n      {\n        descricao: 'Prontuários',\n        routerLink: `/logistica/cadastros/${id}`,\n      },\n      {\n        descricao: 'Conductores',\n        routerLink: `../`,\n      },\n      {\n        descricao: this.appTitle,\n      },\n    ];\n  }\n\n  //Consumir informações que estão na rota para editar\n  ngOnDestroy() {\n    this.$activatedRouteSubscription.unsubscribe();\n  }\n\n  onActivatedRoute() {\n    this.$activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\n      (response) => {\n        const _response = this.routerService.getBase64UrlParams(response);\n        this.form.patchValue(_response);\n      }\n    );\n  }\n\n  //formulario\n  setFormBuilder(): void {\n    this.form = this.formBuilder.group({\n      ID_LOGI_MOTO: [null],\n      NM_MOTO: [null, [Validators.required]],\n      CPF: [null, [Validators.required]],\n      IN_STAT: ['1'],\n      DS_OBSE: [null],\n      ID_LOGI_MOTO_TIPO: [null, [Validators.required]],\n    });\n  }\n\n  // Validação de formulário\n  onFieldError(field: string) {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n    return '';\n  }\n\n  onFieldInvalid(field: any) {\n    field = this.form.get(field);\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  getTipoMotorista() {\n    this.loadingTipoMotorista = true;\n    this.tipoMotoristaService\n      .getTipoMotoristas({ IN_STAT: '1' })\n      .pipe(\n        finalize(() => {\n          this.loadingTipoMotorista = false;\n        })\n      )\n      .subscribe((response) => {\n        if (response.status === 200) {\n          this.tipoMotorista = response.body['data'];\n        }\n      });\n  }\n\n  onFieldRequired(field: string) {\n    let required = false;\n    let formControl = new FormControl();\n\n    if (this.form.controls[field].validator) {\n      let validationResult = this.form.controls[field].validator(formControl);\n      required =\n        validationResult !== null && validationResult.required === true;\n    }\n\n    if (required) {\n      return 'is-required';\n    }\n  }\n\n  postMotorista() {\n    this.loadingNavBar = true;\n    this.motoristaService\n      .postMotorista(this.form.value)\n      .pipe(\n        finalize(() => {\n          this.loadingNavBar = false;\n        })\n      )\n      .subscribe(\n        (response: any) => {\n          if (response.status === 200) {\n            this.form.reset();\n            this.pnotify.success();\n            this.router.navigate(['./../'], {\n              relativeTo: this.activatedRoute,\n            });\n          } else {\n            this.pnotify.error();\n          }\n        },\n        (error: any) => {\n          this.pnotify.error();\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LogisticaMotoristaService {\n  private readonly API = `https://crm360.monterrey.com.bo/api`;\n\n  constructor(private http: HttpClient) { }\n\n  getMotoristas(params?) {\n    return this.http.get(`${this.API}/logistica/motoristas`, {\n      params: params,\n      observe: 'response',\n    });\n  }\n\n  postMotorista(params) {\n    return this.http.post(`${this.API}/logistica/motorista`, params, {\n      observe: 'response',\n    });\n  }\n}\n"]}