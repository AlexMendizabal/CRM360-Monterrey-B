{"version":3,"sources":["webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais-routing.module.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario-resolver.guard.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.html","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.ts","webpack:///src/app/shared/services/core/date.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.html","webpack:///src/app/modules/comercial/comercial.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.scss","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.scss","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.scss","webpack:///src/app/guards/form-deactivate.guard.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.html","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais.module.ts"],"names":["routes","path","component","resolve","detalhes","canDeactivate","redirectTo","pathMatch","ComercialCadastrosOperadorComercialModuleRoutingModule","imports","forChild","exports","ComercialCadastrosOperadorComercialService","http","API","params","httpParams","param","append","get","pipe","codOperador","operadorComercial","post","put","updateOperadorComercial","saveOperadorComercial","providedIn","ComercialCadastrosOperadorComercialFormularioResolverGuard","operadorComercialService","route","id","getDetalhes","success","data","codSap","codMtcorp","nomeOperador","sobrenomeOperador","tipoOperador","codSituacao","codEquipe","codEscritorio","tipoPessoa","cpf","cnpj","ie","rg","telefone","whatsApp","email","cep","logradouro","numero","complemento","referencia","bairro","cidade","estado","banco","agencia","contaCorrente","dataInicioContrato","dataFinalContrato","ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","show","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","ComercialCadastrosOperadorComercialFormularioComponent","activatedRoute","router","location","localeService","formBuilder","pnotifyService","atividadesService","titleService","tipoOperadorService","equipeVendaService","comercialService","estadosService","dateService","confirmModalService","cepService","MASKS","loaderFullScreen","breadCrumbTree","formChanged","tipoOperadores","equipesVenda","escritorios","estados","use","bsConfig","Object","assign","containerClass","adaptivePosition","showWeekNumbers","getPNotify","registrarAcesso","setBreadCrumb","getFormFields","setFormBuilder","checkRouterParams","subscribe","appTitle","setTitle","descricao","routerLink","idSubModulo","formDependencies","next","response","hasOwnProperty","error","back","responseCode","result","getEstados","getListaTipoOperador","getListaEquipesVenda","getEscritorios","snapshot","convertStringToDate","form","group","required","codTipoOperador","cpfCnpj","rgIe","celular","endereco","dadosBancarios","setType","activatedRouteSubscription","queryParams","keys","length","atob","JSON","parse","showModalAssociacoes","unsubscribe","controls","markAsUntouched","enable","setValidators","setValue","disable","updateValueAndValidity","field","onFieldInvalid","status","touched","abstractControl","abstractControlField","validator","controlName","onFieldRequired","pristine","valid","loaderNavbar","submittingForm","save","value","mensagem","navigate","relativeTo","checkAssociacoes","notice","showConfirm","onConfirmAssociacoes","onRefuseAssociacoes","q","btoa","stringify","consultaCEP","getData","patchValue","localidade","uf","confirm","selector","template","ComercialCadastrosOperadorComercialListaComponent","escritorioService","subtitles","text","color","tableConfig","subtitleBorder","orderBy","orderType","maxSize","itemsPerPage","currentPage","totalItems","dados","dadosPagination","dadosLoaded","dadosEmpty","setFormFilter","loadDependencies","unshift","tipo","situacao","nomeUsuario","dataCadastro","codEquipeVenda","dsEquipeVenda","codCarteira","codUsuario","codReferenteErp","nomeEscritorio","formValue","pagina","registros","checkOrder","search","forEach","formKey","paramKey","isNaN","Number","column","onFilter","setRouterParams","verificaParams","getListaOperadoresComerciais","slice","borderClass","event","startItem","page","endItem","scrollToFilter","nativeElement","scrollIntoView","behavior","index","confirmActivate","asObservable","activateOperadorComercial","refreshMainData","confirmInactive","inactivateOperadorComercial","i","DateService","months","weeks","dateA","dateB","getFullYear","getMonth","getDate","date","getHours","getMinutes","hours","minutes","showTime","day","weekDay","getDay","month","year","hour","getHourMinute","hourB","Date","y","m","d","h","toString","padStart","s","getSeconds","time","timeSplit","split","stringDate","dateType","indexOf","stringDateSplit","dateSplit","parseInt","substr","days","setDate","ComercialService","codCliente","FormDeactivateGuard","state","formCanDeactivate","ComercialCadastrosOperadorComercialAssociacoesComponent","motivosAssociacaoService","showModal","associacoes","associacoesLoaded","associacoesEmpty","historicoAssociacoes","historicoAssociacoesLoaded","dependenciesLoaded","operadores","motivosAssociacao","changes","currentValue","onAdd","motivoAssociacao","dataInicio","dataTermino","getAssociacoesOperadores","openModal","modalAssociacoes","showLoader","loadDepencencies","getListaMotivosAssociacao","associacaoOperadorComercial","confirmDelete","deleteAssociacaoOperador","onReloadAssociacoes","codAssociacao","customClass","config","hide","reset","postAssociacaoOperador","hideModal","getHistoricoAssociacoes","modalHistoricoAssociacoes","ComercialCadastrosOperadorComercialModule","declarations","forRoot","providers"],"mappings":"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","file":"operadores-comerciais-operadores-comerciais-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n// Guards\r\nimport { FormDeactivateGuard } from 'src/app/guards/form-deactivate.guard';\r\nimport { ComercialCadastrosOperadorComercialFormularioResolverGuard } from './formulario/formulario-resolver.guard';\r\n\r\n// Components\r\nimport { ComercialCadastrosOperadorComercialListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosOperadorComercialFormularioComponent } from './formulario/formulario.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'lista',\r\n    component: ComercialCadastrosOperadorComercialListaComponent\r\n  },\r\n  {\r\n    path: 'novo',\r\n    component: ComercialCadastrosOperadorComercialFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosOperadorComercialFormularioResolverGuard\r\n    },\r\n    canDeactivate: [FormDeactivateGuard]\r\n  },\r\n  {\r\n    path: 'editar/:id',\r\n    component: ComercialCadastrosOperadorComercialFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosOperadorComercialFormularioResolverGuard\r\n    },\r\n    canDeactivate: [FormDeactivateGuard]\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: 'lista',\r\n    pathMatch: 'full'\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ComercialCadastrosOperadorComercialModuleRoutingModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\n// Interfaces\r\nimport { OperadorComercial } from './models/operador-comercial';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComercialCadastrosOperadorComercialService {\r\n  private readonly API = `http://23.254.204.187/api/comercial/cadastros/operador-comercial`;\r\n\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  getListaOperadoresComerciais(params: any): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/lista`, { params: httpParams })\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getDetalhes(codOperador: number): Observable<any> {\r\n    return this.http.get(`${this.API}/detalhes/${codOperador}`).pipe(take(1));\r\n  }\r\n\r\n  private saveOperadorComercial(operadorComercial: OperadorComercial) {\r\n    return this.http\r\n      .post(`${this.API}/salvar`, operadorComercial)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  private updateOperadorComercial(operadorComercial: OperadorComercial) {\r\n    return this.http\r\n      .put(`${this.API}/atualizar`, operadorComercial)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  save(operadorComercial: OperadorComercial): Observable<any> {\r\n    if (operadorComercial.codOperador !== null) {\r\n      return this.updateOperadorComercial(operadorComercial);\r\n    }\r\n\r\n    return this.saveOperadorComercial(operadorComercial);\r\n  }\r\n\r\n  activateOperadorComercial(codOperador: number): Observable<any> {\r\n    return this.http.post(`${this.API}/ativar`, codOperador).pipe(take(1));\r\n  }\r\n\r\n  inactivateOperadorComercial(codOperador: number): Observable<any> {\r\n    return this.http.post(`${this.API}/inativar`, codOperador).pipe(take(1));\r\n  }\r\n\r\n  getAssociacoesOperadores(codOperador: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/associacoes/${codOperador}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getHistoricoAssociacoes(codOperador: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/historico-associacoes/${codOperador}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  postAssociacaoOperador(params: any) {\r\n    return this.http\r\n      .post(`${this.API}/salvar-associacao`, params)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  deleteAssociacaoOperador(params: any): Observable<any> {\r\n    return this.http\r\n      .post(`${this.API}/excluir-associacao`, params)\r\n      .pipe(take(1));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n// Services\r\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ComercialCadastrosOperadorComercialFormularioResolverGuard\r\n  implements Resolve<any> {\r\n  constructor(\r\n    private operadorComercialService: ComercialCadastrosOperadorComercialService\r\n  ) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n    if (route.params && route.params.id) {\r\n      return this.operadorComercialService.getDetalhes(route.params.id);\r\n    }\r\n\r\n    // É implementado o método \"of\" para manter a tipagem de retorno com Observable.\r\n    return of({\r\n      success: true,\r\n      data: {\r\n        codOperador: null,\r\n        codSap: null,\r\n        codMtcorp: null,\r\n        nomeOperador: null,\r\n        sobrenomeOperador: null,\r\n        tipoOperador: null,\r\n        codSituacao: null,\r\n        codEquipe: null,\r\n        codEscritorio: null,\r\n        tipoPessoa: 'F',\r\n        cpf: null,\r\n        cnpj: null,\r\n        ie: null,\r\n        rg: null,\r\n        telefone: null,\r\n        whatsApp: null,\r\n        email: null,\r\n        cep: null,\r\n        logradouro: null,\r\n        numero: null,\r\n        complemento: null,\r\n        referencia: null,\r\n        bairro: null,\r\n        cidade: null,\r\n        estado: null,\r\n        banco: null,\r\n        agencia: null,\r\n        contaCorrente: null,\r\n        dataInicioContrato: null,\r\n        dataFinalContrato: null\r\n      }\r\n    });\r\n  }\r\n}\r\n","export default \"<div class=\\\"row justify-content-center\\\">\\r\\n  <div class=\\\"col-lg-8\\\">\\r\\n    <div class=\\\"form-row\\\">\\r\\n      <div class=\\\"form-group col\\\"><hr></div>\\r\\n    </div>\\r\\n    <div class=\\\"form-row\\\">\\r\\n      <div class=\\\"form-group col mb-3 d-flex justify-content-between\\\">\\r\\n        <div class=\\\"mtc-title mb-0\\\">Associação de operadores</div>\\r\\n        <div>\\r\\n          <div *ngIf=\\\"!showLoader\\\">\\r\\n            <a\\r\\n              class=\\\"text-primary mr-3\\\"\\r\\n              href=\\\"javascript:void(0)\\\"\\r\\n              (click)=\\\"onHistorico()\\\"\\r\\n              *ngIf=\\\"associacoes.length > 0 && !associacoesEmpty\\\">\\r\\n              <strong>Histórico</strong>\\r\\n            </a>\\r\\n            <a\\r\\n              class=\\\"text-secondary\\\"\\r\\n              href=\\\"javascript:void(0)\\\"\\r\\n              (click)=\\\"onAdd()\\\">\\r\\n              <strong>Adicionar</strong>\\r\\n            </a>\\r\\n          </div>\\r\\n          <div class=\\\"d-flex w-100\\\" *ngIf=\\\"showLoader\\\">\\r\\n            <div class=\\\"spinner-border spinner-border-sm text-dark my-auto mr-2\\\"></div>\\r\\n            <strong>Aguarde...</strong>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n        <custom-table *ngIf=\\\"associacoes.length > 0 && !associacoesEmpty\\\">\\r\\n          <ng-template #thead let-thead>\\r\\n            <tr>\\r\\n              <th scope=\\\"col\\\">Nome do operador</th>\\r\\n              <th scope=\\\"col\\\">Motivo</th>\\r\\n              <th scope=\\\"col\\\" class=\\\"text-center\\\">Início</th>\\r\\n              <th scope=\\\"col\\\" class=\\\"text-center\\\">Término</th>\\r\\n              <th scope=\\\"col\\\"></th>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n          <ng-template #tbody let-tbody>\\r\\n            <tr *ngFor=\\\"let associacao of associacoes\\\">\\r\\n              <td>{{ associacao.nomeOperadorAssociacao | uppercase }}</td>\\r\\n              <td>{{ associacao.motivo | uppercase }}</td>\\r\\n              <td class=\\\"text-center\\\">{{ associacao.dataInicialAssociacao | date: 'dd/MM/yyyy' }}</td>\\r\\n              <td class=\\\"text-center\\\">{{ associacao.dataFinalAssociacao | date: 'dd/MM/yyyy' }}</td>\\r\\n              <td class=\\\"text-right\\\">\\r\\n                <span class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button\\r\\n                    type=\\\"button\\\"\\r\\n                    class=\\\"btn-icon-sm\\\"\\r\\n                    [disabled]=\\\"showLoader\\\"\\r\\n                    (click)=\\\"onDelete(associacao)\\\">\\r\\n                    <i class=\\\"fas fa-trash\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n        </custom-table>\\r\\n        <empty-result\\r\\n          message=\\\"Nenhuma informação encontrada\\\"\\r\\n          class=\\\"my-3\\\"\\r\\n          *ngIf=\\\"associacoesEmpty\\\">\\r\\n        </empty-result>\\r\\n        <div class=\\\"mt-2 d-flex w-100\\\" *ngIf=\\\"!associacoesLoaded\\\">\\r\\n          <div class=\\\"spinner-border spinner-border-sm text-dark my-auto mr-2\\\"></div>\\r\\n          <strong>Carregando associações...</strong>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n\\r\\n<ng-template #modalAssociacoes>\\r\\n  <div class=\\\"modal-header\\\">\\r\\n    <h4 class=\\\"modal-title pull-left\\\">Associação de operadores</h4>\\r\\n    <button\\r\\n      type=\\\"button\\\"\\r\\n      class=\\\"close pull-right\\\"\\r\\n      [disabled]=\\\"submittingForm\\\"\\r\\n      (click)=\\\"hideModal()\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n  </div>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <form [formGroup]=\\\"form\\\">\\r\\n      <div class=\\\"form-row\\\">\\r\\n        <div class=\\\"form-group col\\\">\\r\\n          <label for=\\\"operadores\\\">Selecione os operadores</label>\\r\\n          <ng-select\\r\\n            [items]=\\\"operadores\\\"\\r\\n            [multiple]=\\\"true\\\"\\r\\n            [closeOnSelect]=\\\"false\\\"\\r\\n            labelForId=\\\"operadores\\\"\\r\\n            bindValue=\\\"codOperador\\\"\\r\\n            bindLabel=\\\"nomeCompleto\\\"\\r\\n            formControlName=\\\"operadores\\\"\\r\\n            [ngClass]=\\\"onFieldError('operadores') + ' ' + onFieldRequired(form.controls.operadores)\\\">\\r\\n          </ng-select>\\r\\n          <invalid-form-control [show]=\\\"onFieldInvalid('operadores')\\\" message=\\\"Selecione pelo menos um operador.\\\"></invalid-form-control>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"form-row\\\">\\r\\n        <div class=\\\"form-group col\\\">\\r\\n          <label for=\\\"motivoAssociacao\\\">Motivo da associação</label>\\r\\n          <ng-select\\r\\n            [searchable]=\\\"true\\\"\\r\\n            [clearable]=\\\"false\\\"\\r\\n            [items]=\\\"motivosAssociacao\\\"\\r\\n            formControlName=\\\"motivoAssociacao\\\"\\r\\n            [virtualScroll]=\\\"true\\\"\\r\\n            bindLabel=\\\"motivoAssociacao\\\"\\r\\n            bindValue=\\\"codMotivoAssociacao\\\"\\r\\n            [ngClass]=\\\"onFieldError('motivoAssociacao') + ' ' + onFieldRequired(form.controls.motivoAssociacao)\\\">\\r\\n          </ng-select>\\r\\n          <invalid-form-control [show]=\\\"onFieldInvalid('motivoAssociacao')\\\" message=\\\"Motivo da associação é obrigatório.\\\"></invalid-form-control>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"form-row\\\">\\r\\n        <div class=\\\"form-group col-lg-6\\\">\\r\\n          <label for=\\\"dataInicio\\\">Início</label>\\r\\n          <input\\r\\n            class=\\\"form-control\\\"\\r\\n            id=\\\"dataInicio\\\"\\r\\n            type=\\\"text\\\"\\r\\n            bsDatepicker\\r\\n            [bsConfig]=\\\"bsConfig\\\"\\r\\n            formControlName=\\\"dataInicio\\\"\\r\\n            [ngClass]=\\\"onFieldError('dataInicio') + ' ' + onFieldRequired(form.controls.dataInicio)\\\">\\r\\n          <invalid-form-control [show]=\\\"onFieldInvalid('dataInicio')\\\" message=\\\"Início da associação é obrigatório.\\\"></invalid-form-control>\\r\\n        </div>\\r\\n        <div class=\\\"form-group col-lg-6\\\">\\r\\n          <label for=\\\"dataTermino\\\">Término</label>\\r\\n          <input\\r\\n            class=\\\"form-control\\\"\\r\\n            id=\\\"dataTermino\\\"\\r\\n            type=\\\"text\\\"\\r\\n            bsDatepicker\\r\\n            [bsConfig]=\\\"bsConfig\\\"\\r\\n            formControlName=\\\"dataTermino\\\">\\r\\n        </div>\\r\\n      </div>\\r\\n    </form>\\r\\n  </div>\\r\\n  <div class=\\\"modal-footer\\\">\\r\\n    <button\\r\\n      type=\\\"button\\\"\\r\\n      class=\\\"btn btn-light\\\"\\r\\n      [disabled]=\\\"submittingForm\\\"\\r\\n      (click)=\\\"hideModal()\\\">\\r\\n      Cancelar\\r\\n    </button>\\r\\n    <button\\r\\n      type=\\\"button\\\"\\r\\n      class=\\\"btn btn-primary\\\"\\r\\n      [disabled]=\\\"submittingForm\\\"\\r\\n      (click)=\\\"onSubmit()\\\">\\r\\n      <span *ngIf=\\\"!submittingForm\\\">Salvar</span>\\r\\n      <span *ngIf=\\\"submittingForm\\\">Aguarde</span>\\r\\n    </button>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\\r\\n<ng-template #modalHistoricoAssociacoes>\\r\\n  <div class=\\\"modal-header\\\">\\r\\n    <h4 class=\\\"modal-title pull-left\\\">Histórico de associações</h4>\\r\\n    <button\\r\\n      type=\\\"button\\\"\\r\\n      class=\\\"close pull-right\\\"\\r\\n      [disabled]=\\\"submittingForm\\\"\\r\\n      (click)=\\\"modalRef.hide()\\\">\\r\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\r\\n    </button>\\r\\n  </div>\\r\\n  <div class=\\\"modal-body\\\">\\r\\n    <custom-table *ngIf=\\\"historicoAssociacoes.length > 0\\\">\\r\\n      <ng-template #thead let-thead>\\r\\n        <tr>\\r\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Data</th>\\r\\n          <th scope=\\\"col\\\">Usuário</th>\\r\\n          <th scope=\\\"col\\\">Alteração</th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template #tbody let-tbody>\\r\\n        <tr *ngFor=\\\"let historico of historicoAssociacoes\\\">\\r\\n          <td class=\\\"text-center\\\">{{ historico.dataLog | date: 'dd/MM/yyyy HH:mm' }}</td>\\r\\n          <td>{{ historico.nomeUsuario | uppercase }}</td>\\r\\n          <td>{{ historico.mensagem | uppercase }}</td>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n    </custom-table>\\r\\n  </div>\\r\\n</ng-template>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { BsModalService } from 'ngx-bootstrap/modal';\r\n\r\n// Components\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfirmModalService {\r\n  constructor(private modalService: BsModalService) {}\r\n\r\n  showConfirm(\r\n    type: string,\r\n    title: string,\r\n    message: string,\r\n    cancelTxt?: string,\r\n    okTxt?: string\r\n  ) {\r\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\r\n      animated: false,\r\n      ignoreBackdropClick: true,\r\n      keyboard: false,\r\n      class: 'confirm'\r\n    });\r\n\r\n    modalRef.content.type = type;\r\n    modalRef.content.title = title;\r\n    modalRef.content.message = message;\r\n\r\n    if (type === 'delete') {\r\n      modalRef.content.messageAlerts = [\r\n        \"Se eliminará toda la información relacionada.\",\r\n        \"Esta acción no se puede deshacer.\"\r\n      ];\r\n    }\r\n\r\n    if (type === 'inactivate') {\r\n      modalRef.content.messageAlerts = [\r\n        'Las informaciones serán inactivadas.'\r\n      ];\r\n    }\r\n\r\n    if (cancelTxt) {\r\n      modalRef.content.cancelTxt = cancelTxt;\r\n    }\r\n\r\n    if (okTxt) {\r\n      modalRef.content.okTxt = okTxt;\r\n    }\r\n\r\n    // É uma boa prática tipar o retorno.\r\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\r\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from '@angular/forms';\r\nimport { finalize, take } from 'rxjs/operators';\r\nimport { forkJoin, Observable, Subscription } from 'rxjs';\r\n\r\n// ngx-bootstrap\r\nimport { BsLocaleService, BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\r\nimport { defineLocale } from 'ngx-bootstrap/chronos';\r\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\r\n\r\ndefineLocale('pt-br', ptBrLocale);\r\n\r\n// ng-brazil\r\nimport { NgBrazilValidators } from 'ng-brazil';\r\nimport { utilsBr } from 'js-brasil';\r\n\r\n// Services\r\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\nimport { ComercialCadastrosTipoOperadorService } from 'src/app/modules/comercial/cadastros/tipo-operadores/tipo-operadores.service';\r\nimport { ComercialCadastrosEquipeVendaService } from 'src/app/modules/comercial/cadastros/equipe-venda/equipe-venda.service';\r\nimport { ComercialService } from 'src/app/modules/comercial/comercial.service';\r\nimport { EstadosService } from 'src/app/shared/services/requests/estados.service';\r\nimport { DateService } from 'src/app/shared/services/core/date.service';\r\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\r\nimport { CepService } from 'src/app/shared/services/ws/cep.service';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from 'src/app/guards/iform-candeactivate';\r\nimport { OperadorComercial } from '../models/operador-comercial';\r\nimport { EquipeVenda } from '../../equipe-venda/models/equipe-venda';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-operador-comercial-formulario',\r\n  templateUrl: './formulario.component.html',\r\n  styleUrls: ['./formulario.component.scss']\r\n})\r\nexport class ComercialCadastrosOperadorComercialFormularioComponent\r\n  implements OnInit, IFormCanDeactivate {\r\n  public MASKS = utilsBr.MASKS;\r\n\r\n  loaderNavbar: boolean;\r\n  loaderFullScreen = true;\r\n\r\n  appTitle: string;\r\n  breadCrumbTree: Array<any> = [];\r\n\r\n  activatedRouteSubscription: Subscription;\r\n\r\n  bsConfig: Partial<BsDatepickerConfig>;\r\n\r\n  codOperador: number = null;\r\n\r\n  form: FormGroup;\r\n  formChanged = false;\r\n  submittingForm: boolean;\r\n\r\n  tipoOperadores: Array<OperadorComercial> = [];\r\n  equipesVenda: Array<EquipeVenda> = [];\r\n  escritorios: Array<any> = [];\r\n  estados: Array<any> = [];\r\n\r\n  showModalAssociacoes: boolean;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location,\r\n    private localeService: BsLocaleService,\r\n    private formBuilder: FormBuilder,\r\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService,\r\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\r\n    private equipeVendaService: ComercialCadastrosEquipeVendaService,\r\n    private comercialService: ComercialService,\r\n    private estadosService: EstadosService,\r\n    private dateService: DateService,\r\n    private confirmModalService: ConfirmModalService,\r\n    private cepService: CepService\r\n  ) {\r\n    this.localeService.use('pt-br');\r\n    this.bsConfig = Object.assign(\r\n      {},\r\n      { containerClass: 'theme-dark-blue' },\r\n      { adaptivePosition: true },\r\n      { showWeekNumbers: false }\r\n    );\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.getFormFields();\r\n    this.setFormBuilder();\r\n    this.checkRouterParams();\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      if (params.id) {\r\n        this.appTitle = 'Editar operador comercial';\r\n        this.codOperador = params.id;\r\n      } else {\r\n        this.appTitle = 'Novo operador comercial';\r\n      }\r\n\r\n      this.titleService.setTitle(this.appTitle);\r\n\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home'\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}`\r\n        },\r\n        {\r\n          descricao: 'Operadores comerciais',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}/operadores-comerciais/lista`\r\n        },\r\n        {\r\n          descricao: this.appTitle\r\n        }\r\n      ];\r\n    });\r\n  }\r\n\r\n  getFormFields(): void {\r\n    this.formDependencies()\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderFullScreen = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (\r\n            response[0].hasOwnProperty('success') &&\r\n            response[0].success === true\r\n          ) {\r\n            this.tipoOperadores = response[0].data;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n\r\n          if (\r\n            response[1].hasOwnProperty('success') &&\r\n            response[1].success === true\r\n          ) {\r\n            this.equipesVenda = response[1].data;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n\r\n          if (response[2].responseCode === 200) {\r\n            this.escritorios = response[2].result;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n\r\n          this.estados = this.estadosService.getEstados();\r\n        },\r\n        error: (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.location.back();\r\n        }\r\n      });\r\n  }\r\n\r\n  formDependencies(): Observable<any> {\r\n    const tipoOperadores = this.tipoOperadorService.getListaTipoOperador({\r\n      codSituacao: 1\r\n    });\r\n    const equipesVenda = this.equipeVendaService.getListaEquipesVenda({\r\n      codSituacao: 1\r\n    });\r\n    const escritorios = this.comercialService.getEscritorios();\r\n\r\n    return forkJoin([tipoOperadores, equipesVenda, escritorios]).pipe(take(1));\r\n  }\r\n\r\n  setFormBuilder(): void {\r\n    if (this.activatedRoute.snapshot.data.detalhes.success === true) {\r\n      const detalhes: OperadorComercial = this.activatedRoute.snapshot.data\r\n        .detalhes.data;\r\n\r\n      const dataInicioContrato: Date =\r\n        detalhes.dataInicioContrato === null\r\n          ? null\r\n          : this.dateService.convertStringToDate(\r\n              detalhes.dataInicioContrato,\r\n              'usa'\r\n            );\r\n\r\n      const dataFinalContrato: Date =\r\n        detalhes.dataFinalContrato === null\r\n          ? null\r\n          : this.dateService.convertStringToDate(\r\n              detalhes.dataFinalContrato,\r\n              'usa'\r\n            );\r\n\r\n      this.form = this.formBuilder.group({\r\n        codOperador: [detalhes.codOperador],\r\n        nomeOperador: [detalhes.nomeOperador, [Validators.required]],\r\n        sobrenomeOperador: [detalhes.sobrenomeOperador, [Validators.required]],\r\n        codTipoOperador: [detalhes.codTipoOperador, [Validators.required]],\r\n        codSituacao: [detalhes.codSituacao, [Validators.required]],\r\n        codEquipe: [detalhes.codEquipe, [Validators.required]],\r\n        codEscritorio: [detalhes.codEscritorio, [Validators.required]],\r\n        tipoPessoa: [detalhes.tipoPessoa, [Validators.required]],\r\n        cpf: [detalhes.cpfCnpj],\r\n        cnpj: [detalhes.cpfCnpj],\r\n        rg: [detalhes.rgIe],\r\n        ie: [detalhes.rgIe],\r\n        telefone: [detalhes.telefone, [Validators.required]],\r\n        celular: [detalhes.celular, [Validators.required]],\r\n        email: [detalhes.email, [Validators.required, Validators.email]],\r\n        endereco: this.formBuilder.group({\r\n          cep: [detalhes.cep, [Validators.required]],\r\n          logradouro: [detalhes.logradouro, [Validators.required]],\r\n          numero: [detalhes.numero, [Validators.required]],\r\n          complemento: [detalhes.complemento],\r\n          referencia: [detalhes.referencia],\r\n          bairro: [detalhes.bairro, [Validators.required]],\r\n          cidade: [detalhes.cidade, [Validators.required]],\r\n          estado: [detalhes.estado, [Validators.required]]\r\n        }),\r\n        dadosBancarios: this.formBuilder.group({\r\n          banco: [detalhes.banco],\r\n          agencia: [detalhes.agencia],\r\n          contaCorrente: [detalhes.contaCorrente]\r\n        }),\r\n        dataInicioContrato: [dataInicioContrato, [Validators.required]],\r\n        dataFinalContrato: [dataFinalContrato]\r\n      });\r\n      this.setType(detalhes.tipoPessoa);\r\n    } else {\r\n      this.pnotifyService.error();\r\n      this.location.back();\r\n    }\r\n  }\r\n\r\n  checkRouterParams(): void {\r\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\r\n      (queryParams: any) => {\r\n        if (Object.keys(queryParams).length > 0) {\r\n          let params = atob(queryParams['q']);\r\n          params = JSON.parse(params);\r\n\r\n          if (\r\n            params['showModalAssociacoes'] &&\r\n            params['showModalAssociacoes'] === 1\r\n          ) {\r\n            this.showModalAssociacoes = true;\r\n          }\r\n        }\r\n      }\r\n    );\r\n    this.activatedRouteSubscription.unsubscribe();\r\n  }\r\n\r\n  setType(tipoPessoa: string): void {\r\n    if (tipoPessoa === 'F') {\r\n      this.form.controls.cpf.markAsUntouched();\r\n      this.form.controls.cpf.enable();\r\n      this.form.controls.cpf.setValidators([\r\n        NgBrazilValidators.cpf,\r\n        Validators.required\r\n      ]);\r\n      this.form.controls.rg.markAsUntouched();\r\n      this.form.controls.rg.enable();\r\n      this.form.controls.rg.setValidators([Validators.required]);\r\n\r\n      this.form.controls.cnpj.setValue(null);\r\n      this.form.controls.cnpj.disable();\r\n      this.form.controls.ie.setValue(null);\r\n      this.form.controls.ie.disable();\r\n    } else if (tipoPessoa === 'J') {\r\n      this.form.controls.cnpj.markAsUntouched();\r\n      this.form.controls.cnpj.enable();\r\n      this.form.controls.cnpj.setValidators([\r\n        NgBrazilValidators.cnpj,\r\n        Validators.required\r\n      ]);\r\n      this.form.controls.ie.markAsUntouched();\r\n      this.form.controls.ie.enable();\r\n      this.form.controls.ie.setValidators([Validators.required]);\r\n\r\n      this.form.controls.cpf.setValue(null);\r\n      this.form.controls.cpf.disable();\r\n      this.form.controls.rg.setValue(null);\r\n      this.form.controls.rg.disable();\r\n    }\r\n\r\n    this.form.controls.cpf.updateValueAndValidity();\r\n    this.form.controls.cnpj.updateValueAndValidity();\r\n    this.form.controls.rg.updateValueAndValidity();\r\n    this.form.controls.ie.updateValueAndValidity();\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.form.pristine) {\r\n      this.location.back();\r\n    } else {\r\n      if (this.form.valid) {\r\n        this.loaderNavbar = true;\r\n        this.submittingForm = true;\r\n\r\n        this.operadorComercialService\r\n          .save(this.form.value)\r\n          .pipe(\r\n            finalize(() => {\r\n              this.loaderNavbar = false;\r\n              this.submittingForm = false;\r\n            })\r\n          )\r\n          .subscribe({\r\n            next: (response: any) => {\r\n              if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === true\r\n              ) {\r\n                this.formChanged = false;\r\n                this.pnotifyService.success(response.mensagem);\r\n\r\n                this.activatedRoute.params.subscribe((params: any) => {\r\n                  this.activatedRoute.queryParams.subscribe(\r\n                    (queryParams: any) => {\r\n                      if (queryParams.hasOwnProperty('q')) {\r\n                        this.router.navigate(['../../lista'], {\r\n                          relativeTo: this.activatedRoute\r\n                        });\r\n                      } else {\r\n                        if (params.hasOwnProperty('id')) {\r\n                          this.location.back();\r\n                        } else {\r\n                          this.checkAssociacoes(response.data);\r\n                        }\r\n                      }\r\n                    }\r\n                  );\r\n                });\r\n              } else if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === false\r\n              ) {\r\n                this.pnotifyService.notice(response.mensagem);\r\n              } else {\r\n                this.pnotifyService.error();\r\n              }\r\n            },\r\n            error: (error: any) => {\r\n              this.pnotifyService.error();\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  checkAssociacoes(codOperador: number): void {\r\n    this.confirmModalService\r\n      .showConfirm(\r\n        null,\r\n        'Associação de operadores',\r\n        'Deseja associar outros operadores comerciais?',\r\n        'Cancelar',\r\n        'Confirmar'\r\n      )\r\n      .subscribe((response: boolean) =>\r\n        response\r\n          ? this.onConfirmAssociacoes(codOperador)\r\n          : this.onRefuseAssociacoes()\r\n      );\r\n  }\r\n\r\n  onConfirmAssociacoes(codOperador: number): void {\r\n    this.router.navigate(['../editar', codOperador], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { q: btoa(JSON.stringify({ showModalAssociacoes: 1 })) }\r\n    });\r\n  }\r\n\r\n  onRefuseAssociacoes(): void {\r\n    this.router.navigate(['../lista'], {\r\n      relativeTo: this.activatedRoute\r\n    });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.location.back();\r\n  }\r\n\r\n  onInput(): void {\r\n    this.formChanged = true;\r\n  }\r\n\r\n  onInputCep() {\r\n    if (this.form.get('endereco.cep').status == 'VALID') {\r\n      this.consultaCEP(this.form.value.endereco.cep);\r\n    }\r\n  }\r\n\r\n  consultaCEP(cep: string) {\r\n    this.loaderNavbar = true;\r\n\r\n    this.cepService\r\n      .getData(cep)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe((response: any) => {\r\n        if (response.hasOwnProperty('success') && response.success === true) {\r\n          this.form.patchValue({\r\n            endereco: {\r\n              logradouro: response.data.logradouro,\r\n              bairro: response.data.bairro,\r\n              cidade: response.data.localidade,\r\n              estado: response.data.uf\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  formCanDeactivate(): boolean {\r\n    if (this.formChanged) {\r\n      if (confirm('Este cliente no forma parte de tu cartera?')) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl\r\n} from '@angular/forms';\r\nimport { Subscription, EMPTY, Observable, forkJoin } from 'rxjs';\r\nimport { take, switchMap, finalize } from 'rxjs/operators';\r\n\r\n// ngx-bootstrap\r\nimport { PageChangedEvent } from 'ngx-bootstrap/pagination';\r\n\r\n// Services\r\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\r\nimport { ComercialCadastrosTipoOperadorService } from '../../tipo-operadores/tipo-operadores.service';\r\nimport { ComercialCadastrosEquipeVendaService } from '../../equipe-venda/equipe-venda.service';\r\nimport { EscritoriosService } from 'src/app/shared/services/requests/escritorios.service';\r\n\r\n// Interfaces\r\nimport { OperadorComercial } from '../models/operador-comercial';\r\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\r\nimport { Subtitles } from 'src/app/shared/modules/subtitles/subtitles';\r\nimport { TipoOperador } from '../../tipo-operadores/models/tipo-operador';\r\nimport { EquipeVenda } from '../../equipe-venda/models/equipe-venda';\r\nimport { CustomTableConfig } from 'src/app/shared/templates/custom-table/models/config';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-operador-comercial-lista',\r\n  templateUrl: './lista.component.html',\r\n  styleUrls: ['./lista.component.scss']\r\n})\r\nexport class ComercialCadastrosOperadorComercialListaComponent\r\n  implements OnInit {\r\n  @ViewChild('scrollToFilter', {}) scrollToFilter: ElementRef;\r\n\r\n  loaderNavbar = false;\r\n  loaderFullScreen = true;\r\n\r\n  breadCrumbTree: Array<Breadcrumb> = [];\r\n\r\n  subtitles: Array<Subtitles> = [\r\n    {\r\n      id: 1,\r\n      text: 'Ativo',\r\n      color: 'green'\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Inativo',\r\n      color: 'red'\r\n    }\r\n  ];\r\n\r\n  tableConfig: Partial<CustomTableConfig> = {\r\n    subtitleBorder: true\r\n  };\r\n\r\n  activatedRouteSubscription: Subscription;\r\n\r\n  form: FormGroup;\r\n  orderBy = 'nomeOperador';\r\n  orderType = 'ASC';\r\n\r\n  tipoOperadores: Array<TipoOperador> = [];\r\n  equipesVenda: Array<EquipeVenda> = [];\r\n  escritorios: Array<any> = [];\r\n\r\n  maxSize = 10;\r\n  itemsPerPage = 300;\r\n  currentPage = 1;\r\n  totalItems = 0;\r\n\r\n  dados: Array<OperadorComercial> = [];\r\n  dadosPagination: Array<OperadorComercial> = [];\r\n  dadosLoaded = false;\r\n  dadosEmpty = false;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location,\r\n    private formBuilder: FormBuilder,\r\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService,\r\n    private confirmModalService: ConfirmModalService,\r\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\r\n    private equipeVendaService: ComercialCadastrosEquipeVendaService,\r\n    private escritorioService: EscritoriosService\r\n  ) {\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.getFormFields();\r\n    this.setFormFilter();\r\n    this.titleService.setTitle('Operadores comerciais');\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home'\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params['idSubModulo']}`\r\n        },\r\n        {\r\n          descricao: 'Operadores comerciais'\r\n        }\r\n      ];\r\n    });\r\n  }\r\n\r\n  getFormFields(): void {\r\n    this.loadDependencies()\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderFullScreen = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (\r\n            response[0].hasOwnProperty('success') &&\r\n            response[0].success === true\r\n          ) {\r\n            this.tipoOperadores = response[0].data;\r\n\r\n            this.tipoOperadores.unshift({\r\n              codTipoOperador: 0,\r\n              tipo: 'EXIBIR TODOS',\r\n              codSituacao: null,\r\n              situacao: null,\r\n              nomeUsuario: null,\r\n              dataCadastro: null\r\n            });\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n\r\n          if (\r\n            response[1].hasOwnProperty('success') &&\r\n            response[1].success === true\r\n          ) {\r\n            this.equipesVenda = response[1].data;\r\n\r\n            this.equipesVenda.unshift({\r\n              codEquipeVenda: 0,\r\n              dsEquipeVenda: 'EXIBIR TODOS',\r\n              codCarteira: null,\r\n              codSituacao: null,\r\n              situacao: null,\r\n              codUsuario: null,\r\n              nomeUsuario: null,\r\n              dataCadastro: null,\r\n              codReferenteErp: null\r\n            });\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n\r\n          if (response[2].responseCode === 200) {\r\n            this.escritorios = response[2].result;\r\n\r\n            this.escritorios.unshift({\r\n              codEscritorio: 0,\r\n              nomeEscritorio: 'EXIBIR TODOS'\r\n            });\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.location.back();\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.location.back();\r\n        }\r\n      });\r\n  }\r\n\r\n  loadDependencies(): Observable<any> {\r\n    const tipoOperadores = this.tipoOperadorService.getListaTipoOperador({\r\n      codSituacao: 1\r\n    });\r\n    const equipesVenda = this.equipeVendaService.getListaEquipesVenda({\r\n      codSituacao: 1\r\n    });\r\n    const escritorios = this.escritorioService.getEscritorios();\r\n\r\n    return forkJoin([tipoOperadores, equipesVenda, escritorios]);\r\n  }\r\n\r\n  setFormFilter(): void {\r\n    const formValue: any = this.checkRouterParams();\r\n\r\n    this.form = this.formBuilder.group({\r\n      cpfCnpj: [formValue.cpfCnpj],\r\n      rgIe: [formValue.rgIe],\r\n      nomeOperador: [formValue.nomeOperador],\r\n      codTipoOperador: [formValue.codTipoOperador],\r\n      codEquipe: [formValue.codEquipe],\r\n      codEscritorio: [formValue.codEscritorio],\r\n      codSituacao: [formValue.codSituacao],\r\n      orderBy: [formValue.orderBy],\r\n      orderType: [formValue.orderType],\r\n      pagina: [formValue.pagina],\r\n      registros: [formValue.registros, Validators.required]\r\n    });\r\n\r\n    this.checkOrder();\r\n  }\r\n\r\n  checkRouterParams(): Object {\r\n    let formValue = {\r\n      cpfCnpj: null,\r\n      rgIe: null,\r\n      nomeOperador: null,\r\n      codTipoOperador: 0,\r\n      codEquipe: 0,\r\n      codEscritorio: 0,\r\n      codSituacao: 0,\r\n      orderBy: this.orderBy,\r\n      orderType: this.orderType,\r\n      pagina: 1,\r\n      registros: this.itemsPerPage\r\n    };\r\n\r\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\r\n      (queryParams: any) => {\r\n        if (Object.keys(queryParams).length > 0) {\r\n          let params = atob(queryParams['q']);\r\n          params = JSON.parse(params);\r\n          this.search(params);\r\n\r\n          Object.keys(formValue).forEach(formKey => {\r\n            Object.keys(params).forEach(paramKey => {\r\n              if (\r\n                formKey == paramKey &&\r\n                formValue[formKey] != params[paramKey]\r\n              ) {\r\n                if (!isNaN(Number(params[paramKey]))) {\r\n                  formValue[formKey] = Number(params[paramKey]);\r\n                } else {\r\n                  formValue[formKey] = params[paramKey];\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n    this.activatedRouteSubscription.unsubscribe();\r\n\r\n    return formValue;\r\n  }\r\n\r\n  checkOrder(): void {\r\n    if (this.form.value.orderBy !== this.orderBy) {\r\n      this.orderBy = this.form.value.orderBy;\r\n    }\r\n\r\n    if (this.form.value.orderType !== this.orderType) {\r\n      this.orderType = this.form.value.orderType;\r\n    }\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  setOrderBy(column: string): void {\r\n    if (this.orderBy === column) {\r\n      if (this.orderType == 'DESC') {\r\n        this.orderType = 'ASC';\r\n      } else if (this.orderType == 'ASC') {\r\n        this.orderType = 'DESC';\r\n      }\r\n    } else {\r\n      this.orderBy = column;\r\n      this.orderType = 'ASC';\r\n    }\r\n\r\n    this.form.value.orderBy = this.orderBy;\r\n    this.form.value.orderType = this.orderType;\r\n\r\n    this.onFilter();\r\n  }\r\n\r\n  onFilter(): void {\r\n    if (this.form.valid) {\r\n      this.itemsPerPage = this.form.value.registros;\r\n      this.currentPage = 1;\r\n      this.setRouterParams(this.verificaParams());\r\n    }\r\n  }\r\n\r\n  setRouterParams(params: any): void {\r\n    this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { q: btoa(JSON.stringify(params)) }\r\n    });\r\n    this.search(params);\r\n  }\r\n\r\n  verificaParams(): Object {\r\n    let params: any = {};\r\n\r\n    if (this.form.value.cpfCnpj) {\r\n      params.cpfCnpj = this.form.value.cpfCnpj;\r\n    }\r\n\r\n    if (this.form.value.rgIe) {\r\n      params.rgIe = this.form.value.rgIe;\r\n    }\r\n\r\n    if (this.form.value.nomeOperador) {\r\n      params.nomeOperador = this.form.value.nomeOperador;\r\n    }\r\n\r\n    if (this.form.value.codTipoOperador) {\r\n      params.codTipoOperador = this.form.value.codTipoOperador;\r\n    }\r\n\r\n    if (this.form.value.codEquipe) {\r\n      params.codEquipe = this.form.value.codEquipe;\r\n    }\r\n\r\n    if (this.form.value.codEscritorio) {\r\n      params.codEscritorio = this.form.value.codEscritorio;\r\n    }\r\n\r\n    if (this.form.value.codSituacao) {\r\n      params.codSituacao = this.form.value.codSituacao;\r\n    }\r\n\r\n    params.orderBy = this.form.value.orderBy;\r\n    params.orderType = this.form.value.orderType;\r\n\r\n    return params;\r\n  }\r\n\r\n  search(params: any): void {\r\n    this.loaderNavbar = true;\r\n    this.dados = [];\r\n    this.dadosPagination = [];\r\n    this.dadosLoaded = false;\r\n    this.dadosEmpty = false;\r\n    this.totalItems = 0;\r\n\r\n    this.operadorComercialService\r\n      .getListaOperadoresComerciais(params)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n          this.dadosLoaded = true;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            this.dados = response.data;\r\n            this.dadosPagination = this.dados.slice(0, this.itemsPerPage);\r\n            this.totalItems = this.dados.length;\r\n            this.dadosLoaded = true;\r\n          } else if (\r\n            response.hasOwnProperty('success') &&\r\n            response.success === false\r\n          ) {\r\n            this.dadosEmpty = true;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.dadosEmpty = true;\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.dadosEmpty = true;\r\n\r\n          if (error.error.hasOwnProperty('mensagem')) {\r\n            this.pnotifyService.error(error.error.mensagem);\r\n          } else {\r\n            this.pnotifyService.error();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  classStatusBorder(operadorComercial: OperadorComercial): string {\r\n    let borderClass: string;\r\n\r\n    if (operadorComercial.codSituacao === 1) {\r\n      borderClass = 'border-success';\r\n    } else if (operadorComercial.codSituacao === 2) {\r\n      borderClass = 'border-danger';\r\n    }\r\n\r\n    return borderClass;\r\n  }\r\n\r\n  onPageChanged(event: PageChangedEvent): void {\r\n    const startItem = (event.page - 1) * event.itemsPerPage;\r\n    const endItem = event.page * event.itemsPerPage;\r\n    this.dadosPagination = this.dados.slice(startItem, endItem);\r\n\r\n    this.scrollToFilter.nativeElement.scrollIntoView({\r\n      behavior: 'instant'\r\n    });\r\n  }\r\n\r\n  onEdit(operadorComercial: OperadorComercial): void {\r\n    this.router.navigate(['../editar', operadorComercial.codOperador], {\r\n      relativeTo: this.activatedRoute\r\n    });\r\n  }\r\n\r\n  onActivate(index: number, operadorComercial: OperadorComercial): void {\r\n    this.confirmActivate()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap(result =>\r\n          result\r\n            ? this.activateOperadorComercial(index, operadorComercial)\r\n            : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(operadorComercial);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 2;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmActivate(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      null,\r\n      null,\r\n      'Deseja realmente prosseguir com a ativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  activateOperadorComercial(\r\n    index: number,\r\n    operadorComercial: OperadorComercial\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n    this.dadosPagination[index].codSituacao = 1;\r\n\r\n    return this.operadorComercialService.activateOperadorComercial(\r\n      operadorComercial.codOperador\r\n    );\r\n  }\r\n\r\n  onInactivate(index: number, operadorComercial: OperadorComercial): void {\r\n    this.confirmInactive()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap(result =>\r\n          result\r\n            ? this.inactivateOperadorComercial(index, operadorComercial)\r\n            : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(operadorComercial);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 1;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmInactive(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      'inactivate',\r\n      'Confirmar inativação',\r\n      'Deseja realmente prosseguir com a inativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  inactivateOperadorComercial(\r\n    index: number,\r\n    operadorComercial: OperadorComercial\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n    this.dadosPagination[index].codSituacao = 2;\r\n\r\n    return this.operadorComercialService.inactivateOperadorComercial(\r\n      operadorComercial.codOperador\r\n    );\r\n  }\r\n\r\n  refreshMainData(operadorComercial: OperadorComercial): void {\r\n    for (let i = 0; i < this.dados.length; i++) {\r\n      if (operadorComercial.codOperador === this.dados[i].codOperador) {\r\n        this.dados[i].codSituacao = operadorComercial.codSituacao;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DateService {\r\n  months: Array<string> = [\r\n    'Enero',\r\n    'Febrero',\r\n    'Marzo',\r\n    'Abril',\r\n    'Mayo',\r\n    'Junio',\r\n    'Julio',\r\n    'Agosto',\r\n    'Septiembre',\r\n    'Octubre',\r\n    'Noviembre',\r\n    'Diciembre',\r\n  ];\r\n\r\n  weeks: Array<string> = [\r\n    'Domingo',\r\n    'Lunes',\r\n    'Martes',\r\n    'Miercoles',\r\n    'Jueves',\r\n    'Viernes',\r\n    'Sábado',\r\n  ];\r\n\r\n  sameDay(dateA: Date, dateB: Date): boolean {\r\n    return (\r\n      dateA.getFullYear() === dateB.getFullYear() &&\r\n      dateA.getMonth() === dateB.getMonth() &&\r\n      dateA.getDate() === dateB.getDate()\r\n    );\r\n  }\r\n\r\n  getHourMinute(date: Date): string {\r\n    const getHours = date.getHours();\r\n    const getMinutes = date.getMinutes();\r\n    let hours: any, minutes: any;\r\n\r\n    if (getHours < 10) {\r\n      hours = `0${getHours}`;\r\n    } else {\r\n      hours = getHours;\r\n    }\r\n\r\n    if (getMinutes < 10) {\r\n      minutes = `0${getMinutes}`;\r\n    } else {\r\n      minutes = getMinutes;\r\n    }\r\n\r\n    return `${hours}:${minutes}`;\r\n  }\r\n\r\n  getFullDate(dateA: Date, dateB?: Date, showTime: boolean = true): string {\r\n    const day = dateA.getDate();\r\n    const weekDay = dateA.getDay();\r\n    const month = dateA.getMonth();\r\n    const year = dateA.getFullYear();\r\n    const hour = this.getHourMinute(dateA);\r\n\r\n    if (showTime) {\r\n      if (dateB) {\r\n        const hourB = this.getHourMinute(dateB);\r\n\r\n        return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}, desde ${hour} hasta ${hourB}`;\r\n      }\r\n\r\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year} hasta ${hour}`;\r\n    } else {\r\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}`;\r\n    }\r\n  }\r\n\r\n  getFullMonth(date: Date): string {\r\n    return this.months[date.getMonth()];\r\n  }\r\n\r\n  getFirstDayYear(): Date {\r\n    let date = new Date();\r\n    return new Date(date.getFullYear(), 0, 1);\r\n  }\r\n\r\n  getLastDayYear(): Date {\r\n    let date = new Date();\r\n    return new Date(date.getFullYear(), 11, 31);\r\n  }\r\n\r\n  getFirstDayMonth(): Date {\r\n    let date = new Date();\r\n    return new Date(date.getFullYear(), date.getMonth(), 1);\r\n  }\r\n\r\n  getLastDayMonth(): Date {\r\n    let date = new Date();\r\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\r\n  }\r\n\r\n  getToday(): Date {\r\n    let date = new Date();\r\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\r\n  }\r\n\r\n  convert2PhpDate(date: Date): string {\r\n    const y = date.getFullYear();\r\n    let m: any = date.getMonth() + 1;\r\n    let d: any = date.getDate();\r\n    let h: any = date.getHours();\r\n    let i: any = date.getMinutes();\r\n\r\n    if (m < 10) m = `0${m}`;\r\n    if (d < 10) d = `0${d}`;\r\n    if (h < 10) h = `0${h}`;\r\n    if (i < 10) i = `0${i}`;\r\n\r\n    return `${y}-${m}-${d} ${h}:${i}`;\r\n  }\r\n\r\n  convertToBrazilianDate(date: Date): string {\r\n    let y = date.getFullYear().toString();\r\n    let m = (date.getMonth() + 1).toString().padStart(2, '0');\r\n    let d = date.getDate().toString().padStart(2, '0');\r\n    let h = date.getHours().toString().padStart(2, '0');\r\n    let i = date.getMinutes().toString().padStart(2, '0');\r\n    let s = date.getSeconds().toString().padStart(2, '0');\r\n\r\n    return `${d}/${m}/${y} ${h}:${i}:${s}`;\r\n  }\r\n\r\n  convertMysqlTime(time: string): string {\r\n    if (time !== null) {\r\n      let timeSplit = time.split(':');\r\n\r\n      return `${timeSplit[0]}:${timeSplit[1]}`;\r\n    }\r\n\r\n    return time;\r\n  }\r\n\r\n  convertToUrlDate(date: Date): string {\r\n    let d: any = date.getDate();\r\n    let m: any = date.getMonth() + 1;\r\n    let y: any = date.getFullYear();\r\n\r\n    if (d < 10) d = `0${d}`;\r\n    if (m < 10) m = `0${m}`;\r\n\r\n    return `${d}-${m}-${y}`;\r\n  }\r\n\r\n  convertStringToDate(stringDate: any, dateType: string): Date {\r\n    let date: Date;\r\n\r\n    if (stringDate.indexOf(':') > -1) {\r\n      const stringDateSplit = stringDate.split(' ');\r\n      const dateSplit = stringDateSplit[0].split('-');\r\n      const timeSplit = stringDateSplit[1].split(':');\r\n\r\n      if (dateType == 'latam') {\r\n        date = new Date(\r\n          dateSplit[2],\r\n          parseInt(dateSplit[1]) - 1,\r\n          dateSplit[0].substr(0, 2),\r\n          timeSplit[0],\r\n          timeSplit[1],\r\n          timeSplit[2]\r\n        );\r\n      } else if (dateType == 'usa') {\r\n        date = new Date(\r\n          dateSplit[0],\r\n          parseInt(dateSplit[1]) - 1,\r\n          dateSplit[2].substr(0, 2),\r\n          timeSplit[0],\r\n          timeSplit[1],\r\n          timeSplit[2]\r\n        );\r\n      }\r\n    } else {\r\n      const dateSplit = stringDate.split('-');\r\n\r\n      if (dateType == 'latam') {\r\n        date = new Date(\r\n          dateSplit[2],\r\n          parseInt(dateSplit[1]) - 1,\r\n          dateSplit[0].substr(0, 2)\r\n        );\r\n      } else if (dateType == 'usa') {\r\n        date = new Date(\r\n          dateSplit[0],\r\n          parseInt(dateSplit[1]) - 1,\r\n          dateSplit[2].substr(0, 2)\r\n        );\r\n      }\r\n    }\r\n\r\n    return date;\r\n  }\r\n\r\n  formatWithSlashes(stringDate: any, dateType: string): string {\r\n    const dateSplit = stringDate.split('-');\r\n    let date: string;\r\n\r\n    if (dateType == 'latam') {\r\n      date = `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`;\r\n    } else if (dateType == 'usa') {\r\n      date = `${dateSplit[1]}/${dateSplit[2]}/${dateSplit[0]}`;\r\n    }\r\n\r\n    return date;\r\n  }\r\n\r\n  addDaysToDate(date: Date, days: number): Date {\r\n    return new Date(date.setDate(date.getDate() + days));\r\n  }\r\n}\r\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header appTitle=\\\"Operadores comerciais\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    [routerLink]=\\\"['../novo']\\\">\\r\\n    Adicionar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onFilter()\\\">\\r\\n    Filtrar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n  <div class=\\\"row\\\" #scrollToFilter>\\r\\n    <div class=\\\"col\\\">\\r\\n      <advanced-filter>\\r\\n        <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-2\\\">\\r\\n              <label for=\\\"cpfCnpj\\\">CPF/CNPJ</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                formControlName=\\\"cpfCnpj\\\"\\r\\n                (keydown.enter)=\\\"onFilter()\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-2\\\">\\r\\n              <label for=\\\"rgIe\\\">RG/IE</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                formControlName=\\\"rgIe\\\"\\r\\n                (keydown.enter)=\\\"onFilter()\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"nomeOperador\\\">Nome do operador</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                formControlName=\\\"nomeOperador\\\"\\r\\n                (keydown.enter)=\\\"onFilter()\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-2\\\">\\r\\n              <label for=\\\"codTipoOperador\\\">Tipo de operador</label>\\r\\n              <ng-select\\r\\n                [searchable]=\\\"true\\\"\\r\\n                [clearable]=\\\"false\\\"\\r\\n                [items]=\\\"tipoOperadores\\\"\\r\\n                formControlName=\\\"codTipoOperador\\\"\\r\\n                [virtualScroll]=\\\"true\\\"\\r\\n                bindLabel=\\\"tipo\\\"\\r\\n                bindValue=\\\"codTipoOperador\\\">\\r\\n              </ng-select>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-3\\\">\\r\\n              <label for=\\\"codEquipe\\\">Equipe de venda</label>\\r\\n              <ng-select\\r\\n                [searchable]=\\\"true\\\"\\r\\n                [clearable]=\\\"false\\\"\\r\\n                [items]=\\\"equipesVenda\\\"\\r\\n                formControlName=\\\"codEquipe\\\"\\r\\n                [virtualScroll]=\\\"true\\\"\\r\\n                bindLabel=\\\"dsEquipeVenda\\\"\\r\\n                bindValue=\\\"codEquipeVenda\\\">\\r\\n              </ng-select>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-3\\\">\\r\\n              <label for=\\\"codEscritorio\\\">Escritório</label>\\r\\n              <ng-select\\r\\n                [searchable]=\\\"true\\\"\\r\\n                [clearable]=\\\"false\\\"\\r\\n                [items]=\\\"escritorios\\\"\\r\\n                formControlName=\\\"codEscritorio\\\"\\r\\n                [virtualScroll]=\\\"true\\\"\\r\\n                bindLabel=\\\"nomeEscritorio\\\"\\r\\n                bindValue=\\\"codEscritorio\\\">\\r\\n              </ng-select>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-3\\\">\\r\\n              <label for=\\\"codSituacao\\\">Situação</label>\\r\\n              <select\\r\\n                class=\\\"form-control custom-select\\\"\\r\\n                id=\\\"codSituacao\\\"\\r\\n                formControlName=\\\"codSituacao\\\">\\r\\n                <option value=\\\"0\\\">Todos</option>\\r\\n                <option value=\\\"1\\\">Ativos</option>\\r\\n                <option value=\\\"2\\\">Inativos</option>\\r\\n              </select>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-3\\\">\\r\\n              <label for=\\\"registros\\\">Registros</label>\\r\\n              <select\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"registros\\\"\\r\\n                formControlName=\\\"registros\\\">\\r\\n                <option>25</option>\\r\\n                <option>50</option>\\r\\n                <option>100</option>\\r\\n                <option>200</option>\\r\\n                <option>300</option>\\r\\n              </select>\\r\\n            </div>\\r\\n          </div>\\r\\n        </form>\\r\\n      </advanced-filter>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <subtitles\\r\\n        [data]=\\\"subtitles\\\"\\r\\n        [show]=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n      </subtitles>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n      <custom-table [config]=\\\"tableConfig\\\" *ngIf=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n        <ng-template #thead let-thead>\\r\\n          <tr>\\r\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\r\\n              <thead-sorter\\r\\n                value=\\\"Nome do operador\\\"\\r\\n                [active]=\\\"orderBy == 'nomeOperador'\\\"\\r\\n                [sort]=\\\"orderType\\\"\\r\\n                (click)=\\\"setOrderBy('nomeOperador')\\\">\\r\\n              </thead-sorter>\\r\\n            </th>\\r\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\r\\n              <thead-sorter\\r\\n                value=\\\"Tipo\\\"\\r\\n                [active]=\\\"orderBy == 'descTipoOperador'\\\"\\r\\n                [sort]=\\\"orderType\\\"\\r\\n                (click)=\\\"setOrderBy('descTipoOperador')\\\">\\r\\n              </thead-sorter>\\r\\n            </th>\\r\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\r\\n              <thead-sorter\\r\\n                value=\\\"Equipe\\\"\\r\\n                [active]=\\\"orderBy == 'nomeEquipe'\\\"\\r\\n                [sort]=\\\"orderType\\\"\\r\\n                (click)=\\\"setOrderBy('nomeEquipe')\\\">\\r\\n              </thead-sorter>\\r\\n            </th>\\r\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\r\\n              <thead-sorter\\r\\n                value=\\\"Escritório\\\"\\r\\n                [active]=\\\"orderBy == 'nomeEscritorio'\\\"\\r\\n                [sort]=\\\"orderType\\\"\\r\\n                (click)=\\\"setOrderBy('nomeEscritorio')\\\">\\r\\n              </thead-sorter>\\r\\n            </th>\\r\\n            <th scope=\\\"col\\\"></th>\\r\\n          </tr>\\r\\n        </ng-template>\\r\\n        <ng-template #tbody let-tbody>\\r\\n          <tr *ngFor=\\\"let operadorComercial of dadosPagination; let i = index\\\">\\r\\n            <td [ngClass]=\\\"classStatusBorder(operadorComercial)\\\">\\r\\n              {{ operadorComercial.nomeCompleto | uppercase }}\\r\\n            </td>\\r\\n            <td>{{ operadorComercial.descTipoOperador | uppercase }}</td>\\r\\n            <td>{{ operadorComercial.nomeEquipe | uppercase }}</td>\\r\\n            <td>{{ operadorComercial.nomeEscritorio | uppercase }}</td>\\r\\n            <td class=\\\"text-right\\\">\\r\\n              <span *ngIf=\\\"operadorComercial.codSituacao == 1\\\" class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onInactivate(i, operadorComercial)\\\">\\r\\n                  <i class=\\\"fas fa-toggle-on\\\"></i>\\r\\n                </button>\\r\\n              </span>\\r\\n              <span *ngIf=\\\"operadorComercial.codSituacao == 2\\\" class=\\\"mr-3\\\" tooltip=\\\"Ativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onActivate(i, operadorComercial)\\\">\\r\\n                  <i class=\\\"fas fa-toggle-off\\\"></i>\\r\\n                </button>\\r\\n              </span>\\r\\n              <span class=\\\"mr-3\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onEdit(operadorComercial)\\\">\\r\\n                  <i class=\\\"fas fa-edit\\\"></i>\\r\\n                </button>\\r\\n              </span>\\r\\n            </td>\\r\\n          </tr>\\r\\n        </ng-template>\\r\\n      </custom-table>\\r\\n      <empty-result\\r\\n        message=\\\"Nenhuma informação encontrada\\\"\\r\\n        class=\\\"my-3\\\"\\r\\n        *ngIf=\\\"dadosEmpty\\\">\\r\\n      </empty-result>\\r\\n      <div class=\\\"d-flex justify-content-center mt-3\\\" *ngIf=\\\"totalItems > itemsPerPage && dadosLoaded\\\">\\r\\n        <pagination\\r\\n          [maxSize]=\\\"maxSize\\\"\\r\\n          [(totalItems)]=\\\"totalItems\\\"\\r\\n          (pageChanged)=\\\"onPageChanged($event)\\\"\\r\\n          [(itemsPerPage)]=\\\"itemsPerPage\\\"\\r\\n          [boundaryLinks]=\\\"true\\\"\\r\\n          [(ngModel)]=\\\"currentPage\\\"\\r\\n          previousText=\\\"&lsaquo;\\\"\\r\\n          nextText=\\\"&rsaquo;\\\"\\r\\n          firstText=\\\"&laquo;\\\"\\r\\n          lastText=\\\"&raquo;\\\">\\r\\n        </pagination>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</app-body>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { take, retry } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\n// Interfaces\r\nimport { JsonResponse } from 'src/app/models/json-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComercialService {\r\n  private readonly API = `http://23.254.204.187/api/comercial`;\r\n\r\n  constructor(protected http: HttpClient) { }\r\n\r\n  getEmpresas(params?: any): Observable<Object> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/empresas`, {\r\n        params: httpParams,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getDepositos(params: any): Observable<Object> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/depositos`, {\r\n        params: httpParams,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getAlmacen(params?: any): Observable<Object | JsonResponse> {\r\n    return this.http\r\n      .get(`${this.API}/almacen`)\r\n      .pipe(take(1), retry(2));\r\n  }\r\n  getLinhasId(id: any) {\r\n    return this.http.get(`${this.API}/linhas/${id}`).pipe(take(1), retry(2));\r\n  }\r\n\r\n  getSublineasId(id: any) {\r\n    return this.http.get(`${this.API}/sublineas/${id}`).pipe(take(1), retry(2));\r\n  }\r\n\r\n  sincronizarMateriales() {\r\n    return this.http.get(`${this.API}/sincronizar`).pipe(take(1), retry(2));\r\n  }\r\n  getMateriales(params: any) {\r\n    return this.http\r\n      .get(\r\n        `${this.API}/materiales`, {\r\n        params: params,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n  getMaterialesLista(params: any) {\r\n    return this.http\r\n      .get(\r\n        `${this.API}/materiales/lista`, {\r\n        params: params,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n  \r\n  \r\n\r\n  getMaterialesOferta(params: any) {\r\n    return this.http\r\n      .get(\r\n        `${this.API}/materiales_lista_precio`, {\r\n        params: params,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n  getMaterialesOfertaVendedor(params: any) {\r\n    return this.http\r\n      .get(\r\n        `${this.API}/materiales_lista_precio_vendedor`, {\r\n        params: params,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n  getLinhas(params: any): Observable<Object> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/linhas`, {\r\n        params: httpParams,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getClasses(params: any): Observable<Object> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/classes`, {\r\n        params: httpParams,\r\n      })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getMateriais(params: any = []): Observable<Object | JsonResponse> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/materiais`, { params: httpParams })\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getPerfil(): Observable<Object> {\r\n    return this.http.get(`${this.API}/perfil`).pipe(take(1), retry(2));\r\n  }\r\n\r\n  getEscritorios(): Observable<Object> {\r\n    return this.http.get(`${this.API}/escritorios`).pipe(take(1), retry(2));\r\n  }\r\n  getPresentacionMaterial(): Observable<Object> {\r\n    return this.http\r\n      .get(`${this.API}/presentacion_materiales`)\r\n      .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getCliente(codCliente) {\r\n    return this.http.get(`${this.API}/clientes/detalhes/${codCliente}`).pipe(take(1));\r\n  }\r\n\r\n  getListarPrecios() {\r\n    return this.http.get(`${this.API}/vendedor/lista_precio`)\r\n    .pipe(take(1), retry(2));\r\n  }\r\n\r\n  getTodosVendedores() {\r\n    return this.http.get(`${this.API}/vendedor/allvendedor`)\r\n    .pipe(take(1), retry(2));\r\n  }\r\n  getCentrosLogisticos(){\r\n    return this.http.get(`${this.API}/almacen/centros_logisticos`);\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvbGlzdGEvbGlzdGEuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvYXNzb2NpYWNvZXMvYXNzb2NpYWNvZXMuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvZm9ybXVsYXJpby9mb3JtdWxhcmlvLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanDeactivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from './iform-candeactivate';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormDeactivateGuard implements CanDeactivate<IFormCanDeactivate> {\r\n  canDeactivate(\r\n    component: IFormCanDeactivate,\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    return component.formCanDeactivate();\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  TemplateRef,\r\n  ViewChild,\r\n  Input,\r\n  SimpleChanges,\r\n  OnChanges,\r\n} from '@angular/core';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { finalize, take, switchMap } from 'rxjs/operators';\r\nimport { forkJoin, Observable, EMPTY } from 'rxjs';\r\n\r\n// ngx-bootstrap\r\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\r\nimport { BsLocaleService, BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\r\nimport { defineLocale } from 'ngx-bootstrap/chronos';\r\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\r\n\r\ndefineLocale('pt-br', ptBrLocale);\r\n\r\n// Services\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\r\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\r\nimport { ComercialCadastrosMotivoAssociacaoService } from '../../motivo-associacao/motivo-associacao.service';\r\n\r\n// Interfaces\r\nimport { AssociacaoOperadorComercial } from '../models/associacao-operador-comercial';\r\nimport { MotivoAssociacao } from '../../motivo-associacao/models/motivo-associacao';\r\nimport { OperadorComercial } from '../models/operador-comercial';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-operadores-comerciais-associacoes',\r\n  templateUrl: './associacoes.component.html',\r\n  styleUrls: ['./associacoes.component.scss'],\r\n})\r\nexport class ComercialCadastrosOperadorComercialAssociacoesComponent\r\n  implements OnInit, OnChanges\r\n{\r\n  @Input('codOperador') codOperador: number;\r\n  @Input('showModal') showModal = false;\r\n  @ViewChild('modalAssociacoes', {}) modalAssociacoes: TemplateRef<any>;\r\n  @ViewChild('modalHistoricoAssociacoes', {})\r\n  modalHistoricoAssociacoes: TemplateRef<any>;\r\n\r\n  bsConfig: Partial<BsDatepickerConfig>;\r\n\r\n  form: FormGroup;\r\n  submittingForm: boolean;\r\n\r\n  showLoader: boolean;\r\n\r\n  associacoes: Array<AssociacaoOperadorComercial> = [];\r\n  associacoesLoaded = false;\r\n  associacoesEmpty = false;\r\n\r\n  historicoAssociacoes: Array<any> = [];\r\n  historicoAssociacoesLoaded = false;\r\n\r\n  modalRef: BsModalRef;\r\n\r\n  dependenciesLoaded = false;\r\n  operadores: Array<OperadorComercial> = [];\r\n  motivosAssociacao: Array<MotivoAssociacao> = [];\r\n\r\n  constructor(\r\n    private localeService: BsLocaleService,\r\n    private formBuilder: FormBuilder,\r\n    private modalService: BsModalService,\r\n    private pnotifyService: PNotifyService,\r\n    private confirmModalService: ConfirmModalService,\r\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\r\n    private motivosAssociacaoService: ComercialCadastrosMotivoAssociacaoService\r\n  ) {\r\n    this.localeService.use('pt-br');\r\n    this.bsConfig = Object.assign(\r\n      {},\r\n      { containerClass: 'theme-dark-blue' },\r\n      { adaptivePosition: true },\r\n      { showWeekNumbers: false }\r\n    );\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.checkAssociacoes();\r\n    this.setFormBuilder();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.showModal.currentValue === true) {\r\n      this.onAdd();\r\n    }\r\n  }\r\n\r\n  setFormBuilder(): void {\r\n    this.form = this.formBuilder.group({\r\n      operadores: [null, [Validators.required]],\r\n      motivoAssociacao: [null, [Validators.required]],\r\n      dataInicio: [null, [Validators.required]],\r\n      dataTermino: [null],\r\n    });\r\n  }\r\n\r\n  checkAssociacoes(): void {\r\n    if (this.codOperador !== null) {\r\n      this.getAssociacoesOperadores();\r\n    }\r\n  }\r\n\r\n  getAssociacoesOperadores(): void {\r\n    this.associacoes = [];\r\n    this.associacoesEmpty = false;\r\n    this.associacoesLoaded = false;\r\n    this.historicoAssociacoes = [];\r\n    this.historicoAssociacoesLoaded = false;\r\n\r\n    this.operadorComercialService\r\n      .getAssociacoesOperadores(this.codOperador)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.associacoesLoaded = true;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            this.associacoes = response.data;\r\n          } else {\r\n            this.associacoesEmpty = true;\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.associacoesEmpty = true;\r\n        }\r\n      });\r\n  }\r\n\r\n  onReloadAssociacoes(): void {\r\n    this.getAssociacoesOperadores();\r\n  }\r\n\r\n  onAdd(): void {\r\n    if (this.dependenciesLoaded === false) {\r\n      this.getFormFields();\r\n    } else {\r\n      this.openModal(this.modalAssociacoes);\r\n    }\r\n  }\r\n\r\n  getFormFields(): void {\r\n    this.showLoader = true;\r\n    this.operadores = [];\r\n    this.motivosAssociacao = [];\r\n\r\n    this.loadDepencencies()\r\n      .pipe(\r\n        finalize(() => {\r\n          this.showLoader = false;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (\r\n            response[0].hasOwnProperty('success') &&\r\n            response[0].success === true\r\n          ) {\r\n            if (\r\n              response[1].hasOwnProperty('success') &&\r\n              response[1].success === true\r\n            ) {\r\n              this.operadores = response[0].data;\r\n              this.motivosAssociacao = response[1].data;\r\n              this.dependenciesLoaded = true;\r\n              this.openModal(this.modalAssociacoes);\r\n            } else {\r\n              this.pnotifyService.error('A operação não pode ser realizada.');\r\n            }\r\n          } else {\r\n            this.pnotifyService.error('A operação não pode ser realizada.');\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.pnotifyService.error('A operação não pode ser realizada.');\r\n        }\r\n      });\r\n  }\r\n\r\n  loadDepencencies(): Observable<any> {\r\n    const operadores =\r\n      this.operadorComercialService.getListaOperadoresComerciais({\r\n        codSituacao: 1,\r\n      });\r\n    const motivosAssociacao =\r\n      this.motivosAssociacaoService.getListaMotivosAssociacao({\r\n        codSituacao: 1,\r\n      });\r\n\r\n    return forkJoin([operadores, motivosAssociacao]).pipe(take(1));\r\n  }\r\n\r\n  onDelete(associacaoOperadorComercial: AssociacaoOperadorComercial): void {\r\n    this.confirmDelete()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((result) =>\r\n          result\r\n            ? this.deleteAssociacaoOperador(associacaoOperadorComercial)\r\n            : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.showLoader = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.onReloadAssociacoes();\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmDelete(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      'inactivate',\r\n      'Confirmar inativação',\r\n      'Deseja realmente prosseguir com a inativação da associação?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  deleteAssociacaoOperador(\r\n    associacaoOperadorComercial: AssociacaoOperadorComercial\r\n  ): Observable<any> {\r\n    this.showLoader = true;\r\n\r\n    return this.operadorComercialService.deleteAssociacaoOperador({\r\n      codAssociacao: associacaoOperadorComercial.codAssociacao,\r\n      codOperador: associacaoOperadorComercial.codOperador,\r\n    });\r\n  }\r\n\r\n  openModal(template: TemplateRef<any>, customClass?: string): void {\r\n    let config = {\r\n      keyboard: false,\r\n      ignoreBackdropClick: true,\r\n    };\r\n\r\n    if (customClass) {\r\n      Object.assign(config, { class: customClass });\r\n    }\r\n\r\n    this.modalRef = this.modalService.show(template, config);\r\n  }\r\n\r\n  hideModal(): void {\r\n    this.modalRef.hide();\r\n    this.form.reset();\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.form.valid) {\r\n      this.submittingForm = true;\r\n\r\n      this.operadorComercialService\r\n        .postAssociacaoOperador(\r\n          Object.assign(this.form.value, { codOperador: this.codOperador })\r\n        )\r\n        .pipe(\r\n          finalize(() => {\r\n            this.submittingForm = false;\r\n          })\r\n        )\r\n        .subscribe({\r\n          next: (response: any) => {\r\n            if (\r\n              response.hasOwnProperty('mensagem') &&\r\n              response.hasOwnProperty('success') &&\r\n              response.success === true\r\n            ) {\r\n              this.pnotifyService.success(response.mensagem);\r\n              this.hideModal();\r\n              this.getAssociacoesOperadores();\r\n            } else if (\r\n              response.hasOwnProperty('mensagem') &&\r\n              response.hasOwnProperty('success') &&\r\n              response.success === false\r\n            ) {\r\n              this.pnotifyService.notice(response.mensagem);\r\n            } else {\r\n              this.pnotifyService.error();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            this.pnotifyService.error();\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  onHistorico(): void {\r\n    if (this.historicoAssociacoesLoaded === false) {\r\n      this.showLoader = true;\r\n\r\n      this.operadorComercialService\r\n        .getHistoricoAssociacoes(this.codOperador)\r\n        .pipe(\r\n          finalize(() => {\r\n            this.showLoader = false;\r\n          })\r\n        )\r\n        .subscribe({\r\n          next: (response: any) => {\r\n            if (\r\n              response.hasOwnProperty('mensagem') &&\r\n              response.hasOwnProperty('success') &&\r\n              response.success === true\r\n            ) {\r\n              this.historicoAssociacoes = response.data;\r\n              this.historicoAssociacoesLoaded = true;\r\n              this.openModal(this.modalHistoricoAssociacoes, 'modal-xxl');\r\n            } else if (\r\n              response.hasOwnProperty('mensagem') &&\r\n              response.hasOwnProperty('success') &&\r\n              response.success === false\r\n            ) {\r\n              this.pnotifyService.notice(response.mensagem);\r\n            } else {\r\n              this.pnotifyService.error();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            this.pnotifyService.error();\r\n          }\r\n        });\r\n    } else {\r\n      this.openModal(this.modalHistoricoAssociacoes, 'modal-xxl');\r\n    }\r\n  }\r\n}\r\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header [appTitle]=\\\"appTitle\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onCancel()\\\"\\r\\n    [disabled]=\\\"submittingForm\\\">\\r\\n    Cancelar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onSubmit()\\\"\\r\\n    [disabled]=\\\"!form.valid || submittingForm\\\">\\r\\n    Salvar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n  <div class=\\\"row justify-content-center\\\">\\r\\n    <div class=\\\"col-lg-5\\\">\\r\\n      <form [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"nomeOperador\\\">Nome</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"nomeOperador\\\"\\r\\n              formControlName=\\\"nomeOperador\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('nomeOperador') + ' ' + onFieldRequired(form.controls.nomeOperador)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('nomeOperador')\\\" message=\\\"Nome é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"sobrenomeOperador\\\">Sobrenome</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"sobrenomeOperador\\\"\\r\\n              formControlName=\\\"sobrenomeOperador\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('sobrenomeOperador') + ' ' + onFieldRequired(form.controls.sobrenomeOperador)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('sobrenomeOperador')\\\" message=\\\"Sobrenome é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"codTipoOperador\\\">Tipo de operador</label>\\r\\n            <ng-select\\r\\n              [searchable]=\\\"true\\\"\\r\\n              [clearable]=\\\"false\\\"\\r\\n              [items]=\\\"tipoOperadores\\\"\\r\\n              formControlName=\\\"codTipoOperador\\\"\\r\\n              [virtualScroll]=\\\"true\\\"\\r\\n              bindLabel=\\\"tipo\\\"\\r\\n              bindValue=\\\"codTipoOperador\\\"\\r\\n              [ngClass]=\\\"onFieldError('codTipoOperador') + ' ' + onFieldRequired(form.controls.codTipoOperador)\\\">\\r\\n            </ng-select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codTipoOperador')\\\" message=\\\"Tipo de operador é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"codSituacao\\\">Situação</label>\\r\\n            <select\\r\\n              class=\\\"form-control custom-select\\\"\\r\\n              id=\\\"codSituacao\\\"\\r\\n              formControlName=\\\"codSituacao\\\"\\r\\n              [ngClass]=\\\"onFieldError('codSituacao') + ' ' + onFieldRequired(form.controls.codSituacao)\\\">\\r\\n              <option value=\\\"1\\\">Ativo</option>\\r\\n              <option value=\\\"2\\\">Inativo</option>\\r\\n            </select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codSituacao')\\\" message=\\\"Situação é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"codEquipe\\\">Equipe de vendas</label>\\r\\n            <ng-select\\r\\n              [searchable]=\\\"true\\\"\\r\\n              [clearable]=\\\"false\\\"\\r\\n              [items]=\\\"equipesVenda\\\"\\r\\n              formControlName=\\\"codEquipe\\\"\\r\\n              [virtualScroll]=\\\"true\\\"\\r\\n              bindLabel=\\\"dsEquipeVenda\\\"\\r\\n              bindValue=\\\"codEquipeVenda\\\"\\r\\n              [ngClass]=\\\"onFieldError('codEquipe') + ' ' + onFieldRequired(form.controls.codEquipe)\\\">\\r\\n            </ng-select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codEquipe')\\\" message=\\\"Equipe de venda é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"codEscritorio\\\">Escritório</label>\\r\\n            <ng-select\\r\\n              [searchable]=\\\"true\\\"\\r\\n              [clearable]=\\\"false\\\"\\r\\n              [items]=\\\"escritorios\\\"\\r\\n              formControlName=\\\"codEscritorio\\\"\\r\\n              [virtualScroll]=\\\"true\\\"\\r\\n              bindLabel=\\\"nome\\\"\\r\\n              bindValue=\\\"id\\\"\\r\\n              [ngClass]=\\\"onFieldError('codEscritorio') + ' ' + onFieldRequired(form.controls.codEscritorio)\\\">\\r\\n            </ng-select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codEscritorio')\\\" message=\\\"Escritório é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col-12\\\">\\r\\n            <label>Tipo de pessoa</label>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-12\\\">\\r\\n            <div class=\\\"custom-control custom-radio custom-control-inline\\\" (click)=\\\"setType('F')\\\">\\r\\n              <input\\r\\n                type=\\\"radio\\\"\\r\\n                id=\\\"tipoPessoaF\\\"\\r\\n                name=\\\"tipoPessoa\\\"\\r\\n                class=\\\"custom-control-input\\\"\\r\\n                value=\\\"F\\\"\\r\\n                formControlName=\\\"tipoPessoa\\\">\\r\\n              <label class=\\\"custom-control-label\\\" for=\\\"tipoPessoaF\\\">Pessoa física</label>\\r\\n            </div>\\r\\n            <div class=\\\"custom-control custom-radio custom-control-inline\\\" (click)=\\\"setType('J')\\\">\\r\\n              <input\\r\\n                type=\\\"radio\\\"\\r\\n                id=\\\"tipoPessoaJ\\\"\\r\\n                name=\\\"tipoPessoa\\\"\\r\\n                class=\\\"custom-control-input\\\"\\r\\n                value=\\\"J\\\"\\r\\n                formControlName=\\\"tipoPessoa\\\">\\r\\n              <label class=\\\"custom-control-label\\\" for=\\\"tipoPessoaJ\\\">Pessoa jurídica</label>\\r\\n            </div>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('tipoPessoa')\\\" message=\\\"Tipo de pessoa é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\" *ngIf=\\\"form.value.tipoPessoa === 'F'\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"cpf\\\">CPF</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"cpf\\\"\\r\\n              formControlName=\\\"cpf\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('cpf') + ' ' + onFieldRequired(form.controls.cpf)\\\"\\r\\n              cpf [textMask]=\\\"{ mask: MASKS.cpf.textMask }\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('cpf')\\\" message=\\\"CPF é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"rg\\\">RG</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"rg\\\"\\r\\n              formControlName=\\\"rg\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('rg') + ' ' + onFieldRequired(form.controls.rg)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('rg')\\\" message=\\\"RG é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\" *ngIf=\\\"form.value.tipoPessoa === 'J'\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"cnpj\\\">CNPJ</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"cnpj\\\"\\r\\n              formControlName=\\\"cnpj\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('cnpj') + ' ' + onFieldRequired(form.controls.cnpj)\\\"\\r\\n              cnpj [textMask]=\\\"{ mask: MASKS.cnpj.textMask }\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('cnpj')\\\" message=\\\"CNPJ é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"ie\\\">Inscrição estadual</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"ie\\\"\\r\\n              formControlName=\\\"ie\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('ie') + ' ' + onFieldRequired(form.controls.ie)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('ie')\\\" message=\\\"Inscrição estadual é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"telefone\\\">Telefone</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"telefone\\\"\\r\\n              formControlName=\\\"telefone\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('telefone') + ' ' + onFieldRequired(form.controls.telefone)\\\"\\r\\n              telefone [textMask]=\\\"{ mask: MASKS.telefone.textMaskFunction }\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('telefone')\\\" message=\\\"Telefone é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n          <div class=\\\"form-group col-lg-6\\\">\\r\\n            <label for=\\\"celular\\\">Celular</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"celular\\\"\\r\\n              formControlName=\\\"celular\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('celular') + ' ' + onFieldRequired(form.controls.celular)\\\"\\r\\n              telefone [textMask]=\\\"{ mask: MASKS.telefone.textMaskFunction }\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('celular')\\\" message=\\\"Celular é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"email\\\">E-mail</label>\\r\\n            <input\\r\\n              type=\\\"email\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"email\\\"\\r\\n              formControlName=\\\"email\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('email') + ' ' + onFieldRequired(form.controls.email)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('email')\\\" message=\\\"E-mail é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div formGroupName=\\\"endereco\\\">\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\"><hr></div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\">\\r\\n              <div class=\\\"mtc-title\\\">Endereço</div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"cep\\\">CEP</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"cep\\\"\\r\\n                formControlName=\\\"cep\\\"\\r\\n                (input)=\\\"onInput(); onInputCep();\\\"\\r\\n                autocomplete=\\\"new-password\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.cep') + ' ' + onFieldRequired(form.controls.endereco, 'cep')\\\"\\r\\n                cep [textMask]=\\\"{mask: MASKS.cep.textMask}\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.cep')\\\" message=\\\"CEP é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"logradouro\\\">Endereço</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"logradouro\\\"\\r\\n                formControlName=\\\"logradouro\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.logradouro') + ' ' + onFieldRequired(form.controls.endereco, 'logradouro')\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.logradouro')\\\" message=\\\"Endereço é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"numero\\\">Número</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"numero\\\"\\r\\n                formControlName=\\\"numero\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.numero') + ' ' + onFieldRequired(form.controls.endereco, 'numero')\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.numero')\\\" message=\\\"Número é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"complemento\\\">Complemento</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"complemento\\\"\\r\\n                formControlName=\\\"complemento\\\"\\r\\n                autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"referencia\\\">Referência</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"referencia\\\"\\r\\n                formControlName=\\\"referencia\\\"\\r\\n                autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"bairro\\\">Bairro</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"bairro\\\"\\r\\n                formControlName=\\\"bairro\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.bairro') + ' ' + onFieldRequired(form.controls.endereco, 'bairro')\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.bairro')\\\" message=\\\"Bairro é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"numero\\\">Cidade</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"cidade\\\"\\r\\n                formControlName=\\\"cidade\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.cidade') + ' ' + onFieldRequired(form.controls.endereco, 'cidade')\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.cidade')\\\" message=\\\"Cidade é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"estado\\\">Estado</label>\\r\\n              <select\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"estado\\\"\\r\\n                formControlName=\\\"estado\\\"\\r\\n                (change)=\\\"onInput()\\\"\\r\\n                [ngClass]=\\\"onFieldError('endereco.estado') + ' ' + onFieldRequired(form.controls.endereco, 'estado')\\\">\\r\\n                <option value=\\\"\\\">SELECIONE UMA OPÇÃO</option>\\r\\n                <option *ngFor=\\\"let item of estados\\\" [value]=\\\"item.sigla\\\">{{ item.descricao }}</option>\\r\\n              </select>\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.estado')\\\" message=\\\"Estado é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div formGroupName=\\\"dadosBancarios\\\">\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\"><hr></div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\">\\r\\n              <div class=\\\"mtc-title\\\">Dados bancários</div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\">\\r\\n              <label for=\\\"banco\\\">Banco</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"banco\\\"\\r\\n                formControlName=\\\"banco\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"agencia\\\">Agência</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"agencia\\\"\\r\\n                formControlName=\\\"agencia\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"contaCorrente\\\">Conta corrente</label>\\r\\n              <input\\r\\n                type=\\\"text\\\"\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"contaCorrente\\\"\\r\\n                formControlName=\\\"contaCorrente\\\"\\r\\n                (input)=\\\"onInput()\\\"\\r\\n                autocomplete=\\\"new-password\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\"><hr></div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col\\\">\\r\\n              <div class=\\\"mtc-title\\\">Contrato</div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"form-row\\\">\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"dataInicioContrato\\\">Início</label>\\r\\n              <input\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"dataInicioContrato\\\"\\r\\n                type=\\\"text\\\"\\r\\n                bsDatepicker\\r\\n                [bsConfig]=\\\"bsConfig\\\"\\r\\n                formControlName=\\\"dataInicioContrato\\\"\\r\\n                [ngClass]=\\\"onFieldError('dataInicioContrato') + ' ' + onFieldRequired(form.controls.dataInicioContrato)\\\">\\r\\n              <invalid-form-control [show]=\\\"onFieldInvalid('dataInicioContrato')\\\" message=\\\"Início do contrato é obrigatório.\\\"></invalid-form-control>\\r\\n            </div>\\r\\n            <div class=\\\"form-group col-lg-6\\\">\\r\\n              <label for=\\\"dataFinalContrato\\\">Término</label>\\r\\n              <input\\r\\n                class=\\\"form-control\\\"\\r\\n                id=\\\"dataFinalContrato\\\"\\r\\n                type=\\\"text\\\"\\r\\n                bsDatepicker\\r\\n                [bsConfig]=\\\"bsConfig\\\"\\r\\n                formControlName=\\\"dataFinalContrato\\\">\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div *ngIf=\\\"codOperador !== null\\\">\\r\\n    <comercial-cadastros-operadores-comerciais-associacoes\\r\\n      [codOperador]=\\\"codOperador\\\"\\r\\n      [showModal]=\\\"showModalAssociacoes\\\">\\r\\n    </comercial-cadastros-operadores-comerciais-associacoes>\\r\\n  </div>\\r\\n</app-body>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// ngx-bootstrap\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\r\n\r\n// ng-select\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n// ng-brazil\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { NgBrazil } from 'ng-brazil';\r\n\r\n// PNotify\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\n\r\n// Modules\r\nimport { ComercialCadastrosOperadorComercialModuleRoutingModule } from './operadores-comerciais-routing.module';\r\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\r\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\r\n\r\n// Components\r\nimport { ComercialCadastrosOperadorComercialListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosOperadorComercialFormularioComponent } from './formulario/formulario.component';\r\nimport { ComercialCadastrosOperadorComercialAssociacoesComponent } from './associacoes/associacoes.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ComercialCadastrosOperadorComercialListaComponent,\r\n    ComercialCadastrosOperadorComercialFormularioComponent,\r\n    ComercialCadastrosOperadorComercialAssociacoesComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PaginationModule.forRoot(),\r\n    TooltipModule.forRoot(),\r\n    BsDatepickerModule.forRoot(),\r\n    NgSelectModule,\r\n    TextMaskModule,\r\n    NgBrazil,\r\n    ComercialCadastrosOperadorComercialModuleRoutingModule,\r\n    SharedModule,\r\n    TemplatesModule\r\n  ],\r\n  providers: [PNotifyService]\r\n})\r\nexport class ComercialCadastrosOperadorComercialModule {}\r\n"]}