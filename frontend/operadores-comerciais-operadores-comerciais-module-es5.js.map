{"version":3,"sources":["webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais-routing.module.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario-resolver.guard.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.html","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.ts","webpack:///src/app/shared/services/core/date.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.html","webpack:///src/app/modules/comercial/comercial.service.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/lista/lista.component.scss","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.scss","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.scss","webpack:///src/app/guards/form-deactivate.guard.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/associacoes/associacoes.component.ts","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/formulario/formulario.component.html","webpack:///src/app/modules/comercial/cadastros/operadores-comerciais/operadores-comerciais.module.ts"],"names":["routes","path","component","resolve","detalhes","canDeactivate","redirectTo","pathMatch","ComercialCadastrosOperadorComercialModuleRoutingModule","imports","forChild","exports","ComercialCadastrosOperadorComercialService","http","API","params","httpParams","param","append","get","pipe","codOperador","operadorComercial","post","put","updateOperadorComercial","saveOperadorComercial","providedIn","ComercialCadastrosOperadorComercialFormularioResolverGuard","operadorComercialService","route","id","getDetalhes","success","data","codSap","codMtcorp","nomeOperador","sobrenomeOperador","tipoOperador","codSituacao","codEquipe","codEscritorio","tipoPessoa","cpf","cnpj","ie","rg","telefone","whatsApp","email","cep","logradouro","numero","complemento","referencia","bairro","cidade","estado","banco","agencia","contaCorrente","dataInicioContrato","dataFinalContrato","ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","show","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","ComercialCadastrosOperadorComercialFormularioComponent","activatedRoute","router","location","localeService","formBuilder","pnotifyService","atividadesService","titleService","tipoOperadorService","equipeVendaService","comercialService","estadosService","dateService","confirmModalService","cepService","MASKS","loaderFullScreen","breadCrumbTree","formChanged","tipoOperadores","equipesVenda","escritorios","estados","use","bsConfig","Object","assign","containerClass","adaptivePosition","showWeekNumbers","getPNotify","registrarAcesso","setBreadCrumb","getFormFields","setFormBuilder","checkRouterParams","subscribe","appTitle","setTitle","descricao","routerLink","idSubModulo","formDependencies","next","response","hasOwnProperty","error","back","responseCode","result","getEstados","getListaTipoOperador","getListaEquipesVenda","getEscritorios","snapshot","convertStringToDate","form","group","required","codTipoOperador","cpfCnpj","rgIe","celular","endereco","dadosBancarios","setType","activatedRouteSubscription","queryParams","keys","length","atob","JSON","parse","showModalAssociacoes","unsubscribe","controls","markAsUntouched","enable","setValidators","setValue","disable","updateValueAndValidity","field","onFieldInvalid","status","touched","abstractControl","abstractControlField","validator","controlName","onFieldRequired","pristine","valid","loaderNavbar","submittingForm","save","value","mensagem","navigate","relativeTo","checkAssociacoes","notice","showConfirm","onConfirmAssociacoes","onRefuseAssociacoes","q","btoa","stringify","consultaCEP","getData","patchValue","localidade","uf","confirm","selector","template","ComercialCadastrosOperadorComercialListaComponent","escritorioService","subtitles","text","color","tableConfig","subtitleBorder","orderBy","orderType","maxSize","itemsPerPage","currentPage","totalItems","dados","dadosPagination","dadosLoaded","dadosEmpty","setFormFilter","loadDependencies","unshift","tipo","situacao","nomeUsuario","dataCadastro","codEquipeVenda","dsEquipeVenda","codCarteira","codUsuario","codReferenteErp","nomeEscritorio","formValue","pagina","registros","checkOrder","search","forEach","formKey","paramKey","isNaN","Number","column","onFilter","setRouterParams","verificaParams","getListaOperadoresComerciais","slice","borderClass","event","startItem","page","endItem","scrollToFilter","nativeElement","scrollIntoView","behavior","index","confirmActivate","asObservable","activateOperadorComercial","refreshMainData","confirmInactive","inactivateOperadorComercial","i","DateService","months","weeks","dateA","dateB","getFullYear","getMonth","getDate","date","getHours","getMinutes","hours","minutes","showTime","day","weekDay","getDay","month","year","hour","getHourMinute","hourB","Date","y","m","d","h","toString","padStart","s","getSeconds","time","timeSplit","split","stringDate","dateType","indexOf","stringDateSplit","dateSplit","parseInt","substr","days","setDate","ComercialService","FormDeactivateGuard","state","formCanDeactivate","ComercialCadastrosOperadorComercialAssociacoesComponent","motivosAssociacaoService","showModal","associacoes","associacoesLoaded","associacoesEmpty","historicoAssociacoes","historicoAssociacoesLoaded","dependenciesLoaded","operadores","motivosAssociacao","changes","currentValue","onAdd","motivoAssociacao","dataInicio","dataTermino","getAssociacoesOperadores","openModal","modalAssociacoes","showLoader","loadDepencencies","getListaMotivosAssociacao","associacaoOperadorComercial","confirmDelete","deleteAssociacaoOperador","onReloadAssociacoes","codAssociacao","customClass","config","hide","reset","postAssociacaoOperador","hideModal","getHistoricoAssociacoes","modalHistoricoAssociacoes","ComercialCadastrosOperadorComercialModule","declarations","forRoot","providers"],"mappings":"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","file":"operadores-comerciais-operadores-comerciais-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n// Guards\nimport { FormDeactivateGuard } from 'src/app/guards/form-deactivate.guard';\nimport { ComercialCadastrosOperadorComercialFormularioResolverGuard } from './formulario/formulario-resolver.guard';\n\n// Components\nimport { ComercialCadastrosOperadorComercialListaComponent } from './lista/lista.component';\nimport { ComercialCadastrosOperadorComercialFormularioComponent } from './formulario/formulario.component';\n\nconst routes: Routes = [\n  {\n    path: 'lista',\n    component: ComercialCadastrosOperadorComercialListaComponent\n  },\n  {\n    path: 'novo',\n    component: ComercialCadastrosOperadorComercialFormularioComponent,\n    resolve: {\n      detalhes: ComercialCadastrosOperadorComercialFormularioResolverGuard\n    },\n    canDeactivate: [FormDeactivateGuard]\n  },\n  {\n    path: 'editar/:id',\n    component: ComercialCadastrosOperadorComercialFormularioComponent,\n    resolve: {\n      detalhes: ComercialCadastrosOperadorComercialFormularioResolverGuard\n    },\n    canDeactivate: [FormDeactivateGuard]\n  },\n  {\n    path: '',\n    redirectTo: 'lista',\n    pathMatch: 'full'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ComercialCadastrosOperadorComercialModuleRoutingModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\n\n// Interfaces\nimport { OperadorComercial } from './models/operador-comercial';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComercialCadastrosOperadorComercialService {\n  private readonly API = `https://crm360.monterrey.com.bo/api/comercial/cadastros/operador-comercial`;\n\n  constructor(protected http: HttpClient) {}\n\n  getListaOperadoresComerciais(params: any): Observable<any> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/lista`, { params: httpParams })\n      .pipe(take(1));\n  }\n\n  getDetalhes(codOperador: number): Observable<any> {\n    return this.http.get(`${this.API}/detalhes/${codOperador}`).pipe(take(1));\n  }\n\n  private saveOperadorComercial(operadorComercial: OperadorComercial) {\n    return this.http\n      .post(`${this.API}/salvar`, operadorComercial)\n      .pipe(take(1));\n  }\n\n  private updateOperadorComercial(operadorComercial: OperadorComercial) {\n    return this.http\n      .put(`${this.API}/atualizar`, operadorComercial)\n      .pipe(take(1));\n  }\n\n  save(operadorComercial: OperadorComercial): Observable<any> {\n    if (operadorComercial.codOperador !== null) {\n      return this.updateOperadorComercial(operadorComercial);\n    }\n\n    return this.saveOperadorComercial(operadorComercial);\n  }\n\n  activateOperadorComercial(codOperador: number): Observable<any> {\n    return this.http.post(`${this.API}/ativar`, codOperador).pipe(take(1));\n  }\n\n  inactivateOperadorComercial(codOperador: number): Observable<any> {\n    return this.http.post(`${this.API}/inativar`, codOperador).pipe(take(1));\n  }\n\n  getAssociacoesOperadores(codOperador: number): Observable<any> {\n    return this.http\n      .get(`${this.API}/associacoes/${codOperador}`)\n      .pipe(take(1));\n  }\n\n  getHistoricoAssociacoes(codOperador: number): Observable<any> {\n    return this.http\n      .get(`${this.API}/historico-associacoes/${codOperador}`)\n      .pipe(take(1));\n  }\n\n  postAssociacaoOperador(params: any) {\n    return this.http\n      .post(`${this.API}/salvar-associacao`, params)\n      .pipe(take(1));\n  }\n\n  deleteAssociacaoOperador(params: any): Observable<any> {\n    return this.http\n      .post(`${this.API}/excluir-associacao`, params)\n      .pipe(take(1));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\nimport { Observable, of } from 'rxjs';\n\n// Services\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ComercialCadastrosOperadorComercialFormularioResolverGuard\n  implements Resolve<any> {\n  constructor(\n    private operadorComercialService: ComercialCadastrosOperadorComercialService\n  ) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\n    if (route.params && route.params.id) {\n      return this.operadorComercialService.getDetalhes(route.params.id);\n    }\n\n    // É implementado o método \"of\" para manter a tipagem de retorno com Observable.\n    return of({\n      success: true,\n      data: {\n        codOperador: null,\n        codSap: null,\n        codMtcorp: null,\n        nomeOperador: null,\n        sobrenomeOperador: null,\n        tipoOperador: null,\n        codSituacao: null,\n        codEquipe: null,\n        codEscritorio: null,\n        tipoPessoa: 'F',\n        cpf: null,\n        cnpj: null,\n        ie: null,\n        rg: null,\n        telefone: null,\n        whatsApp: null,\n        email: null,\n        cep: null,\n        logradouro: null,\n        numero: null,\n        complemento: null,\n        referencia: null,\n        bairro: null,\n        cidade: null,\n        estado: null,\n        banco: null,\n        agencia: null,\n        contaCorrente: null,\n        dataInicioContrato: null,\n        dataFinalContrato: null\n      }\n    });\n  }\n}\n","export default \"<div class=\\\"row justify-content-center\\\">\\n  <div class=\\\"col-lg-8\\\">\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"form-group col\\\"><hr></div>\\n    </div>\\n    <div class=\\\"form-row\\\">\\n      <div class=\\\"form-group col mb-3 d-flex justify-content-between\\\">\\n        <div class=\\\"mtc-title mb-0\\\">Associação de operadores</div>\\n        <div>\\n          <div *ngIf=\\\"!showLoader\\\">\\n            <a\\n              class=\\\"text-primary mr-3\\\"\\n              href=\\\"javascript:void(0)\\\"\\n              (click)=\\\"onHistorico()\\\"\\n              *ngIf=\\\"associacoes.length > 0 && !associacoesEmpty\\\">\\n              <strong>Histórico</strong>\\n            </a>\\n            <a\\n              class=\\\"text-secondary\\\"\\n              href=\\\"javascript:void(0)\\\"\\n              (click)=\\\"onAdd()\\\">\\n              <strong>Adicionar</strong>\\n            </a>\\n          </div>\\n          <div class=\\\"d-flex w-100\\\" *ngIf=\\\"showLoader\\\">\\n            <div class=\\\"spinner-border spinner-border-sm text-dark my-auto mr-2\\\"></div>\\n            <strong>Aguarde...</strong>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <div class=\\\"col\\\">\\n        <custom-table *ngIf=\\\"associacoes.length > 0 && !associacoesEmpty\\\">\\n          <ng-template #thead let-thead>\\n            <tr>\\n              <th scope=\\\"col\\\">Nome do operador</th>\\n              <th scope=\\\"col\\\">Motivo</th>\\n              <th scope=\\\"col\\\" class=\\\"text-center\\\">Início</th>\\n              <th scope=\\\"col\\\" class=\\\"text-center\\\">Término</th>\\n              <th scope=\\\"col\\\"></th>\\n            </tr>\\n          </ng-template>\\n          <ng-template #tbody let-tbody>\\n            <tr *ngFor=\\\"let associacao of associacoes\\\">\\n              <td>{{ associacao.nomeOperadorAssociacao | uppercase }}</td>\\n              <td>{{ associacao.motivo | uppercase }}</td>\\n              <td class=\\\"text-center\\\">{{ associacao.dataInicialAssociacao | date: 'dd/MM/yyyy' }}</td>\\n              <td class=\\\"text-center\\\">{{ associacao.dataFinalAssociacao | date: 'dd/MM/yyyy' }}</td>\\n              <td class=\\\"text-right\\\">\\n                <span class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                  <button\\n                    type=\\\"button\\\"\\n                    class=\\\"btn-icon-sm\\\"\\n                    [disabled]=\\\"showLoader\\\"\\n                    (click)=\\\"onDelete(associacao)\\\">\\n                    <i class=\\\"fas fa-trash\\\"></i>\\n                  </button>\\n                </span>\\n              </td>\\n            </tr>\\n          </ng-template>\\n        </custom-table>\\n        <empty-result\\n          message=\\\"Nenhuma informação encontrada\\\"\\n          class=\\\"my-3\\\"\\n          *ngIf=\\\"associacoesEmpty\\\">\\n        </empty-result>\\n        <div class=\\\"mt-2 d-flex w-100\\\" *ngIf=\\\"!associacoesLoaded\\\">\\n          <div class=\\\"spinner-border spinner-border-sm text-dark my-auto mr-2\\\"></div>\\n          <strong>Carregando associações...</strong>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template #modalAssociacoes>\\n  <div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title pull-left\\\">Associação de operadores</h4>\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"close pull-right\\\"\\n      [disabled]=\\\"submittingForm\\\"\\n      (click)=\\\"hideModal()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <form [formGroup]=\\\"form\\\">\\n      <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col\\\">\\n          <label for=\\\"operadores\\\">Selecione os operadores</label>\\n          <ng-select\\n            [items]=\\\"operadores\\\"\\n            [multiple]=\\\"true\\\"\\n            [closeOnSelect]=\\\"false\\\"\\n            labelForId=\\\"operadores\\\"\\n            bindValue=\\\"codOperador\\\"\\n            bindLabel=\\\"nomeCompleto\\\"\\n            formControlName=\\\"operadores\\\"\\n            [ngClass]=\\\"onFieldError('operadores') + ' ' + onFieldRequired(form.controls.operadores)\\\">\\n          </ng-select>\\n          <invalid-form-control [show]=\\\"onFieldInvalid('operadores')\\\" message=\\\"Selecione pelo menos um operador.\\\"></invalid-form-control>\\n        </div>\\n      </div>\\n      <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col\\\">\\n          <label for=\\\"motivoAssociacao\\\">Motivo da associação</label>\\n          <ng-select\\n            [searchable]=\\\"true\\\"\\n            [clearable]=\\\"false\\\"\\n            [items]=\\\"motivosAssociacao\\\"\\n            formControlName=\\\"motivoAssociacao\\\"\\n            [virtualScroll]=\\\"true\\\"\\n            bindLabel=\\\"motivoAssociacao\\\"\\n            bindValue=\\\"codMotivoAssociacao\\\"\\n            [ngClass]=\\\"onFieldError('motivoAssociacao') + ' ' + onFieldRequired(form.controls.motivoAssociacao)\\\">\\n          </ng-select>\\n          <invalid-form-control [show]=\\\"onFieldInvalid('motivoAssociacao')\\\" message=\\\"Motivo da associação é obrigatório.\\\"></invalid-form-control>\\n        </div>\\n      </div>\\n      <div class=\\\"form-row\\\">\\n        <div class=\\\"form-group col-lg-6\\\">\\n          <label for=\\\"dataInicio\\\">Início</label>\\n          <input\\n            class=\\\"form-control\\\"\\n            id=\\\"dataInicio\\\"\\n            type=\\\"text\\\"\\n            bsDatepicker\\n            [bsConfig]=\\\"bsConfig\\\"\\n            formControlName=\\\"dataInicio\\\"\\n            [ngClass]=\\\"onFieldError('dataInicio') + ' ' + onFieldRequired(form.controls.dataInicio)\\\">\\n          <invalid-form-control [show]=\\\"onFieldInvalid('dataInicio')\\\" message=\\\"Início da associação é obrigatório.\\\"></invalid-form-control>\\n        </div>\\n        <div class=\\\"form-group col-lg-6\\\">\\n          <label for=\\\"dataTermino\\\">Término</label>\\n          <input\\n            class=\\\"form-control\\\"\\n            id=\\\"dataTermino\\\"\\n            type=\\\"text\\\"\\n            bsDatepicker\\n            [bsConfig]=\\\"bsConfig\\\"\\n            formControlName=\\\"dataTermino\\\">\\n        </div>\\n      </div>\\n    </form>\\n  </div>\\n  <div class=\\\"modal-footer\\\">\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"btn btn-light\\\"\\n      [disabled]=\\\"submittingForm\\\"\\n      (click)=\\\"hideModal()\\\">\\n      Cancelar\\n    </button>\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"btn btn-primary\\\"\\n      [disabled]=\\\"submittingForm\\\"\\n      (click)=\\\"onSubmit()\\\">\\n      <span *ngIf=\\\"!submittingForm\\\">Salvar</span>\\n      <span *ngIf=\\\"submittingForm\\\">Aguarde</span>\\n    </button>\\n  </div>\\n</ng-template>\\n\\n<ng-template #modalHistoricoAssociacoes>\\n  <div class=\\\"modal-header\\\">\\n    <h4 class=\\\"modal-title pull-left\\\">Histórico de associações</h4>\\n    <button\\n      type=\\\"button\\\"\\n      class=\\\"close pull-right\\\"\\n      [disabled]=\\\"submittingForm\\\"\\n      (click)=\\\"modalRef.hide()\\\">\\n      <span aria-hidden=\\\"true\\\">&times;</span>\\n    </button>\\n  </div>\\n  <div class=\\\"modal-body\\\">\\n    <custom-table *ngIf=\\\"historicoAssociacoes.length > 0\\\">\\n      <ng-template #thead let-thead>\\n        <tr>\\n          <th scope=\\\"col\\\" class=\\\"text-center\\\">Data</th>\\n          <th scope=\\\"col\\\">Usuário</th>\\n          <th scope=\\\"col\\\">Alteração</th>\\n        </tr>\\n      </ng-template>\\n      <ng-template #tbody let-tbody>\\n        <tr *ngFor=\\\"let historico of historicoAssociacoes\\\">\\n          <td class=\\\"text-center\\\">{{ historico.dataLog | date: 'dd/MM/yyyy HH:mm' }}</td>\\n          <td>{{ historico.nomeUsuario | uppercase }}</td>\\n          <td>{{ historico.mensagem | uppercase }}</td>\\n        </tr>\\n      </ng-template>\\n    </custom-table>\\n  </div>\\n</ng-template>\\n\";","import { Injectable } from '@angular/core';\nimport { BsModalService } from 'ngx-bootstrap/modal';\n\n// Components\nimport { ConfirmModalComponent } from './confirm-modal.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConfirmModalService {\n  constructor(private modalService: BsModalService) {}\n\n  showConfirm(\n    type: string,\n    title: string,\n    message: string,\n    cancelTxt?: string,\n    okTxt?: string\n  ) {\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\n      animated: false,\n      ignoreBackdropClick: true,\n      keyboard: false,\n      class: 'confirm'\n    });\n\n    modalRef.content.type = type;\n    modalRef.content.title = title;\n    modalRef.content.message = message;\n\n    if (type === 'delete') {\n      modalRef.content.messageAlerts = [\n        \"Se eliminará toda la información relacionada.\",\n        \"Esta acción no se puede deshacer.\"\n      ];\n    }\n\n    if (type === 'inactivate') {\n      modalRef.content.messageAlerts = [\n        'Las informacion serán inactivadas.'\n      ];\n    }\n\n    if (cancelTxt) {\n      modalRef.content.cancelTxt = cancelTxt;\n    }\n\n    if (okTxt) {\n      modalRef.content.okTxt = okTxt;\n    }\n\n    // É uma boa prática tipar o retorno.\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\nimport { finalize, take } from 'rxjs/operators';\nimport { forkJoin, Observable, Subscription } from 'rxjs';\n\n// ngx-bootstrap\nimport { BsLocaleService, BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\nimport { defineLocale } from 'ngx-bootstrap/chronos';\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\n\ndefineLocale('pt-br', ptBrLocale);\n\n// ng-brazil\nimport { NgBrazilValidators } from 'ng-brazil';\nimport { utilsBr } from 'js-brasil';\n\n// Services\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\nimport { TitleService } from 'src/app/shared/services/core/title.service';\nimport { ComercialCadastrosTipoOperadorService } from 'src/app/modules/comercial/cadastros/tipo-operadores/tipo-operadores.service';\nimport { ComercialCadastrosEquipeVendaService } from 'src/app/modules/comercial/cadastros/equipe-venda/equipe-venda.service';\nimport { ComercialService } from 'src/app/modules/comercial/comercial.service';\nimport { EstadosService } from 'src/app/shared/services/requests/estados.service';\nimport { DateService } from 'src/app/shared/services/core/date.service';\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\nimport { CepService } from 'src/app/shared/services/ws/cep.service';\n\n// Interfaces\nimport { IFormCanDeactivate } from 'src/app/guards/iform-candeactivate';\nimport { OperadorComercial } from '../models/operador-comercial';\nimport { EquipeVenda } from '../../equipe-venda/models/equipe-venda';\n\n@Component({\n  selector: 'comercial-cadastros-operador-comercial-formulario',\n  templateUrl: './formulario.component.html',\n  styleUrls: ['./formulario.component.scss']\n})\nexport class ComercialCadastrosOperadorComercialFormularioComponent\n  implements OnInit, IFormCanDeactivate {\n  public MASKS = utilsBr.MASKS;\n\n  loaderNavbar: boolean;\n  loaderFullScreen = true;\n\n  appTitle: string;\n  breadCrumbTree: Array<any> = [];\n\n  activatedRouteSubscription: Subscription;\n\n  bsConfig: Partial<BsDatepickerConfig>;\n\n  codOperador: number = null;\n\n  form: FormGroup;\n  formChanged = false;\n  submittingForm: boolean;\n\n  tipoOperadores: Array<OperadorComercial> = [];\n  equipesVenda: Array<EquipeVenda> = [];\n  escritorios: Array<any> = [];\n  estados: Array<any> = [];\n\n  showModalAssociacoes: boolean;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private localeService: BsLocaleService,\n    private formBuilder: FormBuilder,\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\n    private pnotifyService: PNotifyService,\n    private atividadesService: AtividadesService,\n    private titleService: TitleService,\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\n    private equipeVendaService: ComercialCadastrosEquipeVendaService,\n    private comercialService: ComercialService,\n    private estadosService: EstadosService,\n    private dateService: DateService,\n    private confirmModalService: ConfirmModalService,\n    private cepService: CepService\n  ) {\n    this.localeService.use('pt-br');\n    this.bsConfig = Object.assign(\n      {},\n      { containerClass: 'theme-dark-blue' },\n      { adaptivePosition: true },\n      { showWeekNumbers: false }\n    );\n    this.pnotifyService.getPNotify();\n  }\n\n  ngOnInit(): void {\n    this.registrarAcesso();\n    this.setBreadCrumb();\n    this.getFormFields();\n    this.setFormBuilder();\n    this.checkRouterParams();\n  }\n\n  registrarAcesso(): void {\n    this.atividadesService.registrarAcesso().subscribe();\n  }\n\n  setBreadCrumb(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      if (params.id) {\n        this.appTitle = 'Editar operador comercial';\n        this.codOperador = params.id;\n      } else {\n        this.appTitle = 'Novo operador comercial';\n      }\n\n      this.titleService.setTitle(this.appTitle);\n\n      this.breadCrumbTree = [\n        {\n          descricao: 'Home',\n          routerLink: '/comercial/home'\n        },\n        {\n          descricao: 'Cadastros',\n          routerLink: `/comercial/cadastros/${params.idSubModulo}`\n        },\n        {\n          descricao: 'Operadores comerciais',\n          routerLink: `/comercial/cadastros/${params.idSubModulo}/operadores-comerciais/lista`\n        },\n        {\n          descricao: this.appTitle\n        }\n      ];\n    });\n  }\n\n  getFormFields(): void {\n    this.formDependencies()\n      .pipe(\n        finalize(() => {\n          this.loaderFullScreen = false;\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (\n            response[0].hasOwnProperty('success') &&\n            response[0].success === true\n          ) {\n            this.tipoOperadores = response[0].data;\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n\n          if (\n            response[1].hasOwnProperty('success') &&\n            response[1].success === true\n          ) {\n            this.equipesVenda = response[1].data;\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n\n          if (response[2].responseCode === 200) {\n            this.escritorios = response[2].result;\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n\n          this.estados = this.estadosService.getEstados();\n        },\n        error: (error: any) => {\n          this.pnotifyService.error();\n          this.location.back();\n        }\n      });\n  }\n\n  formDependencies(): Observable<any> {\n    const tipoOperadores = this.tipoOperadorService.getListaTipoOperador({\n      codSituacao: 1\n    });\n    const equipesVenda = this.equipeVendaService.getListaEquipesVenda({\n      codSituacao: 1\n    });\n    const escritorios = this.comercialService.getEscritorios();\n\n    return forkJoin([tipoOperadores, equipesVenda, escritorios]).pipe(take(1));\n  }\n\n  setFormBuilder(): void {\n    if (this.activatedRoute.snapshot.data.detalhes.success === true) {\n      const detalhes: OperadorComercial = this.activatedRoute.snapshot.data\n        .detalhes.data;\n\n      const dataInicioContrato: Date =\n        detalhes.dataInicioContrato === null\n          ? null\n          : this.dateService.convertStringToDate(\n              detalhes.dataInicioContrato,\n              'usa'\n            );\n\n      const dataFinalContrato: Date =\n        detalhes.dataFinalContrato === null\n          ? null\n          : this.dateService.convertStringToDate(\n              detalhes.dataFinalContrato,\n              'usa'\n            );\n\n      this.form = this.formBuilder.group({\n        codOperador: [detalhes.codOperador],\n        nomeOperador: [detalhes.nomeOperador, [Validators.required]],\n        sobrenomeOperador: [detalhes.sobrenomeOperador, [Validators.required]],\n        codTipoOperador: [detalhes.codTipoOperador, [Validators.required]],\n        codSituacao: [detalhes.codSituacao, [Validators.required]],\n        codEquipe: [detalhes.codEquipe, [Validators.required]],\n        codEscritorio: [detalhes.codEscritorio, [Validators.required]],\n        tipoPessoa: [detalhes.tipoPessoa, [Validators.required]],\n        cpf: [detalhes.cpfCnpj],\n        cnpj: [detalhes.cpfCnpj],\n        rg: [detalhes.rgIe],\n        ie: [detalhes.rgIe],\n        telefone: [detalhes.telefone, [Validators.required]],\n        celular: [detalhes.celular, [Validators.required]],\n        email: [detalhes.email, [Validators.required, Validators.email]],\n        endereco: this.formBuilder.group({\n          cep: [detalhes.cep, [Validators.required]],\n          logradouro: [detalhes.logradouro, [Validators.required]],\n          numero: [detalhes.numero, [Validators.required]],\n          complemento: [detalhes.complemento],\n          referencia: [detalhes.referencia],\n          bairro: [detalhes.bairro, [Validators.required]],\n          cidade: [detalhes.cidade, [Validators.required]],\n          estado: [detalhes.estado, [Validators.required]]\n        }),\n        dadosBancarios: this.formBuilder.group({\n          banco: [detalhes.banco],\n          agencia: [detalhes.agencia],\n          contaCorrente: [detalhes.contaCorrente]\n        }),\n        dataInicioContrato: [dataInicioContrato, [Validators.required]],\n        dataFinalContrato: [dataFinalContrato]\n      });\n      this.setType(detalhes.tipoPessoa);\n    } else {\n      this.pnotifyService.error();\n      this.location.back();\n    }\n  }\n\n  checkRouterParams(): void {\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\n      (queryParams: any) => {\n        if (Object.keys(queryParams).length > 0) {\n          let params = atob(queryParams['q']);\n          params = JSON.parse(params);\n\n          if (\n            params['showModalAssociacoes'] &&\n            params['showModalAssociacoes'] === 1\n          ) {\n            this.showModalAssociacoes = true;\n          }\n        }\n      }\n    );\n    this.activatedRouteSubscription.unsubscribe();\n  }\n\n  setType(tipoPessoa: string): void {\n    if (tipoPessoa === 'F') {\n      this.form.controls.cpf.markAsUntouched();\n      this.form.controls.cpf.enable();\n      this.form.controls.cpf.setValidators([\n        NgBrazilValidators.cpf,\n        Validators.required\n      ]);\n      this.form.controls.rg.markAsUntouched();\n      this.form.controls.rg.enable();\n      this.form.controls.rg.setValidators([Validators.required]);\n\n      this.form.controls.cnpj.setValue(null);\n      this.form.controls.cnpj.disable();\n      this.form.controls.ie.setValue(null);\n      this.form.controls.ie.disable();\n    } else if (tipoPessoa === 'J') {\n      this.form.controls.cnpj.markAsUntouched();\n      this.form.controls.cnpj.enable();\n      this.form.controls.cnpj.setValidators([\n        NgBrazilValidators.cnpj,\n        Validators.required\n      ]);\n      this.form.controls.ie.markAsUntouched();\n      this.form.controls.ie.enable();\n      this.form.controls.ie.setValidators([Validators.required]);\n\n      this.form.controls.cpf.setValue(null);\n      this.form.controls.cpf.disable();\n      this.form.controls.rg.setValue(null);\n      this.form.controls.rg.disable();\n    }\n\n    this.form.controls.cpf.updateValueAndValidity();\n    this.form.controls.cnpj.updateValueAndValidity();\n    this.form.controls.rg.updateValueAndValidity();\n    this.form.controls.ie.updateValueAndValidity();\n  }\n\n  onFieldError(field: string): string {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n\n    return '';\n  }\n\n  onFieldInvalid(field: any): boolean {\n    field = this.form.get(field);\n\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  onFieldRequired(\n    abstractControl: AbstractControl,\n    abstractControlField?: string\n  ): string {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({} as AbstractControl);\n      if (validator && validator.required) {\n        return 'is-required';\n      }\n    }\n\n    if (abstractControlField) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\n            controlName == abstractControlField\n          ) {\n            return 'is-required';\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  onSubmit(): void {\n    if (this.form.pristine) {\n      this.location.back();\n    } else {\n      if (this.form.valid) {\n        this.loaderNavbar = true;\n        this.submittingForm = true;\n\n        this.operadorComercialService\n          .save(this.form.value)\n          .pipe(\n            finalize(() => {\n              this.loaderNavbar = false;\n              this.submittingForm = false;\n            })\n          )\n          .subscribe({\n            next: (response: any) => {\n              if (\n                response.hasOwnProperty('mensagem') &&\n                response.hasOwnProperty('success') &&\n                response.success === true\n              ) {\n                this.formChanged = false;\n                this.pnotifyService.success(response.mensagem);\n\n                this.activatedRoute.params.subscribe((params: any) => {\n                  this.activatedRoute.queryParams.subscribe(\n                    (queryParams: any) => {\n                      if (queryParams.hasOwnProperty('q')) {\n                        this.router.navigate(['../../lista'], {\n                          relativeTo: this.activatedRoute\n                        });\n                      } else {\n                        if (params.hasOwnProperty('id')) {\n                          this.location.back();\n                        } else {\n                          this.checkAssociacoes(response.data);\n                        }\n                      }\n                    }\n                  );\n                });\n              } else if (\n                response.hasOwnProperty('mensagem') &&\n                response.hasOwnProperty('success') &&\n                response.success === false\n              ) {\n                this.pnotifyService.notice(response.mensagem);\n              } else {\n                this.pnotifyService.error();\n              }\n            },\n            error: (error: any) => {\n              this.pnotifyService.error();\n            }\n          });\n      }\n    }\n  }\n\n  checkAssociacoes(codOperador: number): void {\n    this.confirmModalService\n      .showConfirm(\n        null,\n        'Associação de operadores',\n        'Deseja associar outros operadores comerciais?',\n        'Cancelar',\n        'Confirmar'\n      )\n      .subscribe((response: boolean) =>\n        response\n          ? this.onConfirmAssociacoes(codOperador)\n          : this.onRefuseAssociacoes()\n      );\n  }\n\n  onConfirmAssociacoes(codOperador: number): void {\n    this.router.navigate(['../editar', codOperador], {\n      relativeTo: this.activatedRoute,\n      queryParams: { q: btoa(JSON.stringify({ showModalAssociacoes: 1 })) }\n    });\n  }\n\n  onRefuseAssociacoes(): void {\n    this.router.navigate(['../lista'], {\n      relativeTo: this.activatedRoute\n    });\n  }\n\n  onCancel(): void {\n    this.location.back();\n  }\n\n  onInput(): void {\n    this.formChanged = true;\n  }\n\n  onInputCep() {\n    if (this.form.get('endereco.cep').status == 'VALID') {\n      this.consultaCEP(this.form.value.endereco.cep);\n    }\n  }\n\n  consultaCEP(cep: string) {\n    this.loaderNavbar = true;\n\n    this.cepService\n      .getData(cep)\n      .pipe(\n        finalize(() => {\n          this.loaderNavbar = false;\n        })\n      )\n      .subscribe((response: any) => {\n        if (response.hasOwnProperty('success') && response.success === true) {\n          this.form.patchValue({\n            endereco: {\n              logradouro: response.data.logradouro,\n              bairro: response.data.bairro,\n              cidade: response.data.localidade,\n              estado: response.data.uf\n            }\n          });\n        }\n      });\n  }\n\n  formCanDeactivate(): boolean {\n    if (this.formChanged) {\n      if (confirm('Este cliente no forma parte de tu cartera?')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Location } from '@angular/common';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\nimport { Subscription, EMPTY, Observable, forkJoin } from 'rxjs';\nimport { take, switchMap, finalize } from 'rxjs/operators';\n\n// ngx-bootstrap\nimport { PageChangedEvent } from 'ngx-bootstrap/pagination';\n\n// Services\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\nimport { TitleService } from 'src/app/shared/services/core/title.service';\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\nimport { ComercialCadastrosTipoOperadorService } from '../../tipo-operadores/tipo-operadores.service';\nimport { ComercialCadastrosEquipeVendaService } from '../../equipe-venda/equipe-venda.service';\nimport { EscritoriosService } from 'src/app/shared/services/requests/escritorios.service';\n\n// Interfaces\nimport { OperadorComercial } from '../models/operador-comercial';\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\nimport { Subtitles } from 'src/app/shared/modules/subtitles/subtitles';\nimport { TipoOperador } from '../../tipo-operadores/models/tipo-operador';\nimport { EquipeVenda } from '../../equipe-venda/models/equipe-venda';\nimport { CustomTableConfig } from 'src/app/shared/templates/custom-table/models/config';\n\n@Component({\n  selector: 'comercial-cadastros-operador-comercial-lista',\n  templateUrl: './lista.component.html',\n  styleUrls: ['./lista.component.scss']\n})\nexport class ComercialCadastrosOperadorComercialListaComponent\n  implements OnInit {\n  @ViewChild('scrollToFilter', {}) scrollToFilter: ElementRef;\n\n  loaderNavbar = false;\n  loaderFullScreen = true;\n\n  breadCrumbTree: Array<Breadcrumb> = [];\n\n  subtitles: Array<Subtitles> = [\n    {\n      id: 1,\n      text: 'Ativo',\n      color: 'green'\n    },\n    {\n      id: 2,\n      text: 'Inativo',\n      color: 'red'\n    }\n  ];\n\n  tableConfig: Partial<CustomTableConfig> = {\n    subtitleBorder: true\n  };\n\n  activatedRouteSubscription: Subscription;\n\n  form: FormGroup;\n  orderBy = 'nomeOperador';\n  orderType = 'ASC';\n\n  tipoOperadores: Array<TipoOperador> = [];\n  equipesVenda: Array<EquipeVenda> = [];\n  escritorios: Array<any> = [];\n\n  maxSize = 10;\n  itemsPerPage = 300;\n  currentPage = 1;\n  totalItems = 0;\n\n  dados: Array<OperadorComercial> = [];\n  dadosPagination: Array<OperadorComercial> = [];\n  dadosLoaded = false;\n  dadosEmpty = false;\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private formBuilder: FormBuilder,\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\n    private pnotifyService: PNotifyService,\n    private atividadesService: AtividadesService,\n    private titleService: TitleService,\n    private confirmModalService: ConfirmModalService,\n    private tipoOperadorService: ComercialCadastrosTipoOperadorService,\n    private equipeVendaService: ComercialCadastrosEquipeVendaService,\n    private escritorioService: EscritoriosService\n  ) {\n    this.pnotifyService.getPNotify();\n  }\n\n  ngOnInit(): void {\n    this.registrarAcesso();\n    this.setBreadCrumb();\n    this.getFormFields();\n    this.setFormFilter();\n    this.titleService.setTitle('Operadores comerciais');\n  }\n\n  registrarAcesso(): void {\n    this.atividadesService.registrarAcesso().subscribe();\n  }\n\n  setBreadCrumb(): void {\n    this.activatedRoute.params.subscribe((params: any) => {\n      this.breadCrumbTree = [\n        {\n          descricao: 'Home',\n          routerLink: '/comercial/home'\n        },\n        {\n          descricao: 'Cadastros',\n          routerLink: `/comercial/cadastros/${params['idSubModulo']}`\n        },\n        {\n          descricao: 'Operadores comerciais'\n        }\n      ];\n    });\n  }\n\n  getFormFields(): void {\n    this.loadDependencies()\n      .pipe(\n        finalize(() => {\n          this.loaderFullScreen = false;\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (\n            response[0].hasOwnProperty('success') &&\n            response[0].success === true\n          ) {\n            this.tipoOperadores = response[0].data;\n\n            this.tipoOperadores.unshift({\n              codTipoOperador: 0,\n              tipo: 'EXIBIR TODOS',\n              codSituacao: null,\n              situacao: null,\n              nomeUsuario: null,\n              dataCadastro: null\n            });\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n\n          if (\n            response[1].hasOwnProperty('success') &&\n            response[1].success === true\n          ) {\n            this.equipesVenda = response[1].data;\n\n            this.equipesVenda.unshift({\n              codEquipeVenda: 0,\n              dsEquipeVenda: 'EXIBIR TODOS',\n              codCarteira: null,\n              codSituacao: null,\n              situacao: null,\n              codUsuario: null,\n              nomeUsuario: null,\n              dataCadastro: null,\n              codReferenteErp: null\n            });\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n\n          if (response[2].responseCode === 200) {\n            this.escritorios = response[2].result;\n\n            this.escritorios.unshift({\n              codEscritorio: 0,\n              nomeEscritorio: 'EXIBIR TODOS'\n            });\n          } else {\n            this.pnotifyService.error();\n            this.location.back();\n          }\n        },\n        error: (error: any) => {\n          this.pnotifyService.error();\n          this.location.back();\n        }\n      });\n  }\n\n  loadDependencies(): Observable<any> {\n    const tipoOperadores = this.tipoOperadorService.getListaTipoOperador({\n      codSituacao: 1\n    });\n    const equipesVenda = this.equipeVendaService.getListaEquipesVenda({\n      codSituacao: 1\n    });\n    const escritorios = this.escritorioService.getEscritorios();\n\n    return forkJoin([tipoOperadores, equipesVenda, escritorios]);\n  }\n\n  setFormFilter(): void {\n    const formValue: any = this.checkRouterParams();\n\n    this.form = this.formBuilder.group({\n      cpfCnpj: [formValue.cpfCnpj],\n      rgIe: [formValue.rgIe],\n      nomeOperador: [formValue.nomeOperador],\n      codTipoOperador: [formValue.codTipoOperador],\n      codEquipe: [formValue.codEquipe],\n      codEscritorio: [formValue.codEscritorio],\n      codSituacao: [formValue.codSituacao],\n      orderBy: [formValue.orderBy],\n      orderType: [formValue.orderType],\n      pagina: [formValue.pagina],\n      registros: [formValue.registros, Validators.required]\n    });\n\n    this.checkOrder();\n  }\n\n  checkRouterParams(): Object {\n    let formValue = {\n      cpfCnpj: null,\n      rgIe: null,\n      nomeOperador: null,\n      codTipoOperador: 0,\n      codEquipe: 0,\n      codEscritorio: 0,\n      codSituacao: 0,\n      orderBy: this.orderBy,\n      orderType: this.orderType,\n      pagina: 1,\n      registros: this.itemsPerPage\n    };\n\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\n      (queryParams: any) => {\n        if (Object.keys(queryParams).length > 0) {\n          let params = atob(queryParams['q']);\n          params = JSON.parse(params);\n          this.search(params);\n\n          Object.keys(formValue).forEach(formKey => {\n            Object.keys(params).forEach(paramKey => {\n              if (\n                formKey == paramKey &&\n                formValue[formKey] != params[paramKey]\n              ) {\n                if (!isNaN(Number(params[paramKey]))) {\n                  formValue[formKey] = Number(params[paramKey]);\n                } else {\n                  formValue[formKey] = params[paramKey];\n                }\n              }\n            });\n          });\n        }\n      }\n    );\n    this.activatedRouteSubscription.unsubscribe();\n\n    return formValue;\n  }\n\n  checkOrder(): void {\n    if (this.form.value.orderBy !== this.orderBy) {\n      this.orderBy = this.form.value.orderBy;\n    }\n\n    if (this.form.value.orderType !== this.orderType) {\n      this.orderType = this.form.value.orderType;\n    }\n  }\n\n  onFieldError(field: string): string {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n\n    return '';\n  }\n\n  onFieldInvalid(field: any): boolean {\n    field = this.form.get(field);\n\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  onFieldRequired(\n    abstractControl: AbstractControl,\n    abstractControlField?: string\n  ): string {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({} as AbstractControl);\n      if (validator && validator.required) {\n        return 'is-required';\n      }\n    }\n\n    if (abstractControlField) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\n            controlName == abstractControlField\n          ) {\n            return 'is-required';\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  setOrderBy(column: string): void {\n    if (this.orderBy === column) {\n      if (this.orderType == 'DESC') {\n        this.orderType = 'ASC';\n      } else if (this.orderType == 'ASC') {\n        this.orderType = 'DESC';\n      }\n    } else {\n      this.orderBy = column;\n      this.orderType = 'ASC';\n    }\n\n    this.form.value.orderBy = this.orderBy;\n    this.form.value.orderType = this.orderType;\n\n    this.onFilter();\n  }\n\n  onFilter(): void {\n    if (this.form.valid) {\n      this.itemsPerPage = this.form.value.registros;\n      this.currentPage = 1;\n      this.setRouterParams(this.verificaParams());\n    }\n  }\n\n  setRouterParams(params: any): void {\n    this.router.navigate([], {\n      relativeTo: this.activatedRoute,\n      queryParams: { q: btoa(JSON.stringify(params)) }\n    });\n    this.search(params);\n  }\n\n  verificaParams(): Object {\n    let params: any = {};\n\n    if (this.form.value.cpfCnpj) {\n      params.cpfCnpj = this.form.value.cpfCnpj;\n    }\n\n    if (this.form.value.rgIe) {\n      params.rgIe = this.form.value.rgIe;\n    }\n\n    if (this.form.value.nomeOperador) {\n      params.nomeOperador = this.form.value.nomeOperador;\n    }\n\n    if (this.form.value.codTipoOperador) {\n      params.codTipoOperador = this.form.value.codTipoOperador;\n    }\n\n    if (this.form.value.codEquipe) {\n      params.codEquipe = this.form.value.codEquipe;\n    }\n\n    if (this.form.value.codEscritorio) {\n      params.codEscritorio = this.form.value.codEscritorio;\n    }\n\n    if (this.form.value.codSituacao) {\n      params.codSituacao = this.form.value.codSituacao;\n    }\n\n    params.orderBy = this.form.value.orderBy;\n    params.orderType = this.form.value.orderType;\n\n    return params;\n  }\n\n  search(params: any): void {\n    this.loaderNavbar = true;\n    this.dados = [];\n    this.dadosPagination = [];\n    this.dadosLoaded = false;\n    this.dadosEmpty = false;\n    this.totalItems = 0;\n\n    this.operadorComercialService\n      .getListaOperadoresComerciais(params)\n      .pipe(\n        finalize(() => {\n          this.loaderNavbar = false;\n          this.dadosLoaded = true;\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (response.hasOwnProperty('success') && response.success === true) {\n            this.dados = response.data;\n            this.dadosPagination = this.dados.slice(0, this.itemsPerPage);\n            this.totalItems = this.dados.length;\n            this.dadosLoaded = true;\n          } else if (\n            response.hasOwnProperty('success') &&\n            response.success === false\n          ) {\n            this.dadosEmpty = true;\n          } else {\n            this.pnotifyService.error();\n            this.dadosEmpty = true;\n          }\n        },\n        error: (error: any) => {\n          this.dadosEmpty = true;\n\n          if (error.error.hasOwnProperty('mensagem')) {\n            this.pnotifyService.error(error.error.mensagem);\n          } else {\n            this.pnotifyService.error();\n          }\n        }\n      });\n  }\n\n  classStatusBorder(operadorComercial: OperadorComercial): string {\n    let borderClass: string;\n\n    if (operadorComercial.codSituacao === 1) {\n      borderClass = 'border-success';\n    } else if (operadorComercial.codSituacao === 2) {\n      borderClass = 'border-danger';\n    }\n\n    return borderClass;\n  }\n\n  onPageChanged(event: PageChangedEvent): void {\n    const startItem = (event.page - 1) * event.itemsPerPage;\n    const endItem = event.page * event.itemsPerPage;\n    this.dadosPagination = this.dados.slice(startItem, endItem);\n\n    this.scrollToFilter.nativeElement.scrollIntoView({\n      behavior: 'instant'\n    });\n  }\n\n  onEdit(operadorComercial: OperadorComercial): void {\n    this.router.navigate(['../editar', operadorComercial.codOperador], {\n      relativeTo: this.activatedRoute\n    });\n  }\n\n  onActivate(index: number, operadorComercial: OperadorComercial): void {\n    this.confirmActivate()\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap(result =>\n          result\n            ? this.activateOperadorComercial(index, operadorComercial)\n            : EMPTY\n        ),\n        finalize(() => {\n          this.loaderNavbar = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotifyService.success();\n          this.refreshMainData(operadorComercial);\n        },\n        (error: any) => {\n          this.pnotifyService.error();\n          this.dadosPagination[index].codSituacao = 2;\n        }\n      );\n  }\n\n  confirmActivate(): any {\n    return this.confirmModalService.showConfirm(\n      null,\n      null,\n      'Deseja realmente prosseguir com a ativação do registro?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  activateOperadorComercial(\n    index: number,\n    operadorComercial: OperadorComercial\n  ): Observable<any> {\n    this.loaderNavbar = true;\n    this.dadosPagination[index].codSituacao = 1;\n\n    return this.operadorComercialService.activateOperadorComercial(\n      operadorComercial.codOperador\n    );\n  }\n\n  onInactivate(index: number, operadorComercial: OperadorComercial): void {\n    this.confirmInactive()\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap(result =>\n          result\n            ? this.inactivateOperadorComercial(index, operadorComercial)\n            : EMPTY\n        ),\n        finalize(() => {\n          this.loaderNavbar = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotifyService.success();\n          this.refreshMainData(operadorComercial);\n        },\n        (error: any) => {\n          this.pnotifyService.error();\n          this.dadosPagination[index].codSituacao = 1;\n        }\n      );\n  }\n\n  confirmInactive(): any {\n    return this.confirmModalService.showConfirm(\n      'inactivate',\n      'Confirmar inativação',\n      'Deseja realmente prosseguir com a inativação do registro?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  inactivateOperadorComercial(\n    index: number,\n    operadorComercial: OperadorComercial\n  ): Observable<any> {\n    this.loaderNavbar = true;\n    this.dadosPagination[index].codSituacao = 2;\n\n    return this.operadorComercialService.inactivateOperadorComercial(\n      operadorComercial.codOperador\n    );\n  }\n\n  refreshMainData(operadorComercial: OperadorComercial): void {\n    for (let i = 0; i < this.dados.length; i++) {\n      if (operadorComercial.codOperador === this.dados[i].codOperador) {\n        this.dados[i].codSituacao = operadorComercial.codSituacao;\n        return;\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DateService {\n  months: Array<string> = [\n    'Enero',\n    'Febrero',\n    'Marzon',\n    'Abril',\n    'Mayo',\n    'Junio',\n    'Julio',\n    'Agosto',\n    'Septiembre',\n    'Octubre',\n    'Noviembre',\n    'Diciembre',\n  ];\n\n  weeks: Array<string> = [\n    'Domingo',\n    'Lunes',\n    'Martes',\n    'Miercoles',\n    'Jueves',\n    'Viernes',\n    'Sábado',\n  ];\n\n  sameDay(dateA: Date, dateB: Date): boolean {\n    return (\n      dateA.getFullYear() === dateB.getFullYear() &&\n      dateA.getMonth() === dateB.getMonth() &&\n      dateA.getDate() === dateB.getDate()\n    );\n  }\n\n  getHourMinute(date: Date): string {\n    const getHours = date.getHours();\n    const getMinutes = date.getMinutes();\n    let hours: any, minutes: any;\n\n    if (getHours < 10) {\n      hours = `0${getHours}`;\n    } else {\n      hours = getHours;\n    }\n\n    if (getMinutes < 10) {\n      minutes = `0${getMinutes}`;\n    } else {\n      minutes = getMinutes;\n    }\n\n    return `${hours}:${minutes}`;\n  }\n\n  getFullDate(dateA: Date, dateB?: Date, showTime: boolean = true): string {\n    const day = dateA.getDate();\n    const weekDay = dateA.getDay();\n    const month = dateA.getMonth();\n    const year = dateA.getFullYear();\n    const hour = this.getHourMinute(dateA);\n\n    if (showTime) {\n      if (dateB) {\n        const hourB = this.getHourMinute(dateB);\n\n        return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}, desde ${hour} hasta ${hourB}`;\n      }\n\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year} hasta ${hour}`;\n    } else {\n      return `${this.weeks[weekDay]}, ${day} de ${this.months[month]} del ${year}`;\n    }\n  }\n\n  getFullMonth(date: Date): string {\n    return this.months[date.getMonth()];\n  }\n\n  getFirstDayYear(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), 0, 1);\n  }\n\n  getLastDayYear(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), 11, 31);\n  }\n\n  getFirstDayMonth(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth(), 1);\n  }\n\n  getLastDayMonth(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n  }\n\n  getToday(): Date {\n    let date = new Date();\n    return new Date(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n\n  convert2PhpDate(date: Date): string {\n    const y = date.getFullYear();\n    let m: any = date.getMonth() + 1;\n    let d: any = date.getDate();\n    let h: any = date.getHours();\n    let i: any = date.getMinutes();\n\n    if (m < 10) m = `0${m}`;\n    if (d < 10) d = `0${d}`;\n    if (h < 10) h = `0${h}`;\n    if (i < 10) i = `0${i}`;\n\n    return `${y}-${m}-${d} ${h}:${i}`;\n  }\n\n  convertToBrazilianDate(date: Date): string {\n    let y = date.getFullYear().toString();\n    let m = (date.getMonth() + 1).toString().padStart(2, '0');\n    let d = date.getDate().toString().padStart(2, '0');\n    let h = date.getHours().toString().padStart(2, '0');\n    let i = date.getMinutes().toString().padStart(2, '0');\n    let s = date.getSeconds().toString().padStart(2, '0');\n\n    return `${d}/${m}/${y} ${h}:${i}:${s}`;\n  }\n\n  convertMysqlTime(time: string): string {\n    if (time !== null) {\n      let timeSplit = time.split(':');\n\n      return `${timeSplit[0]}:${timeSplit[1]}`;\n    }\n\n    return time;\n  }\n\n  convertToUrlDate(date: Date): string {\n    let d: any = date.getDate();\n    let m: any = date.getMonth() + 1;\n    let y: any = date.getFullYear();\n\n    if (d < 10) d = `0${d}`;\n    if (m < 10) m = `0${m}`;\n\n    return `${d}-${m}-${y}`;\n  }\n\n  convertStringToDate(stringDate: any, dateType: string): Date {\n    let date: Date;\n\n    if (stringDate.indexOf(':') > -1) {\n      const stringDateSplit = stringDate.split(' ');\n      const dateSplit = stringDateSplit[0].split('-');\n      const timeSplit = stringDateSplit[1].split(':');\n\n      if (dateType == 'latam') {\n        date = new Date(\n          dateSplit[2],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[0].substr(0, 2),\n          timeSplit[0],\n          timeSplit[1],\n          timeSplit[2]\n        );\n      } else if (dateType == 'usa') {\n        date = new Date(\n          dateSplit[0],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[2].substr(0, 2),\n          timeSplit[0],\n          timeSplit[1],\n          timeSplit[2]\n        );\n      }\n    } else {\n      const dateSplit = stringDate.split('-');\n\n      if (dateType == 'latam') {\n        date = new Date(\n          dateSplit[2],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[0].substr(0, 2)\n        );\n      } else if (dateType == 'usa') {\n        date = new Date(\n          dateSplit[0],\n          parseInt(dateSplit[1]) - 1,\n          dateSplit[2].substr(0, 2)\n        );\n      }\n    }\n\n    return date;\n  }\n\n  formatWithSlashes(stringDate: any, dateType: string): string {\n    const dateSplit = stringDate.split('-');\n    let date: string;\n\n    if (dateType == 'latam') {\n      date = `${dateSplit[2]}/${dateSplit[1]}/${dateSplit[0]}`;\n    } else if (dateType == 'usa') {\n      date = `${dateSplit[1]}/${dateSplit[2]}/${dateSplit[0]}`;\n    }\n\n    return date;\n  }\n\n  addDaysToDate(date: Date, days: number): Date {\n    return new Date(date.setDate(date.getDate() + days));\n  }\n}\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\n<app-header appTitle=\\\"Operadores comerciais\\\">\\n  <button\\n    type=\\\"button\\\"\\n    [routerLink]=\\\"['../novo']\\\">\\n    Adicionar\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onFilter()\\\">\\n    Filtrar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\n  <div class=\\\"row\\\" #scrollToFilter>\\n    <div class=\\\"col\\\">\\n      <advanced-filter>\\n        <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-2\\\">\\n              <label for=\\\"cpfCnpj\\\">CPF/CNPJ</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                formControlName=\\\"cpfCnpj\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-2\\\">\\n              <label for=\\\"rgIe\\\">RG/IE</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                formControlName=\\\"rgIe\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"nomeOperador\\\">Nome do operador</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                formControlName=\\\"nomeOperador\\\"\\n                (keydown.enter)=\\\"onFilter()\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-2\\\">\\n              <label for=\\\"codTipoOperador\\\">Tipo de operador</label>\\n              <ng-select\\n                [searchable]=\\\"true\\\"\\n                [clearable]=\\\"false\\\"\\n                [items]=\\\"tipoOperadores\\\"\\n                formControlName=\\\"codTipoOperador\\\"\\n                [virtualScroll]=\\\"true\\\"\\n                bindLabel=\\\"tipo\\\"\\n                bindValue=\\\"codTipoOperador\\\">\\n              </ng-select>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-3\\\">\\n              <label for=\\\"codEquipe\\\">Equipe de venda</label>\\n              <ng-select\\n                [searchable]=\\\"true\\\"\\n                [clearable]=\\\"false\\\"\\n                [items]=\\\"equipesVenda\\\"\\n                formControlName=\\\"codEquipe\\\"\\n                [virtualScroll]=\\\"true\\\"\\n                bindLabel=\\\"dsEquipeVenda\\\"\\n                bindValue=\\\"codEquipeVenda\\\">\\n              </ng-select>\\n            </div>\\n            <div class=\\\"form-group col-lg-3\\\">\\n              <label for=\\\"codEscritorio\\\">Escritório</label>\\n              <ng-select\\n                [searchable]=\\\"true\\\"\\n                [clearable]=\\\"false\\\"\\n                [items]=\\\"escritorios\\\"\\n                formControlName=\\\"codEscritorio\\\"\\n                [virtualScroll]=\\\"true\\\"\\n                bindLabel=\\\"nomeEscritorio\\\"\\n                bindValue=\\\"codEscritorio\\\">\\n              </ng-select>\\n            </div>\\n            <div class=\\\"form-group col-lg-3\\\">\\n              <label for=\\\"codSituacao\\\">Situação</label>\\n              <select\\n                class=\\\"form-control custom-select\\\"\\n                id=\\\"codSituacao\\\"\\n                formControlName=\\\"codSituacao\\\">\\n                <option value=\\\"0\\\">Todos</option>\\n                <option value=\\\"1\\\">Ativos</option>\\n                <option value=\\\"2\\\">Inativos</option>\\n              </select>\\n            </div>\\n            <div class=\\\"form-group col-lg-3\\\">\\n              <label for=\\\"registros\\\">Registros</label>\\n              <select\\n                class=\\\"form-control\\\"\\n                id=\\\"registros\\\"\\n                formControlName=\\\"registros\\\">\\n                <option>25</option>\\n                <option>50</option>\\n                <option>100</option>\\n                <option>200</option>\\n                <option>300</option>\\n              </select>\\n            </div>\\n          </div>\\n        </form>\\n      </advanced-filter>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <subtitles\\n        [data]=\\\"subtitles\\\"\\n        [show]=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\n      </subtitles>\\n    </div>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col\\\">\\n      <custom-table [config]=\\\"tableConfig\\\" *ngIf=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\n        <ng-template #thead let-thead>\\n          <tr>\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\n              <thead-sorter\\n                value=\\\"Nome do operador\\\"\\n                [active]=\\\"orderBy == 'nomeOperador'\\\"\\n                [sort]=\\\"orderType\\\"\\n                (click)=\\\"setOrderBy('nomeOperador')\\\">\\n              </thead-sorter>\\n            </th>\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\n              <thead-sorter\\n                value=\\\"Tipo\\\"\\n                [active]=\\\"orderBy == 'descTipoOperador'\\\"\\n                [sort]=\\\"orderType\\\"\\n                (click)=\\\"setOrderBy('descTipoOperador')\\\">\\n              </thead-sorter>\\n            </th>\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\n              <thead-sorter\\n                value=\\\"Equipe\\\"\\n                [active]=\\\"orderBy == 'nomeEquipe'\\\"\\n                [sort]=\\\"orderType\\\"\\n                (click)=\\\"setOrderBy('nomeEquipe')\\\">\\n              </thead-sorter>\\n            </th>\\n            <th scope=\\\"col\\\" class=\\\"hover\\\">\\n              <thead-sorter\\n                value=\\\"Escritório\\\"\\n                [active]=\\\"orderBy == 'nomeEscritorio'\\\"\\n                [sort]=\\\"orderType\\\"\\n                (click)=\\\"setOrderBy('nomeEscritorio')\\\">\\n              </thead-sorter>\\n            </th>\\n            <th scope=\\\"col\\\"></th>\\n          </tr>\\n        </ng-template>\\n        <ng-template #tbody let-tbody>\\n          <tr *ngFor=\\\"let operadorComercial of dadosPagination; let i = index\\\">\\n            <td [ngClass]=\\\"classStatusBorder(operadorComercial)\\\">\\n              {{ operadorComercial.nomeCompleto | uppercase }}\\n            </td>\\n            <td>{{ operadorComercial.descTipoOperador | uppercase }}</td>\\n            <td>{{ operadorComercial.nomeEquipe | uppercase }}</td>\\n            <td>{{ operadorComercial.nomeEscritorio | uppercase }}</td>\\n            <td class=\\\"text-right\\\">\\n              <span *ngIf=\\\"operadorComercial.codSituacao == 1\\\" class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onInactivate(i, operadorComercial)\\\">\\n                  <i class=\\\"fas fa-toggle-on\\\"></i>\\n                </button>\\n              </span>\\n              <span *ngIf=\\\"operadorComercial.codSituacao == 2\\\" class=\\\"mr-3\\\" tooltip=\\\"Ativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onActivate(i, operadorComercial)\\\">\\n                  <i class=\\\"fas fa-toggle-off\\\"></i>\\n                </button>\\n              </span>\\n              <span class=\\\"mr-3\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onEdit(operadorComercial)\\\">\\n                  <i class=\\\"fas fa-edit\\\"></i>\\n                </button>\\n              </span>\\n            </td>\\n          </tr>\\n        </ng-template>\\n      </custom-table>\\n      <empty-result\\n        message=\\\"Nenhuma informação encontrada\\\"\\n        class=\\\"my-3\\\"\\n        *ngIf=\\\"dadosEmpty\\\">\\n      </empty-result>\\n      <div class=\\\"d-flex justify-content-center mt-3\\\" *ngIf=\\\"totalItems > itemsPerPage && dadosLoaded\\\">\\n        <pagination\\n          [maxSize]=\\\"maxSize\\\"\\n          [(totalItems)]=\\\"totalItems\\\"\\n          (pageChanged)=\\\"onPageChanged($event)\\\"\\n          [(itemsPerPage)]=\\\"itemsPerPage\\\"\\n          [boundaryLinks]=\\\"true\\\"\\n          [(ngModel)]=\\\"currentPage\\\"\\n          previousText=\\\"&lsaquo;\\\"\\n          nextText=\\\"&rsaquo;\\\"\\n          firstText=\\\"&laquo;\\\"\\n          lastText=\\\"&raquo;\\\">\\n        </pagination>\\n      </div>\\n    </div>\\n  </div>\\n</app-body>\\n\";","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { take, retry } from 'rxjs/operators';\n\nimport { environment } from 'src/environments/environment';\n\n// Interfaces\nimport { JsonResponse } from 'src/app/models/json-response';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ComercialService {\n  private readonly API = `https://crm360.monterrey.com.bo/api/comercial`;\n\n  constructor(protected http: HttpClient) {}\n\n  getEmpresas(params?: any): Observable<Object> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/empresas`, {\n        params: httpParams,\n      })\n      .pipe(take(1), retry(2));\n  }\n\n  getDepositos(params: any): Observable<Object> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/depositos`, {\n        params: httpParams,\n      })\n      .pipe(take(1), retry(2));\n  }\n\n  getLinhas(params: any): Observable<Object> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/linhas`, {\n        params: httpParams,\n      })\n      .pipe(take(1), retry(2));\n  }\n\n  getClasses(params: any): Observable<Object> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/classes`, {\n        params: httpParams,\n      })\n      .pipe(take(1), retry(2));\n  }\n\n  getMateriais(params: any = []): Observable<Object | JsonResponse> {\n    let httpParams = new HttpParams();\n\n    for (let param in params) {\n      httpParams = httpParams.append(param, params[param]);\n    }\n\n    return this.http\n      .get(`${this.API}/materiais`, { params: httpParams })\n      .pipe(take(1), retry(2));\n  }\n\n  getPerfil(): Observable<Object> {\n    return this.http.get(`${this.API}/perfil`).pipe(take(1), retry(2));\n  }\n\n  getEscritorios(): Observable<Object> {\n    return this.http.get(`${this.API}/escritorios`).pipe(take(1), retry(2));\n  }\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvbGlzdGEvbGlzdGEuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvYXNzb2NpYWNvZXMvYXNzb2NpYWNvZXMuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9vcGVyYWRvcmVzLWNvbWVyY2lhaXMvZm9ybXVsYXJpby9mb3JtdWxhcmlvLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Injectable } from '@angular/core';\nimport {\n  CanDeactivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  UrlTree\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\n// Interfaces\nimport { IFormCanDeactivate } from './iform-candeactivate';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormDeactivateGuard implements CanDeactivate<IFormCanDeactivate> {\n  canDeactivate(\n    component: IFormCanDeactivate,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    return component.formCanDeactivate();\n  }\n}\n","import {\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  Input,\n  SimpleChanges,\n  OnChanges,\n} from '@angular/core';\nimport {\n  FormGroup,\n  FormBuilder,\n  Validators,\n  AbstractControl,\n} from '@angular/forms';\nimport { finalize, take, switchMap } from 'rxjs/operators';\nimport { forkJoin, Observable, EMPTY } from 'rxjs';\n\n// ngx-bootstrap\nimport { BsModalRef, BsModalService } from 'ngx-bootstrap/modal';\nimport { BsLocaleService, BsDatepickerConfig } from 'ngx-bootstrap/datepicker';\nimport { defineLocale } from 'ngx-bootstrap/chronos';\nimport { ptBrLocale } from 'ngx-bootstrap/locale';\n\ndefineLocale('pt-br', ptBrLocale);\n\n// Services\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\nimport { ComercialCadastrosOperadorComercialService } from '../operadores-comerciais.service';\nimport { ComercialCadastrosMotivoAssociacaoService } from '../../motivo-associacao/motivo-associacao.service';\n\n// Interfaces\nimport { AssociacaoOperadorComercial } from '../models/associacao-operador-comercial';\nimport { MotivoAssociacao } from '../../motivo-associacao/models/motivo-associacao';\nimport { OperadorComercial } from '../models/operador-comercial';\n\n@Component({\n  selector: 'comercial-cadastros-operadores-comerciais-associacoes',\n  templateUrl: './associacoes.component.html',\n  styleUrls: ['./associacoes.component.scss'],\n})\nexport class ComercialCadastrosOperadorComercialAssociacoesComponent\n  implements OnInit, OnChanges\n{\n  @Input('codOperador') codOperador: number;\n  @Input('showModal') showModal = false;\n  @ViewChild('modalAssociacoes', {}) modalAssociacoes: TemplateRef<any>;\n  @ViewChild('modalHistoricoAssociacoes', {})\n  modalHistoricoAssociacoes: TemplateRef<any>;\n\n  bsConfig: Partial<BsDatepickerConfig>;\n\n  form: FormGroup;\n  submittingForm: boolean;\n\n  showLoader: boolean;\n\n  associacoes: Array<AssociacaoOperadorComercial> = [];\n  associacoesLoaded = false;\n  associacoesEmpty = false;\n\n  historicoAssociacoes: Array<any> = [];\n  historicoAssociacoesLoaded = false;\n\n  modalRef: BsModalRef;\n\n  dependenciesLoaded = false;\n  operadores: Array<OperadorComercial> = [];\n  motivosAssociacao: Array<MotivoAssociacao> = [];\n\n  constructor(\n    private localeService: BsLocaleService,\n    private formBuilder: FormBuilder,\n    private modalService: BsModalService,\n    private pnotifyService: PNotifyService,\n    private confirmModalService: ConfirmModalService,\n    private operadorComercialService: ComercialCadastrosOperadorComercialService,\n    private motivosAssociacaoService: ComercialCadastrosMotivoAssociacaoService\n  ) {\n    this.localeService.use('pt-br');\n    this.bsConfig = Object.assign(\n      {},\n      { containerClass: 'theme-dark-blue' },\n      { adaptivePosition: true },\n      { showWeekNumbers: false }\n    );\n    this.pnotifyService.getPNotify();\n  }\n\n  ngOnInit(): void {\n    this.checkAssociacoes();\n    this.setFormBuilder();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.showModal.currentValue === true) {\n      this.onAdd();\n    }\n  }\n\n  setFormBuilder(): void {\n    this.form = this.formBuilder.group({\n      operadores: [null, [Validators.required]],\n      motivoAssociacao: [null, [Validators.required]],\n      dataInicio: [null, [Validators.required]],\n      dataTermino: [null],\n    });\n  }\n\n  checkAssociacoes(): void {\n    if (this.codOperador !== null) {\n      this.getAssociacoesOperadores();\n    }\n  }\n\n  getAssociacoesOperadores(): void {\n    this.associacoes = [];\n    this.associacoesEmpty = false;\n    this.associacoesLoaded = false;\n    this.historicoAssociacoes = [];\n    this.historicoAssociacoesLoaded = false;\n\n    this.operadorComercialService\n      .getAssociacoesOperadores(this.codOperador)\n      .pipe(\n        finalize(() => {\n          this.associacoesLoaded = true;\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (response.hasOwnProperty('success') && response.success === true) {\n            this.associacoes = response.data;\n          } else {\n            this.associacoesEmpty = true;\n          }\n        },\n        error: (error: any) => {\n          this.associacoesEmpty = true;\n        }\n      });\n  }\n\n  onReloadAssociacoes(): void {\n    this.getAssociacoesOperadores();\n  }\n\n  onAdd(): void {\n    if (this.dependenciesLoaded === false) {\n      this.getFormFields();\n    } else {\n      this.openModal(this.modalAssociacoes);\n    }\n  }\n\n  getFormFields(): void {\n    this.showLoader = true;\n    this.operadores = [];\n    this.motivosAssociacao = [];\n\n    this.loadDepencencies()\n      .pipe(\n        finalize(() => {\n          this.showLoader = false;\n        })\n      )\n      .subscribe({\n        next: (response: any) => {\n          if (\n            response[0].hasOwnProperty('success') &&\n            response[0].success === true\n          ) {\n            if (\n              response[1].hasOwnProperty('success') &&\n              response[1].success === true\n            ) {\n              this.operadores = response[0].data;\n              this.motivosAssociacao = response[1].data;\n              this.dependenciesLoaded = true;\n              this.openModal(this.modalAssociacoes);\n            } else {\n              this.pnotifyService.error('A operação não pode ser realizada.');\n            }\n          } else {\n            this.pnotifyService.error('A operação não pode ser realizada.');\n          }\n        },\n        error: (error: any) => {\n          this.pnotifyService.error('A operação não pode ser realizada.');\n        }\n      });\n  }\n\n  loadDepencencies(): Observable<any> {\n    const operadores =\n      this.operadorComercialService.getListaOperadoresComerciais({\n        codSituacao: 1,\n      });\n    const motivosAssociacao =\n      this.motivosAssociacaoService.getListaMotivosAssociacao({\n        codSituacao: 1,\n      });\n\n    return forkJoin([operadores, motivosAssociacao]).pipe(take(1));\n  }\n\n  onDelete(associacaoOperadorComercial: AssociacaoOperadorComercial): void {\n    this.confirmDelete()\n      .asObservable()\n      .pipe(\n        take(1),\n        switchMap((result) =>\n          result\n            ? this.deleteAssociacaoOperador(associacaoOperadorComercial)\n            : EMPTY\n        ),\n        finalize(() => {\n          this.showLoader = false;\n        })\n      )\n      .subscribe(\n        (success: any) => {\n          this.pnotifyService.success();\n          this.onReloadAssociacoes();\n        },\n        (error: any) => {\n          this.pnotifyService.error();\n        }\n      );\n  }\n\n  confirmDelete(): any {\n    return this.confirmModalService.showConfirm(\n      'inactivate',\n      'Confirmar inativação',\n      'Deseja realmente prosseguir com a inativação da associação?',\n      'Cancelar',\n      'Confirmar'\n    );\n  }\n\n  deleteAssociacaoOperador(\n    associacaoOperadorComercial: AssociacaoOperadorComercial\n  ): Observable<any> {\n    this.showLoader = true;\n\n    return this.operadorComercialService.deleteAssociacaoOperador({\n      codAssociacao: associacaoOperadorComercial.codAssociacao,\n      codOperador: associacaoOperadorComercial.codOperador,\n    });\n  }\n\n  openModal(template: TemplateRef<any>, customClass?: string): void {\n    let config = {\n      keyboard: false,\n      ignoreBackdropClick: true,\n    };\n\n    if (customClass) {\n      Object.assign(config, { class: customClass });\n    }\n\n    this.modalRef = this.modalService.show(template, config);\n  }\n\n  hideModal(): void {\n    this.modalRef.hide();\n    this.form.reset();\n  }\n\n  onFieldError(field: string): string {\n    if (this.onFieldInvalid(field)) {\n      return 'is-invalid';\n    }\n\n    return '';\n  }\n\n  onFieldInvalid(field: any): boolean {\n    field = this.form.get(field);\n\n    return field.status == 'INVALID' && field.touched;\n  }\n\n  onFieldRequired(\n    abstractControl: AbstractControl,\n    abstractControlField?: string\n  ): string {\n    if (abstractControl.validator) {\n      const validator = abstractControl.validator({} as AbstractControl);\n      if (validator && validator.required) {\n        return 'is-required';\n      }\n    }\n\n    if (abstractControlField) {\n      for (const controlName in abstractControl['controls']) {\n        if (abstractControl['controls'][controlName]) {\n          if (\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\n            controlName == abstractControlField\n          ) {\n            return 'is-required';\n          }\n        }\n      }\n    }\n\n    return '';\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.submittingForm = true;\n\n      this.operadorComercialService\n        .postAssociacaoOperador(\n          Object.assign(this.form.value, { codOperador: this.codOperador })\n        )\n        .pipe(\n          finalize(() => {\n            this.submittingForm = false;\n          })\n        )\n        .subscribe({\n          next: (response: any) => {\n            if (\n              response.hasOwnProperty('mensagem') &&\n              response.hasOwnProperty('success') &&\n              response.success === true\n            ) {\n              this.pnotifyService.success(response.mensagem);\n              this.hideModal();\n              this.getAssociacoesOperadores();\n            } else if (\n              response.hasOwnProperty('mensagem') &&\n              response.hasOwnProperty('success') &&\n              response.success === false\n            ) {\n              this.pnotifyService.notice(response.mensagem);\n            } else {\n              this.pnotifyService.error();\n            }\n          },\n          error: (error: any) => {\n            this.pnotifyService.error();\n          }\n        });\n    }\n  }\n\n  onHistorico(): void {\n    if (this.historicoAssociacoesLoaded === false) {\n      this.showLoader = true;\n\n      this.operadorComercialService\n        .getHistoricoAssociacoes(this.codOperador)\n        .pipe(\n          finalize(() => {\n            this.showLoader = false;\n          })\n        )\n        .subscribe({\n          next: (response: any) => {\n            if (\n              response.hasOwnProperty('mensagem') &&\n              response.hasOwnProperty('success') &&\n              response.success === true\n            ) {\n              this.historicoAssociacoes = response.data;\n              this.historicoAssociacoesLoaded = true;\n              this.openModal(this.modalHistoricoAssociacoes, 'modal-xxl');\n            } else if (\n              response.hasOwnProperty('mensagem') &&\n              response.hasOwnProperty('success') &&\n              response.success === false\n            ) {\n              this.pnotifyService.notice(response.mensagem);\n            } else {\n              this.pnotifyService.error();\n            }\n          },\n          error: (error: any) => {\n            this.pnotifyService.error();\n          }\n        });\n    } else {\n      this.openModal(this.modalHistoricoAssociacoes, 'modal-xxl');\n    }\n  }\n}\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\n<app-header [appTitle]=\\\"appTitle\\\">\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onCancel()\\\"\\n    [disabled]=\\\"submittingForm\\\">\\n    Cancelar\\n  </button>\\n  <button\\n    type=\\\"button\\\"\\n    (click)=\\\"onSubmit()\\\"\\n    [disabled]=\\\"!form.valid || submittingForm\\\">\\n    Salvar\\n  </button>\\n</app-header>\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\n  <div class=\\\"row justify-content-center\\\">\\n    <div class=\\\"col-lg-5\\\">\\n      <form [formGroup]=\\\"form\\\">\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"nomeOperador\\\">Nome</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"nomeOperador\\\"\\n              formControlName=\\\"nomeOperador\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('nomeOperador') + ' ' + onFieldRequired(form.controls.nomeOperador)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('nomeOperador')\\\" message=\\\"Nome é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"sobrenomeOperador\\\">Sobrenome</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"sobrenomeOperador\\\"\\n              formControlName=\\\"sobrenomeOperador\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('sobrenomeOperador') + ' ' + onFieldRequired(form.controls.sobrenomeOperador)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('sobrenomeOperador')\\\" message=\\\"Sobrenome é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"codTipoOperador\\\">Tipo de operador</label>\\n            <ng-select\\n              [searchable]=\\\"true\\\"\\n              [clearable]=\\\"false\\\"\\n              [items]=\\\"tipoOperadores\\\"\\n              formControlName=\\\"codTipoOperador\\\"\\n              [virtualScroll]=\\\"true\\\"\\n              bindLabel=\\\"tipo\\\"\\n              bindValue=\\\"codTipoOperador\\\"\\n              [ngClass]=\\\"onFieldError('codTipoOperador') + ' ' + onFieldRequired(form.controls.codTipoOperador)\\\">\\n            </ng-select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codTipoOperador')\\\" message=\\\"Tipo de operador é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"codSituacao\\\">Situação</label>\\n            <select\\n              class=\\\"form-control custom-select\\\"\\n              id=\\\"codSituacao\\\"\\n              formControlName=\\\"codSituacao\\\"\\n              [ngClass]=\\\"onFieldError('codSituacao') + ' ' + onFieldRequired(form.controls.codSituacao)\\\">\\n              <option value=\\\"1\\\">Ativo</option>\\n              <option value=\\\"2\\\">Inativo</option>\\n            </select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codSituacao')\\\" message=\\\"Situação é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"codEquipe\\\">Equipe de vendas</label>\\n            <ng-select\\n              [searchable]=\\\"true\\\"\\n              [clearable]=\\\"false\\\"\\n              [items]=\\\"equipesVenda\\\"\\n              formControlName=\\\"codEquipe\\\"\\n              [virtualScroll]=\\\"true\\\"\\n              bindLabel=\\\"dsEquipeVenda\\\"\\n              bindValue=\\\"codEquipeVenda\\\"\\n              [ngClass]=\\\"onFieldError('codEquipe') + ' ' + onFieldRequired(form.controls.codEquipe)\\\">\\n            </ng-select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codEquipe')\\\" message=\\\"Equipe de venda é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"codEscritorio\\\">Escritório</label>\\n            <ng-select\\n              [searchable]=\\\"true\\\"\\n              [clearable]=\\\"false\\\"\\n              [items]=\\\"escritorios\\\"\\n              formControlName=\\\"codEscritorio\\\"\\n              [virtualScroll]=\\\"true\\\"\\n              bindLabel=\\\"nome\\\"\\n              bindValue=\\\"id\\\"\\n              [ngClass]=\\\"onFieldError('codEscritorio') + ' ' + onFieldRequired(form.controls.codEscritorio)\\\">\\n            </ng-select>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codEscritorio')\\\" message=\\\"Escritório é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-12\\\">\\n            <label>Tipo de pessoa</label>\\n          </div>\\n          <div class=\\\"form-group col-12\\\">\\n            <div class=\\\"custom-control custom-radio custom-control-inline\\\" (click)=\\\"setType('F')\\\">\\n              <input\\n                type=\\\"radio\\\"\\n                id=\\\"tipoPessoaF\\\"\\n                name=\\\"tipoPessoa\\\"\\n                class=\\\"custom-control-input\\\"\\n                value=\\\"F\\\"\\n                formControlName=\\\"tipoPessoa\\\">\\n              <label class=\\\"custom-control-label\\\" for=\\\"tipoPessoaF\\\">Pessoa física</label>\\n            </div>\\n            <div class=\\\"custom-control custom-radio custom-control-inline\\\" (click)=\\\"setType('J')\\\">\\n              <input\\n                type=\\\"radio\\\"\\n                id=\\\"tipoPessoaJ\\\"\\n                name=\\\"tipoPessoa\\\"\\n                class=\\\"custom-control-input\\\"\\n                value=\\\"J\\\"\\n                formControlName=\\\"tipoPessoa\\\">\\n              <label class=\\\"custom-control-label\\\" for=\\\"tipoPessoaJ\\\">Pessoa jurídica</label>\\n            </div>\\n            <invalid-form-control [show]=\\\"onFieldInvalid('tipoPessoa')\\\" message=\\\"Tipo de pessoa é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\" *ngIf=\\\"form.value.tipoPessoa === 'F'\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"cpf\\\">CPF</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"cpf\\\"\\n              formControlName=\\\"cpf\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('cpf') + ' ' + onFieldRequired(form.controls.cpf)\\\"\\n              cpf [textMask]=\\\"{ mask: MASKS.cpf.textMask }\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('cpf')\\\" message=\\\"CPF é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"rg\\\">RG</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"rg\\\"\\n              formControlName=\\\"rg\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('rg') + ' ' + onFieldRequired(form.controls.rg)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('rg')\\\" message=\\\"RG é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\" *ngIf=\\\"form.value.tipoPessoa === 'J'\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"cnpj\\\">CNPJ</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"cnpj\\\"\\n              formControlName=\\\"cnpj\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('cnpj') + ' ' + onFieldRequired(form.controls.cnpj)\\\"\\n              cnpj [textMask]=\\\"{ mask: MASKS.cnpj.textMask }\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('cnpj')\\\" message=\\\"CNPJ é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"ie\\\">Inscrição estadual</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"ie\\\"\\n              formControlName=\\\"ie\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('ie') + ' ' + onFieldRequired(form.controls.ie)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('ie')\\\" message=\\\"Inscrição estadual é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"telefone\\\">Telefone</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"telefone\\\"\\n              formControlName=\\\"telefone\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('telefone') + ' ' + onFieldRequired(form.controls.telefone)\\\"\\n              telefone [textMask]=\\\"{ mask: MASKS.telefone.textMaskFunction }\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('telefone')\\\" message=\\\"Telefone é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n          <div class=\\\"form-group col-lg-6\\\">\\n            <label for=\\\"celular\\\">Celular</label>\\n            <input\\n              type=\\\"text\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"celular\\\"\\n              formControlName=\\\"celular\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('celular') + ' ' + onFieldRequired(form.controls.celular)\\\"\\n              telefone [textMask]=\\\"{ mask: MASKS.telefone.textMaskFunction }\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('celular')\\\" message=\\\"Celular é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div class=\\\"form-row\\\">\\n          <div class=\\\"form-group col\\\">\\n            <label for=\\\"email\\\">E-mail</label>\\n            <input\\n              type=\\\"email\\\"\\n              class=\\\"form-control\\\"\\n              id=\\\"email\\\"\\n              formControlName=\\\"email\\\"\\n              (input)=\\\"onInput()\\\"\\n              autocomplete=\\\"new-password\\\"\\n              [ngClass]=\\\"onFieldError('email') + ' ' + onFieldRequired(form.controls.email)\\\">\\n            <invalid-form-control [show]=\\\"onFieldInvalid('email')\\\" message=\\\"E-mail é obrigatório.\\\"></invalid-form-control>\\n          </div>\\n        </div>\\n        <div formGroupName=\\\"endereco\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\"><hr></div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\">\\n              <div class=\\\"mtc-title\\\">Endereço</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"cep\\\">CEP</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"cep\\\"\\n                formControlName=\\\"cep\\\"\\n                (input)=\\\"onInput(); onInputCep();\\\"\\n                autocomplete=\\\"new-password\\\"\\n                [ngClass]=\\\"onFieldError('endereco.cep') + ' ' + onFieldRequired(form.controls.endereco, 'cep')\\\"\\n                cep [textMask]=\\\"{mask: MASKS.cep.textMask}\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.cep')\\\" message=\\\"CEP é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"logradouro\\\">Endereço</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"logradouro\\\"\\n                formControlName=\\\"logradouro\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\"\\n                [ngClass]=\\\"onFieldError('endereco.logradouro') + ' ' + onFieldRequired(form.controls.endereco, 'logradouro')\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.logradouro')\\\" message=\\\"Endereço é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"numero\\\">Número</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"numero\\\"\\n                formControlName=\\\"numero\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\"\\n                [ngClass]=\\\"onFieldError('endereco.numero') + ' ' + onFieldRequired(form.controls.endereco, 'numero')\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.numero')\\\" message=\\\"Número é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"complemento\\\">Complemento</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"complemento\\\"\\n                formControlName=\\\"complemento\\\"\\n                autocomplete=\\\"new-password\\\">\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"referencia\\\">Referência</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"referencia\\\"\\n                formControlName=\\\"referencia\\\"\\n                autocomplete=\\\"new-password\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"bairro\\\">Bairro</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"bairro\\\"\\n                formControlName=\\\"bairro\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\"\\n                [ngClass]=\\\"onFieldError('endereco.bairro') + ' ' + onFieldRequired(form.controls.endereco, 'bairro')\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.bairro')\\\" message=\\\"Bairro é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"numero\\\">Cidade</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"cidade\\\"\\n                formControlName=\\\"cidade\\\"\\n                (input)=\\\"onInput()\\\"\\n                [ngClass]=\\\"onFieldError('endereco.cidade') + ' ' + onFieldRequired(form.controls.endereco, 'cidade')\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.cidade')\\\" message=\\\"Cidade é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"estado\\\">Estado</label>\\n              <select\\n                class=\\\"form-control\\\"\\n                id=\\\"estado\\\"\\n                formControlName=\\\"estado\\\"\\n                (change)=\\\"onInput()\\\"\\n                [ngClass]=\\\"onFieldError('endereco.estado') + ' ' + onFieldRequired(form.controls.endereco, 'estado')\\\">\\n                <option value=\\\"\\\">SELECIONE UMA OPÇÃO</option>\\n                <option *ngFor=\\\"let item of estados\\\" [value]=\\\"item.sigla\\\">{{ item.descricao }}</option>\\n              </select>\\n              <invalid-form-control [show]=\\\"onFieldInvalid('endereco.estado')\\\" message=\\\"Estado é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n          </div>\\n        </div>\\n        <div formGroupName=\\\"dadosBancarios\\\">\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\"><hr></div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\">\\n              <div class=\\\"mtc-title\\\">Dados bancários</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\">\\n              <label for=\\\"banco\\\">Banco</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"banco\\\"\\n                formControlName=\\\"banco\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\">\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"agencia\\\">Agência</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"agencia\\\"\\n                formControlName=\\\"agencia\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\">\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"contaCorrente\\\">Conta corrente</label>\\n              <input\\n                type=\\\"text\\\"\\n                class=\\\"form-control\\\"\\n                id=\\\"contaCorrente\\\"\\n                formControlName=\\\"contaCorrente\\\"\\n                (input)=\\\"onInput()\\\"\\n                autocomplete=\\\"new-password\\\">\\n            </div>\\n          </div>\\n        </div>\\n        <div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\"><hr></div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col\\\">\\n              <div class=\\\"mtc-title\\\">Contrato</div>\\n            </div>\\n          </div>\\n          <div class=\\\"form-row\\\">\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"dataInicioContrato\\\">Início</label>\\n              <input\\n                class=\\\"form-control\\\"\\n                id=\\\"dataInicioContrato\\\"\\n                type=\\\"text\\\"\\n                bsDatepicker\\n                [bsConfig]=\\\"bsConfig\\\"\\n                formControlName=\\\"dataInicioContrato\\\"\\n                [ngClass]=\\\"onFieldError('dataInicioContrato') + ' ' + onFieldRequired(form.controls.dataInicioContrato)\\\">\\n              <invalid-form-control [show]=\\\"onFieldInvalid('dataInicioContrato')\\\" message=\\\"Início do contrato é obrigatório.\\\"></invalid-form-control>\\n            </div>\\n            <div class=\\\"form-group col-lg-6\\\">\\n              <label for=\\\"dataFinalContrato\\\">Término</label>\\n              <input\\n                class=\\\"form-control\\\"\\n                id=\\\"dataFinalContrato\\\"\\n                type=\\\"text\\\"\\n                bsDatepicker\\n                [bsConfig]=\\\"bsConfig\\\"\\n                formControlName=\\\"dataFinalContrato\\\">\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n    </div>\\n  </div>\\n  <div *ngIf=\\\"codOperador !== null\\\">\\n    <comercial-cadastros-operadores-comerciais-associacoes\\n      [codOperador]=\\\"codOperador\\\"\\n      [showModal]=\\\"showModalAssociacoes\\\">\\n    </comercial-cadastros-operadores-comerciais-associacoes>\\n  </div>\\n</app-body>\\n\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// ngx-bootstrap\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\nimport { BsDatepickerModule } from 'ngx-bootstrap/datepicker';\n\n// ng-select\nimport { NgSelectModule } from '@ng-select/ng-select';\n\n// ng-brazil\nimport { TextMaskModule } from 'angular2-text-mask';\nimport { NgBrazil } from 'ng-brazil';\n\n// PNotify\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\n\n// Modules\nimport { ComercialCadastrosOperadorComercialModuleRoutingModule } from './operadores-comerciais-routing.module';\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\n\n// Components\nimport { ComercialCadastrosOperadorComercialListaComponent } from './lista/lista.component';\nimport { ComercialCadastrosOperadorComercialFormularioComponent } from './formulario/formulario.component';\nimport { ComercialCadastrosOperadorComercialAssociacoesComponent } from './associacoes/associacoes.component';\n\n@NgModule({\n  declarations: [\n    ComercialCadastrosOperadorComercialListaComponent,\n    ComercialCadastrosOperadorComercialFormularioComponent,\n    ComercialCadastrosOperadorComercialAssociacoesComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    PaginationModule.forRoot(),\n    TooltipModule.forRoot(),\n    BsDatepickerModule.forRoot(),\n    NgSelectModule,\n    TextMaskModule,\n    NgBrazil,\n    ComercialCadastrosOperadorComercialModuleRoutingModule,\n    SharedModule,\n    TemplatesModule\n  ],\n  providers: [PNotifyService]\n})\nexport class ComercialCadastrosOperadorComercialModule {}\n"]}