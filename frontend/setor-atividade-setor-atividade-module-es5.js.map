{"version":3,"sources":["webpack:///src/app/modules/comercial/cadastros/setor-atividade/formulario/formulario.component.html","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/formulario/formulario-resolver.guard.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/lista/lista.component.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/lista/lista.component.html","webpack:///src/app/modules/comercial/cadastros/setor-atividade/setor-atividade.service.ts","webpack:///src/app/guards/form-deactivate.guard.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/lista/lista.component.scss","webpack:///src/app/modules/comercial/cadastros/setor-atividade/formulario/formulario.component.scss","webpack:///src/app/modules/comercial/cadastros/setor-atividade/setor-atividade-routing.module.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/formulario/formulario.component.ts","webpack:///src/app/modules/comercial/cadastros/setor-atividade/setor-atividade.module.ts"],"names":["ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","show","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","providedIn","ComercialCadastrosSetorAtividadeFormularioResolverGuard","setorAtividadeService","route","params","id","getDetalhes","success","data","codSetorAtividade","setorAtividade","codParametroSetorAtividade","codSituacao","situacao","ComercialCadastrosSetorAtividadeListaComponent","activatedRoute","router","location","formBuilder","pnotifyService","atividadesService","titleService","confirmModalService","detailPanelService","loaderNavbar","loaderFullScreen","breadCrumbTree","subtitles","text","color","tableConfig","subtitleBorder","showDetailPanel","orderBy","orderType","maxSize","itemsPerPage","currentPage","totalItems","dados","dadosPagination","dadosLoaded","dadosEmpty","alteracoes","getPNotify","registrarAcesso","setBreadCrumb","setFormFilter","setTitle","onDetailPanelEmitter","setSetorAtividadeSelecionado","showDetailPanelSubscription","unsubscribe","subscribe","descricao","routerLink","config","event","showing","formValue","checkRouterParams","form","group","pagina","registros","required","checkOrder","activatedRouteSubscription","queryParams","Object","keys","length","atob","JSON","parse","search","forEach","formKey","paramKey","isNaN","Number","value","setorAtividadeSelecionado","field","onFieldInvalid","get","status","touched","abstractControl","abstractControlField","validator","controlName","onFieldRequired","column","onFilter","valid","setRouterParams","verificaParams","navigate","relativeTo","q","btoa","stringify","hide","getListaSetorAtividade","pipe","next","response","hasOwnProperty","slice","error","mensagem","borderClass","startItem","page","endItem","scrollToFilter","nativeElement","scrollIntoView","behavior","getAlteracoes","setTimeout","loadedFinished","index","confirmActivate","asObservable","result","activateSituacaoProposta","refreshMainData","showConfirm","activateSetorAtividade","confirmInactive","inactivateSituacaoProposta","inactivateSetorAtividade","i","selector","template","ComercialCadastrosSetorAtividadeService","http","API","httpParams","param","append","codSituacaoProposta","post","put","updateSetorAtividade","saveSetorAtividade","codigo","FormDeactivateGuard","component","state","formCanDeactivate","routes","path","resolve","detalhes","canDeactivate","redirectTo","pathMatch","ComercialCadastrosSetorAtividadeModuleRoutingModule","imports","forChild","exports","ComercialCadastrosSetorAtividadeFormularioComponent","formChanged","setorAtividadesTid","getFormFields","setFormBuilder","appTitle","idSubModulo","getListaSetorAtividadeTid","snapshot","back","pristine","submittingForm","save","reset","notice","confirm","ComercialCadastrosSetorAtividadeModule","declarations","forRoot","providers"],"mappings":"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","file":"setor-atividade-setor-atividade-module-es5.js","sourcesContent":["export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header [appTitle]=\\\"appTitle\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onCancel()\\\"\\r\\n    [disabled]=\\\"submittingForm\\\">\\r\\n    Cancelar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onSubmit()\\\"\\r\\n    [disabled]=\\\"!form.valid || submittingForm\\\">\\r\\n    Salvar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n  <div class=\\\"row justify-content-center\\\">\\r\\n    <div class=\\\"col-lg-4\\\">\\r\\n      <form [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"situacaoProposta\\\">Descrição</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"setorAtividade\\\"\\r\\n              formControlName=\\\"setorAtividade\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('setorAtividade') + ' ' + onFieldRequired(form.controls.setorAtividade)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('setorAtividade')\\\" message=\\\"Setor de Atividade é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"codParametroSetorAtividade\\\">Descrição TID</label>\\r\\n            <ng-select\\r\\n              [searchable]=\\\"true\\\"\\r\\n              [clearable]=\\\"false\\\"\\r\\n              [items]=\\\"setorAtividadesTid\\\"\\r\\n              [virtualScroll]=\\\"true\\\"\\r\\n              labelForId=\\\"codParametroSetorAtividade\\\"\\r\\n              bindLabel=\\\"setorAtividade\\\"\\r\\n              bindValue=\\\"codSetorAtividade\\\"\\r\\n              formControlName=\\\"codParametroSetorAtividade\\\"\\r\\n              [ngClass]=\\\"onFieldError('codParametroSetorAtividade') + ' ' + onFieldRequired(form.controls.codParametroSetorAtividade)\\\">\\r\\n            </ng-select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"codSituacao\\\">Situação</label>\\r\\n            <select\\r\\n              class=\\\"form-control custom-select\\\"\\r\\n              id=\\\"codSituacao\\\"\\r\\n              formControlName=\\\"codSituacao\\\"\\r\\n              [ngClass]=\\\"onFieldError('codSituacao') + ' ' + onFieldRequired(form.controls.codSituacao)\\\">\\r\\n              <option value=\\\"1\\\">Ativo</option>\\r\\n              <option value=\\\"2\\\">Inativo</option>\\r\\n            </select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codSituacao')\\\" message=\\\"Situação é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</app-body>\\r\\n\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { BsModalService } from 'ngx-bootstrap/modal';\r\n\r\n// Components\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfirmModalService {\r\n  constructor(private modalService: BsModalService) {}\r\n\r\n  showConfirm(\r\n    type: string,\r\n    title: string,\r\n    message: string,\r\n    cancelTxt?: string,\r\n    okTxt?: string\r\n  ) {\r\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\r\n      animated: false,\r\n      ignoreBackdropClick: true,\r\n      keyboard: false,\r\n      class: 'confirm'\r\n    });\r\n\r\n    modalRef.content.type = type;\r\n    modalRef.content.title = title;\r\n    modalRef.content.message = message;\r\n\r\n    if (type === 'delete') {\r\n      modalRef.content.messageAlerts = [\r\n        \"Se eliminará toda la información relacionada.\",\r\n        \"Esta acción no se puede deshacer.\"\r\n      ];\r\n    }\r\n\r\n    if (type === 'inactivate') {\r\n      modalRef.content.messageAlerts = [\r\n        'Las informaciones serán inactivadas.'\r\n      ];\r\n    }\r\n\r\n    if (cancelTxt) {\r\n      modalRef.content.cancelTxt = cancelTxt;\r\n    }\r\n\r\n    if (okTxt) {\r\n      modalRef.content.okTxt = okTxt;\r\n    }\r\n\r\n    // É uma boa prática tipar o retorno.\r\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\r\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n// Services\r\nimport { ComercialCadastrosSetorAtividadeService } from '../setor-atividade.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComercialCadastrosSetorAtividadeFormularioResolverGuard\r\n  implements Resolve<any> {\r\n  constructor(\r\n    private setorAtividadeService: ComercialCadastrosSetorAtividadeService\r\n  ) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n    if (route.params && route.params.id) {\r\n      return this.setorAtividadeService.getDetalhes(route.params.id);\r\n    }\r\n\r\n    // É implementado o método \"of\" para manter a tipagem de retorno com Observable.\r\n    return of({\r\n      success: true,\r\n      data: {\r\n        codSetorAtividade: null,\r\n        setorAtividade: null,\r\n        codParametroSetorAtividade: null,\r\n        codSituacao: null,\r\n        situacao: null,\r\n      },\r\n    });\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { Subscription, EMPTY, Observable } from 'rxjs';\r\nimport { take, switchMap, finalize } from 'rxjs/operators';\r\n\r\n// ngx-bootstrap\r\nimport { PageChangedEvent } from 'ngx-bootstrap/pagination';\r\n\r\n// Services\r\nimport { ComercialCadastrosSetorAtividadeService } from '../setor-atividade.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\r\nimport { DetailPanelService } from 'src/app/shared/templates/detail-panel/detal-panel.service';\r\n\r\n// Interfaces\r\nimport { SetorAtividade } from '../models/setor-atividade';\r\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\r\nimport { Subtitles } from 'src/app/shared/modules/subtitles/subtitles';\r\nimport { CustomTableConfig } from 'src/app/shared/templates/custom-table/models/config';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-setor-atividade-lista',\r\n  templateUrl: './lista.component.html',\r\n  styleUrls: ['./lista.component.scss'],\r\n})\r\nexport class ComercialCadastrosSetorAtividadeListaComponent implements OnInit {\r\n  @ViewChild('scrollToFilter', {}) scrollToFilter: ElementRef;\r\n\r\n  loaderNavbar = false;\r\n  loaderFullScreen = true;\r\n\r\n  breadCrumbTree: Array<Breadcrumb> = [];\r\n\r\n  subtitles: Array<Subtitles> = [\r\n    {\r\n      id: 1,\r\n      text: 'Ativo',\r\n      color: 'green',\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Inativo',\r\n      color: 'red',\r\n    },\r\n  ];\r\n\r\n  tableConfig: Partial<CustomTableConfig> = {\r\n    subtitleBorder: true,\r\n  };\r\n\r\n  activatedRouteSubscription: Subscription;\r\n\r\n  showDetailPanelSubscription: Subscription;\r\n  showDetailPanel = false;\r\n\r\n  form: FormGroup;\r\n  orderBy = 'codSetorAtividade';\r\n  orderType = 'ASC';\r\n\r\n  maxSize = 10;\r\n  itemsPerPage = 300;\r\n  currentPage = 1;\r\n  totalItems = 0;\r\n\r\n  dados: Array<SetorAtividade> = [];\r\n  dadosPagination: Array<SetorAtividade> = [];\r\n  dadosLoaded = false;\r\n  dadosEmpty = false;\r\n\r\n  setorAtividadeSelecionado: SetorAtividade;\r\n  alteracoes: Array<any> = [];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location,\r\n    private formBuilder: FormBuilder,\r\n    private setorAtividadeService: ComercialCadastrosSetorAtividadeService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService,\r\n    private confirmModalService: ConfirmModalService,\r\n    private detailPanelService: DetailPanelService\r\n  ) {\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.setFormFilter();\r\n    this.titleService.setTitle('Setor de atividade');\r\n    this.onDetailPanelEmitter();\r\n    this.setSetorAtividadeSelecionado();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.showDetailPanelSubscription.unsubscribe();\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home',\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params['idSubModulo']}`,\r\n        },\r\n        {\r\n          descricao: 'Setor de atividade',\r\n        },\r\n      ];\r\n    });\r\n  }\r\n\r\n  onDetailPanelEmitter(): void {\r\n    this.showDetailPanelSubscription = this.detailPanelService.config.subscribe(\r\n      (event: any) => {\r\n        this.showDetailPanel = event.showing;\r\n      }\r\n    );\r\n  }\r\n\r\n  setFormFilter(): void {\r\n    const formValue: any = this.checkRouterParams();\r\n\r\n    this.form = this.formBuilder.group({\r\n      setorAtividade: [formValue.setorAtividade],\r\n      codSetorAtividade: [formValue.codSetorAtividade],\r\n      codSituacao: [formValue.codSituacao],\r\n      orderBy: [formValue.orderBy],\r\n      orderType: [formValue.orderType],\r\n      pagina: [formValue.pagina],\r\n      registros: [formValue.registros, Validators.required],\r\n    });\r\n\r\n    this.checkOrder();\r\n    this.loaderFullScreen = false;\r\n  }\r\n\r\n  checkRouterParams(): Object {\r\n    let formValue = {\r\n      setorAtividade: null,\r\n      codSetorAtividade: 0,\r\n      codSituacao: 1,\r\n      orderBy: this.orderBy,\r\n      orderType: this.orderType,\r\n      pagina: 1,\r\n      registros: this.itemsPerPage,\r\n    };\r\n\r\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\r\n      (queryParams: any) => {\r\n        if (Object.keys(queryParams).length > 0) {\r\n          let params = atob(queryParams['q']);\r\n          params = JSON.parse(params);\r\n          this.search(params);\r\n\r\n          Object.keys(formValue).forEach((formKey) => {\r\n            Object.keys(params).forEach((paramKey) => {\r\n              if (\r\n                formKey == paramKey &&\r\n                formValue[formKey] != params[paramKey]\r\n              ) {\r\n                if (!isNaN(Number(params[paramKey]))) {\r\n                  formValue[formKey] = Number(params[paramKey]);\r\n                } else {\r\n                  formValue[formKey] = params[paramKey];\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n    this.activatedRouteSubscription.unsubscribe();\r\n\r\n    return formValue;\r\n  }\r\n\r\n  checkOrder(): void {\r\n    if (this.form.value.orderBy !== this.orderBy) {\r\n      this.orderBy = this.form.value.orderBy;\r\n    }\r\n\r\n    if (this.form.value.orderType !== this.orderType) {\r\n      this.orderType = this.form.value.orderType;\r\n    }\r\n  }\r\n\r\n  setSetorAtividadeSelecionado(): void {\r\n    this.setorAtividadeSelecionado = {\r\n      setorAtividade: null,\r\n      codSetorAtividade: 0,\r\n      codParametroSetorAtividade: 0,\r\n      codSituacao: 1,\r\n      situacao: null,\r\n    };\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  setOrderBy(column: string): void {\r\n    if (this.orderBy === column) {\r\n      if (this.orderType == 'DESC') {\r\n        this.orderType = 'ASC';\r\n      } else if (this.orderType == 'ASC') {\r\n        this.orderType = 'DESC';\r\n      }\r\n    } else {\r\n      this.orderBy = column;\r\n      this.orderType = 'ASC';\r\n    }\r\n\r\n    this.form.value.orderBy = this.orderBy;\r\n    this.form.value.orderType = this.orderType;\r\n\r\n    this.onFilter();\r\n  }\r\n\r\n  onFilter(): void {\r\n    if (this.form.valid) {\r\n      this.itemsPerPage = this.form.value.registros;\r\n      this.currentPage = 1;\r\n      this.setRouterParams(this.verificaParams());\r\n    }\r\n  }\r\n\r\n  setRouterParams(params: any): void {\r\n    this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { q: btoa(JSON.stringify(params)) },\r\n    });\r\n    this.search(params);\r\n  }\r\n\r\n  verificaParams(): Object {\r\n    let params: any = {};\r\n\r\n    if (this.form.value.setorAtividade) {\r\n      params.setorAtividade = this.form.value.setorAtividade;\r\n    }\r\n\r\n    if (this.form.value.codSituacao) {\r\n      params.codSituacao = this.form.value.codSituacao;\r\n    }\r\n\r\n    params.orderBy = this.form.value.orderBy;\r\n    params.orderType = this.form.value.orderType;\r\n\r\n    return params;\r\n  }\r\n\r\n  search(params: any): void {\r\n    this.loaderNavbar = true;\r\n    this.dados = [];\r\n    this.dadosPagination = [];\r\n    this.dadosLoaded = false;\r\n    this.dadosEmpty = false;\r\n    this.detailPanelService.hide();\r\n\r\n    this.setorAtividadeService\r\n      .getListaSetorAtividade(params)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n          this.dadosLoaded = true;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            this.dados = response.data;\r\n            this.dadosPagination = this.dados.slice(0, this.itemsPerPage);\r\n            this.totalItems = this.dados.length;\r\n            this.dadosLoaded = true;\r\n          } else if (\r\n            response.hasOwnProperty('success') &&\r\n            response.success === false\r\n          ) {\r\n            this.dadosEmpty = true;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.dadosEmpty = true;\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.dadosEmpty = true;\r\n\r\n          if (error.error.hasOwnProperty('mensagem')) {\r\n            this.pnotifyService.error(error.error.mensagem);\r\n          } else {\r\n            this.pnotifyService.error();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  classStatusBorder(setorAtividade: SetorAtividade): string {\r\n    let borderClass: string;\r\n\r\n    if (setorAtividade.codSituacao === 1) {\r\n      borderClass = 'border-success';\r\n    } else if (setorAtividade.codSituacao === 2) {\r\n      borderClass = 'border-danger';\r\n    }\r\n\r\n    return borderClass;\r\n  }\r\n\r\n  onPageChanged(event: PageChangedEvent): void {\r\n    const startItem = (event.page - 1) * event.itemsPerPage;\r\n    const endItem = event.page * event.itemsPerPage;\r\n    this.dadosPagination = this.dados.slice(startItem, endItem);\r\n\r\n    this.scrollToFilter.nativeElement.scrollIntoView({\r\n      behavior: 'instant',\r\n    });\r\n  }\r\n\r\n  onDetails(setorAtividade: SetorAtividade): void {\r\n    this.loaderNavbar = true;\r\n    this.detailPanelService.show();\r\n    this.setSetorAtividadeSelecionado();\r\n    this.setorAtividadeSelecionado = setorAtividade;\r\n    this.alteracoes = [];\r\n\r\n    this.setorAtividadeService\r\n      .getAlteracoes(setorAtividade.codSetorAtividade)\r\n      .pipe(\r\n        finalize(() => {\r\n          setTimeout(() => {\r\n            this.loaderNavbar = false;\r\n          }, 500);\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            // Não está vazio.\r\n            this.detailPanelService.loadedFinished(false);\r\n            this.alteracoes = response.data;\r\n          } else if (\r\n            response.hasOwnProperty('success') &&\r\n            response.success === false\r\n          ) {\r\n            // Vazio.\r\n            this.detailPanelService.loadedFinished(true);\r\n          } else {\r\n            // Vazio e com possível erro.\r\n            this.pnotifyService.error();\r\n            this.detailPanelService.loadedFinished(true);\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          // Vazio e com erro.\r\n          this.detailPanelService.loadedFinished(true);\r\n\r\n          if (error.error.hasOwnProperty('mensagem')) {\r\n            this.pnotifyService.error(error.error.mensagem);\r\n          } else {\r\n            this.pnotifyService.error();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  onEdit(setorAtividade: SetorAtividade): void {\r\n    this.router.navigate(['../editar', setorAtividade.codSetorAtividade], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  onActivate(index: number, setorAtividade: SetorAtividade): void {\r\n    this.confirmActivate()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((result) =>\r\n          result ? this.activateSituacaoProposta(index, setorAtividade) : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(setorAtividade);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 2;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmActivate(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      null,\r\n      null,\r\n      'Deseja realmente prosseguir com a ativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  activateSituacaoProposta(\r\n    index: number,\r\n    setorAtividade: SetorAtividade\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n    this.dadosPagination[index].codSituacao = 1;\r\n\r\n    return this.setorAtividadeService.activateSetorAtividade(\r\n      setorAtividade.codSetorAtividade\r\n    );\r\n  }\r\n\r\n  onInactivate(index: number, setorAtividade: SetorAtividade): void {\r\n    this.confirmInactive()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((result) =>\r\n          result\r\n            ? this.inactivateSituacaoProposta(index, setorAtividade)\r\n            : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(setorAtividade);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 1;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmInactive(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      'inactivate',\r\n      'Confirmar inativação',\r\n      'Deseja realmente prosseguir com a inativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  inactivateSituacaoProposta(\r\n    index: number,\r\n    setorAtividade: SetorAtividade\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n\r\n    this.dadosPagination[index].codSituacao = 2;\r\n\r\n    return this.setorAtividadeService.inactivateSetorAtividade(\r\n      setorAtividade.codSetorAtividade\r\n    );\r\n  }\r\n\r\n  refreshMainData(setorAtividade: SetorAtividade): void {\r\n    for (let i = 0; i < this.dados.length; i++) {\r\n      if (\r\n        setorAtividade.codSetorAtividade === this.dados[i].codSetorAtividade\r\n      ) {\r\n        this.dados[i].codSituacao = setorAtividade.codSituacao;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header appTitle=\\\"Setor de atividade\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    [routerLink]=\\\"['../novo']\\\">\\r\\n    Adicionar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onFilter()\\\">\\r\\n    Filtrar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n     <div class=\\\"row\\\" #scrollToFilter>\\r\\n      <div class=\\\"col\\\">\\r\\n        <advanced-filter>\\r\\n          <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n            <div class=\\\"form-row\\\">\\r\\n              <div class=\\\"form-group col-lg-7\\\">\\r\\n                <label for=\\\"setorAtividade\\\">Descrição</label>\\r\\n                <input\\r\\n                  type=\\\"text\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  formControlName=\\\"setorAtividade\\\"\\r\\n                  (keydown.enter)=\\\"onFilter()\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group col-lg-3\\\">\\r\\n                <label for=\\\"codSituacao\\\">Situação</label>\\r\\n                <select\\r\\n                  class=\\\"form-control custom-select\\\"\\r\\n                  id=\\\"codSituacao\\\"\\r\\n                  formControlName=\\\"codSituacao\\\">\\r\\n                  <option value=\\\"0\\\">Todos</option>\\r\\n                  <option value=\\\"1\\\">Ativos</option>\\r\\n                  <option value=\\\"2\\\">Inativos</option>\\r\\n                </select>\\r\\n              </div>\\r\\n              <div class=\\\"form-group col-lg-2\\\">\\r\\n                <label for=\\\"registros\\\">Registros</label>\\r\\n                <select\\r\\n                  class=\\\"form-control\\\"\\r\\n                  id=\\\"registros\\\"\\r\\n                  formControlName=\\\"registros\\\">\\r\\n                  <option>25</option>\\r\\n                  <option>50</option>\\r\\n                  <option>100</option>\\r\\n                  <option>200</option>\\r\\n                  <option>300</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </advanced-filter>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n        <subtitles\\r\\n          [data]=\\\"subtitles\\\"\\r\\n          [show]=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n        </subtitles>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div [ngClass]=\\\"{'col': !showDetailPanel, 'col-5 pr-0': showDetailPanel}\\\">\\r\\n        <custom-table [config]=\\\"tableConfig\\\" *ngIf=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n          <ng-template #thead let-thead>\\r\\n            <tr>\\r\\n              <th class=\\\"text-center\\\" scope=\\\"col\\\">Descrição TID</th>\\r\\n              <th scope=\\\"col\\\">Descricão</th>\\r\\n              <th scope=\\\"col\\\" [hidden]=\\\"showDetailPanel\\\"></th>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n          <ng-template #tbody let-tbody>\\r\\n            <tr *ngFor=\\\"let setorAtividade of dadosPagination; let i = index\\\" [class.table-active]=\\\"setorAtividade.codSetorAtividade == setorAtividadeSelecionado.codSetorAtividade\\\">\\r\\n              <td\\r\\n                class=\\\"text-center hover\\\"\\r\\n                [ngClass]=\\\"classStatusBorder(setorAtividade)\\\"\\r\\n                (click)=\\\"onDetails(setorAtividade)\\\">\\r\\n                {{ setorAtividade.codParametroSetorAtividade }}\\r\\n              </td>\\r\\n              <td\\r\\n                class=\\\"hover\\\"\\r\\n                (click)=\\\"onDetails(setorAtividade)\\\">\\r\\n                {{ setorAtividade.setorAtividade | uppercase }}\\r\\n              </td>\\r\\n              <td class=\\\"text-right\\\" [hidden]=\\\"showDetailPanel\\\">\\r\\n                <span *ngIf=\\\"setorAtividade.codSituacao == 1\\\" class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onInactivate(i, setorAtividade)\\\">\\r\\n                    <i class=\\\"fas fa-toggle-on\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n                <span *ngIf=\\\"setorAtividade.codSituacao == 2\\\" class=\\\"mr-3\\\" tooltip=\\\"Ativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onActivate(i, setorAtividade)\\\">\\r\\n                    <i class=\\\"fas fa-toggle-off\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n                <span class=\\\"mr-3\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onEdit(setorAtividade)\\\">\\r\\n                    <i class=\\\"fas fa-edit\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n        </custom-table>\\r\\n        <empty-result\\r\\n          message=\\\"Nenhuma informação encontrada\\\"\\r\\n          class=\\\"my-3\\\"\\r\\n          *ngIf=\\\"dadosEmpty\\\">\\r\\n        </empty-result>\\r\\n        <div class=\\\"d-flex justify-content-center mt-3\\\" *ngIf=\\\"totalItems > itemsPerPage && dadosLoaded\\\">\\r\\n          <pagination\\r\\n            [maxSize]=\\\"maxSize\\\"\\r\\n            [(totalItems)]=\\\"totalItems\\\"\\r\\n            (pageChanged)=\\\"onPageChanged($event)\\\"\\r\\n            [(itemsPerPage)]=\\\"itemsPerPage\\\"\\r\\n            [boundaryLinks]=\\\"true\\\"\\r\\n            [(ngModel)]=\\\"currentPage\\\"\\r\\n            previousText=\\\"&lsaquo;\\\"\\r\\n            nextText=\\\"&rsaquo;\\\"\\r\\n            firstText=\\\"&laquo;\\\"\\r\\n            lastText=\\\"&raquo;\\\">\\r\\n          </pagination>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-7\\\" [hidden]=\\\"!showDetailPanel\\\">\\r\\n        <detail-panel panelTitle=\\\"Histórico de alterações\\\">\\r\\n          <custom-table *ngIf=\\\"alteracoes.length > 0\\\">\\r\\n            <ng-template #thead let-thead>\\r\\n              <tr>\\r\\n                <th scope=\\\"col\\\" class=\\\"text-center\\\">Data</th>\\r\\n                <th scope=\\\"col\\\">Usuário</th>\\r\\n                <th scope=\\\"col\\\">Alteração</th>\\r\\n              </tr>\\r\\n            </ng-template>\\r\\n            <ng-template #tbody let-tbody>\\r\\n              <tr *ngFor=\\\"let alteracao of alteracoes\\\">\\r\\n                <td class=\\\"text-center\\\">{{ alteracao.dataLog | date: 'dd/MM/yyyy HH:mm' }}</td>\\r\\n                <td>{{ alteracao.nomeUsuario | uppercase }}</td>\\r\\n                <td>{{ alteracao.mensagem | uppercase }}</td>\\r\\n              </tr>\\r\\n            </ng-template>\\r\\n          </custom-table>\\r\\n        </detail-panel>\\r\\n      </div>\\r\\n    </div>\\r\\n  </app-body>\\r\\n\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\n// Interfaces\r\nimport { SetorAtividade } from './models/setor-atividade';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComercialCadastrosSetorAtividadeService {\r\n  private readonly API = `http://23.254.204.187/api/comercial/cadastros/setor-atividade`;\r\n\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  getListaSetorAtividade(params: any): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/lista`, { params: httpParams })\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getListaSetorAtividadeTid(): Observable<any> {\r\n    return this.http.get(`${this.API}/tid/lista`).pipe(take(1));\r\n  }\r\n\r\n  getAlteracoes(codSetorAtividade: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/alteracoes/${codSetorAtividade}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getDetalhes(codSituacaoProposta: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/detalhes/${codSituacaoProposta}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  private saveSetorAtividade(setorAtividade: SetorAtividade) {\r\n    return this.http.post(`${this.API}/salvar`, setorAtividade).pipe(take(1));\r\n  }\r\n\r\n  private updateSetorAtividade(setorAtividade: SetorAtividade) {\r\n    return this.http.put(`${this.API}/atualizar`, setorAtividade).pipe(take(1));\r\n  }\r\n\r\n  save(setorAtividade: SetorAtividade): Observable<any> {\r\n    if (setorAtividade.codSetorAtividade !== null) {\r\n      return this.updateSetorAtividade(setorAtividade);\r\n    }\r\n\r\n    return this.saveSetorAtividade(setorAtividade);\r\n  }\r\n\r\n  activateSetorAtividade(codigo: number): Observable<any> {\r\n    return this.http.post(`${this.API}/ativar`, codigo).pipe(take(1));\r\n  }\r\n\r\n  inactivateSetorAtividade(codigo: number): Observable<any> {\r\n    return this.http.post(`${this.API}/inativar`, codigo).pipe(take(1));\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanDeactivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from './iform-candeactivate';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormDeactivateGuard implements CanDeactivate<IFormCanDeactivate> {\r\n  canDeactivate(\r\n    component: IFormCanDeactivate,\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    return component.formCanDeactivate();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9zZXRvci1hdGl2aWRhZGUvbGlzdGEvbGlzdGEuY29tcG9uZW50LnNjc3MifQ== */\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9zZXRvci1hdGl2aWRhZGUvZm9ybXVsYXJpby9mb3JtdWxhcmlvLmNvbXBvbmVudC5zY3NzIn0= */\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n// Guards\r\nimport { FormDeactivateGuard } from 'src/app/guards/form-deactivate.guard';\r\nimport { ComercialCadastrosSetorAtividadeFormularioResolverGuard } from './formulario/formulario-resolver.guard';\r\n\r\n// Components\r\nimport { ComercialCadastrosSetorAtividadeListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosSetorAtividadeFormularioComponent } from './formulario/formulario.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'lista',\r\n    component: ComercialCadastrosSetorAtividadeListaComponent,\r\n  },\r\n  {\r\n    path: 'novo',\r\n    component: ComercialCadastrosSetorAtividadeFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosSetorAtividadeFormularioResolverGuard,\r\n    },\r\n    canDeactivate: [FormDeactivateGuard],\r\n  },\r\n  {\r\n    path: 'editar/:id',\r\n    component: ComercialCadastrosSetorAtividadeFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosSetorAtividadeFormularioResolverGuard,\r\n    },\r\n    canDeactivate: [FormDeactivateGuard],\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: 'lista',\r\n    pathMatch: 'full',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ComercialCadastrosSetorAtividadeModuleRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from 'src/app/guards/iform-candeactivate';\r\n\r\n// Services\r\nimport { ComercialCadastrosSetorAtividadeService } from '../setor-atividade.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\nimport { ComercialClientesCadastroDadosFaturamentoFormularioService } from '../../../clientes/cadastro/dados-faturamento/formulario/formulario.service';\r\n\r\n// Interfaces\r\nimport { SetorAtividade } from '../models/setor-atividade';\r\nimport { JsonResponse } from 'src/app/models/json-response';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-setor-atividade-formulario',\r\n  templateUrl: './formulario.component.html',\r\n  styleUrls: ['./formulario.component.scss'],\r\n})\r\nexport class ComercialCadastrosSetorAtividadeFormularioComponent\r\n  implements OnInit, IFormCanDeactivate {\r\n  loaderNavbar: boolean;\r\n  loaderFullScreen = true;\r\n\r\n  appTitle: string;\r\n  breadCrumbTree: Array<any> = [];\r\n\r\n  form: FormGroup;\r\n  formChanged = false;\r\n  submittingForm: boolean;\r\n\r\n  setorAtividadesTid: Array<any> = [];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location,\r\n    private formBuilder: FormBuilder,\r\n    private setorAtividadeService: ComercialCadastrosSetorAtividadeService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService\r\n  ) {\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.getFormFields();\r\n    this.setFormBuilder();\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      if (params.id) {\r\n        this.appTitle = 'Editar setor de atividade';\r\n      } else {\r\n        this.appTitle = 'Novo setor de atividade';\r\n      }\r\n\r\n      this.titleService.setTitle(this.appTitle);\r\n\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home',\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}`,\r\n        },\r\n        {\r\n          descricao: 'Setor de atividade',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}/setor-atividade/lista`,\r\n        },\r\n        {\r\n          descricao: this.appTitle,\r\n        },\r\n      ];\r\n    });\r\n  }\r\n\r\n  getFormFields(): void {\r\n    this.loaderFullScreen = true;\r\n\r\n    this.setorAtividadeService\r\n      .getListaSetorAtividadeTid()\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderFullScreen = false;\r\n        })\r\n      )\r\n      .subscribe((response: JsonResponse) => {\r\n        if (response.success === true) {\r\n          this.setorAtividadesTid = response.data;\r\n        }\r\n      });\r\n  }\r\n\r\n  setFormBuilder(): void {\r\n    if (this.activatedRoute.snapshot.data.detalhes.success === true) {\r\n      const detalhes: SetorAtividade = this.activatedRoute.snapshot.data\r\n        .detalhes.data;\r\n\r\n      this.form = this.formBuilder.group({\r\n        codSetorAtividade: [detalhes.codSetorAtividade],\r\n        setorAtividade: [detalhes.setorAtividade, [Validators.required]],\r\n        codParametroSetorAtividade: [detalhes.codParametroSetorAtividade],\r\n        codSituacao: [detalhes.codSituacao, [Validators.required]],\r\n      });\r\n    } else {\r\n      this.pnotifyService.error();\r\n      this.location.back();\r\n    }\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.form.pristine) {\r\n      this.location.back();\r\n    } else {\r\n      if (this.form.valid) {\r\n        this.loaderNavbar = true;\r\n        this.submittingForm = true;\r\n\r\n        this.setorAtividadeService\r\n          .save(this.form.value)\r\n          .pipe(\r\n            finalize(() => {\r\n              this.loaderNavbar = false;\r\n              this.submittingForm = false;\r\n            })\r\n          )\r\n          .subscribe({\r\n            next: (response: any) => {\r\n              if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === true\r\n              ) {\r\n                this.form.reset();\r\n                this.formChanged = false;\r\n                this.pnotifyService.success(response.mensagem);\r\n\r\n                this.activatedRoute.params.subscribe((params: any) => {\r\n                  if (params.hasOwnProperty('id')) {\r\n                    this.location.back();\r\n                  } else {\r\n                    this.router.navigate(['../lista'], {\r\n                      relativeTo: this.activatedRoute,\r\n                    });\r\n                  }\r\n                });\r\n              } else if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === false\r\n              ) {\r\n                this.pnotifyService.notice(response.mensagem);\r\n              } else {\r\n                this.pnotifyService.error();\r\n              }\r\n            },\r\n            error: (error: any) => {\r\n              this.pnotifyService.error();\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.location.back();\r\n  }\r\n\r\n  onInput(): void {\r\n    this.formChanged = true;\r\n  }\r\n\r\n  formCanDeactivate(): boolean {\r\n    if (this.formChanged) {\r\n      if (confirm('Este cliente no forma parte de tu cartera?')) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// ngx-bootstrap\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\n\r\n// ng-select\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n// ng-brazil\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { NgBrazil } from 'ng-brazil';\r\n\r\n// PNotify\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\n\r\n// Modules\r\nimport { ComercialCadastrosSetorAtividadeModuleRoutingModule } from './setor-atividade-routing.module';\r\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\r\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\r\n\r\n// Components\r\nimport { ComercialCadastrosSetorAtividadeListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosSetorAtividadeFormularioComponent } from './formulario/formulario.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ComercialCadastrosSetorAtividadeListaComponent,\r\n    ComercialCadastrosSetorAtividadeFormularioComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PaginationModule.forRoot(),\r\n    TooltipModule.forRoot(),\r\n    NgSelectModule,\r\n    TextMaskModule,\r\n    NgBrazil,\r\n    ComercialCadastrosSetorAtividadeModuleRoutingModule,\r\n    SharedModule,\r\n    TemplatesModule,\r\n  ],\r\n  providers: [PNotifyService],\r\n})\r\nexport class ComercialCadastrosSetorAtividadeModule {}\r\n"]}