{"version":3,"sources":["webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formas-contato.module.ts","webpack:///src/app/shared/modules/confirm-modal/confirm-modal.service.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formulario/formulario.component.scss","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formas-contato-routing.module.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formas-contato.service.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formulario/formulario.component.html","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/lista/lista.component.scss","webpack:///src/app/guards/form-deactivate.guard.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formulario/formulario-resolver.guard.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/lista/lista.component.html","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/formulario/formulario.component.ts","webpack:///src/app/modules/comercial/cadastros/contato/formas-contato/lista/lista.component.ts"],"names":["ComercialCadastrosContatoFormasContatoModule","declarations","imports","forRoot","providers","ConfirmModalService","modalService","type","title","message","cancelTxt","okTxt","modalRef","show","animated","ignoreBackdropClick","keyboard","content","messageAlerts","confirmResult","providedIn","routes","path","component","resolve","detalhes","canDeactivate","redirectTo","pathMatch","ComercialCadastrosContatoFormasContatoRoutingModule","forChild","exports","ComercialCadastrosContatoFormasContatoService","http","API","params","httpParams","param","append","get","pipe","codFormaContato","record","post","put","updateFormaContato","saveFormaContato","FormDeactivateGuard","route","state","formCanDeactivate","ComercialCadastrosContatoFormasContatoFormularioResolverGuard","formasContatoService","id","getFormaContato","success","data","descricao","codSituacao","ComercialCadastrosContatoFormasContatoFormularioComponent","activatedRoute","router","location","formBuilder","pnotifyService","atividadesService","titleService","loaderFullScreen","breadCrumbTree","descFormasERP","formChanged","getPNotify","registrarAcesso","setBreadCrumb","setFormBuilder","setTitle","getFormFields","subscribe","appTitle","routerLink","idSubModulo","snapshot","form","group","required","maxLength","codReferenteErp","error","back","field","onFieldInvalid","status","touched","abstractControl","abstractControlField","validator","controlName","onFieldRequired","pristine","valid","loaderNavbar","submittingForm","save","value","next","response","hasOwnProperty","reset","mensagem","navigate","relativeTo","getListaFormasERP","unshift","confirm","selector","template","ComercialCadastrosContatoFormasContatoListaComponent","confirmModalService","detailPanelService","subtitles","text","color","tableConfig","subtitleBorder","showDetailPanel","orderBy","orderType","maxSize","itemsPerPage","currentPage","totalItems","dados","dadosPagination","dadosLoaded","dadosEmpty","alteracoes","setFormFilter","onDetailPanelEmitter","setFormaContatoSelecionada","showDetailPanelSubscription","unsubscribe","config","event","showing","formValue","checkRouterParams","formaContato","pagina","registros","checkOrder","activatedRouteSubscription","queryParams","Object","keys","length","atob","JSON","parse","search","forEach","formKey","paramKey","isNaN","Number","formaContatoSelecionada","column","onFilter","setRouterParams","verificaParams","q","btoa","stringify","hide","getListaFormasContato","slice","console","log","borderClass","startItem","page","endItem","scrollToFilter","nativeElement","scrollIntoView","behavior","getAlteracoes","setTimeout","loadedFinished","index","confirmActivate","asObservable","result","activateFormaContato","refreshMainData","showConfirm","confirmInactive","inactivateFormaContato","i"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eAIA;AAIA;AAGA;AAIA;AAGA;AAKA;;;UAwBaA,4CAA4C;AAAA;AAAA,O;;AAA5CA,kDAA4C,6DApBxD,+DAAS;AACRC,oBAAY,EAAE,CACZ,4GADY,EAEZ,2HAFY,CADN;AAKRC,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,kEAHO,EAIP,0EAAiBC,OAAjB,EAJO,EAKP,oEAAcA,OAAd,EALO,EAMP,mEANO,EAOP,iEAPO,EAQP,kDARO,EASP,mHATO,EAUP,kFAVO,EAWP,0FAXO,CALD;AAkBRC,iBAAS,EAAE,CAAC,2FAAD;AAlBH,OAAT,CAoBwD,GAA5CJ,4CAA4C,CAA5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eC5Cb;;;UAMaK,mBAAmB;AAC9B,qCAAoBC,YAApB,EAAkD;AAAA;;AAA9B,eAAAA,YAAA,GAAAA,YAAA;AAAgC;;AADtB;AAAA;AAAA,sCAI5BC,IAJ4B,EAK5BC,KAL4B,EAM5BC,OAN4B,EAO5BC,SAP4B,EAQ5BC,KAR4B,EAQd;AAEd,gBAAMC,QAAQ,GAAG,KAAKN,YAAL,CAAkBO,IAAlB,CAAuB,8EAAvB,EAA8C;AAC7DC,sBAAQ,EAAE,KADmD;AAE7DC,iCAAmB,EAAE,IAFwC;AAG7DC,sBAAQ,EAAE,KAHmD;AAI7D,uBAAO;AAJsD,aAA9C,CAAjB;AAOAJ,oBAAQ,CAACK,OAAT,CAAiBV,IAAjB,GAAwBA,IAAxB;AACAK,oBAAQ,CAACK,OAAT,CAAiBT,KAAjB,GAAyBA,KAAzB;AACAI,oBAAQ,CAACK,OAAT,CAAiBR,OAAjB,GAA2BA,OAA3B;;AAEA,gBAAIF,IAAI,KAAK,QAAb,EAAuB;AACrBK,sBAAQ,CAACK,OAAT,CAAiBC,aAAjB,GAAiC,CAC/B,+CAD+B,EAE/B,mCAF+B,CAAjC;AAID;;AAED,gBAAIX,IAAI,KAAK,YAAb,EAA2B;AACzBK,sBAAQ,CAACK,OAAT,CAAiBC,aAAjB,GAAiC,CAC/B,sCAD+B,CAAjC;AAGD;;AAED,gBAAIR,SAAJ,EAAe;AACbE,sBAAQ,CAACK,OAAT,CAAiBP,SAAjB,GAA6BA,SAA7B;AACD;;AAED,gBAAIC,KAAJ,EAAW;AACTC,sBAAQ,CAACK,OAAT,CAAiBN,KAAjB,GAAyBA,KAAzB;AACD,aAhCa,CAkCd;AACA;;;AACA,mBAA+BC,QAAQ,CAACK,OAAT,CAAkBE,aAAjD;AACD;AA7C6B;;AAAA;AAAA,S;;;;gBARvB;;;;AAQId,yBAAmB,6DAH/B,iEAAW;AACVe,kBAAU,EAAE;AADF,OAAX,CAG+B,E,+EACI,kE,EADJ,GAAnBf,mBAAmB,CAAnB;;;;;;;;;;;;;;;;ACTb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCGf;AAIA;;;AAIA,UAAMgB,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,OADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,EAKrB;AACED,YAAI,EAAE,MADR;AAEEC,iBAAS,EAAE,0HAFb;AAGEC,eAAO,EAAE;AACPC,kBAAQ,EAAE;AADH,SAHX;AAMEC,qBAAa,EAAE,CAAC,wFAAD;AANjB,OALqB,EAarB;AACEJ,YAAI,EAAE,YADR;AAEEC,iBAAS,EAAE,0HAFb;AAGEC,eAAO,EAAE;AACPC,kBAAQ,EAAE;AADH,SAHX;AAMEC,qBAAa,EAAE,CAAC,wFAAD;AANjB,OAbqB,EAqBrB;AACEJ,YAAI,EAAE,EADR;AAEEK,kBAAU,EAAE,OAFd;AAGEC,iBAAS,EAAE;AAHb,OArBqB,CAAvB;;UAgCaC,mDAAmD;AAAA;AAAA,O;;AAAnDA,yDAAmD,6DAJ/D,+DAAS;AACR3B,eAAO,EAAE,CAAC,6DAAa4B,QAAb,CAAsBT,MAAtB,CAAD,CADD;AAERU,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAI+D,GAAnDF,mDAAmD,CAAnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC9BAG,6CAA6C;AAGxD,+DAAsBC,IAAtB,EAAwC;AAAA;;AAAlB,eAAAA,IAAA,GAAAA,IAAA;AAFL,eAAAC,GAAA;AAEyB;;AAHc;AAAA;AAAA,gDAKlCC,MALkC,EAKvB;AAC/B,gBAAIC,UAAU,GAAG,IAAI,+DAAJ,EAAjB;;AAEA,iBAAK,IAAIC,KAAT,IAAkBF,MAAlB,EAA0B;AACxBC,wBAAU,GAAGA,UAAU,CAACE,MAAX,CAAkBD,KAAlB,EAAyBF,MAAM,CAACE,KAAD,CAA/B,CAAb;AACD;;AAED,mBAAO,KAAKJ,IAAL,CACJM,GADI,WACG,KAAKL,GADR,aACqB;AAAEC,oBAAM,EAAEC;AAAV,aADrB,EAEJI,IAFI,CAEC,4DAAK,CAAL,CAFD,CAAP;AAGD;AAfuD;AAAA;AAAA,wCAiB1CC,eAjB0C,EAiBnB;AACnC,mBAAO,KAAKR,IAAL,CACJM,GADI,WACG,KAAKL,GADR,yBAC0BO,eAD1B,GAEJD,IAFI,CAEC,4DAAK,CAAL,CAFD,CAAP;AAGD;AArBuD;AAAA;AAAA,0CAuBxCC,eAvBwC,EAuBjB;AACrC,mBAAO,KAAKR,IAAL,CACJM,GADI,WACG,KAAKL,GADR,uBACwBO,eADxB,GAEJD,IAFI,CAEC,4DAAK,CAAL,CAFD,CAAP;AAGD;AA3BuD;AAAA;AAAA,2CA6B/BE,MA7B+B,EA6BlB;AACpC,mBAAO,KAAKT,IAAL,CAAUU,IAAV,WAAkB,KAAKT,GAAvB,cAAqCQ,MAArC,EAA6CF,IAA7C,CAAkD,4DAAK,CAAL,CAAlD,CAAP;AACD;AA/BuD;AAAA;AAAA,6CAiC7BE,MAjC6B,EAiChB;AACtC,mBAAO,KAAKT,IAAL,CAAUW,GAAV,WAAiB,KAAKV,GAAtB,iBAAuCQ,MAAvC,EAA+CF,IAA/C,CAAoD,4DAAK,CAAL,CAApD,CAAP;AACD;AAnCuD;AAAA;AAAA,+BAqCnDE,MArCmD,EAqC/B;AACvB,gBAAIA,MAAM,CAACD,eAAP,KAA2B,IAA/B,EAAqC;AACnC,qBAAO,KAAKI,kBAAL,CAAwBH,MAAxB,CAAP;AACD;;AAED,mBAAO,KAAKI,gBAAL,CAAsBJ,MAAtB,CAAP;AACD;AA3CuD;AAAA;AAAA,6CA6CrCD,eA7CqC,EA6Cd;AACxC,mBAAO,KAAKR,IAAL,qBACM,KAAKC,GADX,sBAC0BO,eAD1B,GAEJD,IAFI,CAEC,4DAAK,CAAL,CAFD,CAAP;AAGD;AAjDuD;AAAA;AAAA,+CAmDnCC,eAnDmC,EAmDZ;AAC1C,mBAAO,KAAKR,IAAL,CAAUU,IAAV,WAAkB,KAAKT,GAAvB,cAAqCO,eAArC,EAAsDD,IAAtD,CAA2D,4DAAK,CAAL,CAA3D,CAAP;AACD;AArDuD;AAAA;AAAA,iDAuDjCC,eAvDiC,EAuDV;AAC5C,mBAAO,KAAKR,IAAL,CACJU,IADI,WACI,KAAKT,GADT,gBACyBO,eADzB,EAEJD,IAFI,CAEC,4DAAK,CAAL,CAFD,CAAP;AAGD;AA3DuD;AAAA;AAAA,8CA6DvC;AACf,mBAAO,KAAKP,IAAL,CAAUM,GAAV,WAAiB,KAAKL,GAAtB,iBAAuCM,IAAvC,CAA4C,4DAAK,CAAL,CAA5C,CAAP;AACD;AA/DuD;;AAAA;AAAA,S;;;;gBAZjD;;;;AAYIR,mDAA6C,6DAHzD,iEAAW;AACVZ,kBAAU,EAAE;AADF,OAAX,CAGyD,E,+EAG5B,+D,EAH4B,GAA7CY,6CAA6C,CAA7C;;;;;;;;;;;;;;;;ACbb;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCeFe,mBAAmB;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,wCAE5BxB,SAF4B,EAG5ByB,KAH4B,EAI5BC,KAJ4B,EAIF;AAM1B,mBAAO1B,SAAS,CAAC2B,iBAAV,EAAP;AACD;AAX6B;;AAAA;AAAA,S;;AAAnBH,yBAAmB,6DAH/B,iEAAW;AACV3B,kBAAU,EAAE;AADF,OAAX,CAG+B,GAAnB2B,mBAAmB,CAAnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCXb;;;UAMaI,6DAA6D;AAExE,+EACUC,oBADV,EAC6E;AAAA;;AAAnE,eAAAA,oBAAA,GAAAA,oBAAA;AACN;;AAJoE;AAAA;AAAA,kCAMhEJ,KANgE,EAMnC;AACnC,gBAAIA,KAAK,CAACb,MAAN,IAAgBa,KAAK,CAACb,MAAN,CAAakB,EAAjC,EAAqC;AACnC,qBAAO,KAAKD,oBAAL,CAA0BE,eAA1B,CAA0CN,KAAK,CAACb,MAAN,CAAakB,EAAvD,CAAP;AACD,aAHkC,CAKnC;;;AACA,mBAAO,gDAAG;AACRE,qBAAO,EAAE,IADD;AAERC,kBAAI,EAAE;AACJf,+BAAe,EAAE,IADb;AAEJgB,yBAAS,EAAE,IAFP;AAGJC,2BAAW,EAAE;AAHT;AAFE,aAAH,CAAP;AAQD;AApBuE;;AAAA;AAAA,S;;;;gBALjE;;;;AAKIP,mEAA6D,6DAHzE,iEAAW;AACV/B,kBAAU,EAAE;AADF,OAAX,CAGyE,E,+EAGxC,qG,EAHwC,GAA7D+B,6DAA6D,CAA7D;;;;;;;;;;;;;;;;ACVb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCcf;;;UAgBaQ,yDAAyD;AAcpE,2EACUC,cADV,EAEUC,MAFV,EAGUC,QAHV,EAIUC,WAJV,EAKUX,oBALV,EAMUY,cANV,EAOUC,iBAPV,EAQUC,YARV,EAQoC;AAAA;;AAP1B,eAAAN,cAAA,GAAAA,cAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,QAAA,GAAAA,QAAA;AACA,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAX,oBAAA,GAAAA,oBAAA;AACA,eAAAY,cAAA,GAAAA,cAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AAnBV,eAAAC,gBAAA,GAAmB,IAAnB;AAGA,eAAAC,cAAA,GAAoC,EAApC;AAEA,eAAAC,aAAA,GAA4B,EAA5B;AAGA,eAAAC,WAAA,GAAc,KAAd;AAaE,eAAKN,cAAL,CAAoBO,UAApB;AACD;;AAzBmE;AAAA;AAAA,qCA2B5D;AACN,iBAAKC,eAAL;AACA,iBAAKC,aAAL;AACA,iBAAKC,cAAL;AACA,iBAAKR,YAAL,CAAkBS,QAAlB,CAA2B,+BAA3B;AACA,iBAAKC,aAAL;AACD;AAjCmE;AAAA;AAAA,4CAmCrD;AACb,iBAAKX,iBAAL,CAAuBO,eAAvB,GAAyCK,SAAzC;AACD;AArCmE;AAAA;AAAA,0CAuCvD;AAAA;;AACX,iBAAKjB,cAAL,CAAoBzB,MAApB,CAA2B0C,SAA3B,CAAqC,UAAC1C,MAAD,EAAiB;AACpD,kBAAIA,MAAM,CAACkB,EAAX,EAAe;AACb,qBAAI,CAACyB,QAAL,GAAgB,yBAAhB;AACD,eAFD,MAEO;AACL,qBAAI,CAACA,QAAL,GAAgB,uBAAhB;AACD;;AAED,mBAAI,CAACV,cAAL,GAAsB,CACpB;AACEX,yBAAS,EAAE,MADb;AAEEsB,0BAAU,EAAE;AAFd,eADoB,EAKpB;AACEtB,yBAAS,EAAE,WADb;AAEEsB,0BAAU,iCAA0B5C,MAAM,CAAC6C,WAAjC;AAFZ,eALoB,EASpB;AACEvB,yBAAS,EAAE,mBADb;AAEEsB,0BAAU,iCAA0B5C,MAAM,CAAC6C,WAAjC;AAFZ,eAToB,EAapB;AACEvB,yBAAS,EAAE,KAAI,CAACqB;AADlB,eAboB,CAAtB;AAiBD,aAxBD;AAyBD;AAjEmE;AAAA;AAAA,2CAmEtD;AACZ,gBAAI,KAAKlB,cAAL,CAAoBqB,QAApB,CAA6BzB,IAA7B,CAAkC/B,QAAlC,CAA2C8B,OAA3C,KAAuD,IAA3D,EAAiE;AAC/D,kBAAM9B,QAAQ,GAAiB,KAAKmC,cAAL,CAAoBqB,QAApB,CAA6BzB,IAA7B,CAAkC/B,QAAlC,CAC5B+B,IADH;AAGA,mBAAK0B,IAAL,GAAY,KAAKnB,WAAL,CAAiBoB,KAAjB,CAAuB;AACjC1C,+BAAe,EAAE,CAAChB,QAAQ,CAACgB,eAAV,CADgB;AAEjCgB,yBAAS,EAAE,CACThC,QAAQ,CAACgC,SADA,EAET,CAAC,0DAAW2B,QAAZ,EAAsB,0DAAWC,SAAX,CAAqB,EAArB,CAAtB,CAFS,CAFsB;AAMjCC,+BAAe,EAAC,CACd7D,QAAQ,CAAC6D,eADK,CANiB;AASjC5B,2BAAW,EAAE,CAACjC,QAAQ,CAACiC,WAAV,EAAuB,CAAC,0DAAW0B,QAAZ,CAAvB;AAToB,eAAvB,CAAZ;AAWD,aAfD,MAeO;AACL,mBAAKpB,cAAL,CAAoBuB,KAApB;AACA,mBAAKzB,QAAL,CAAc0B,IAAd;AACD;AACF;AAvFmE;AAAA;AAAA,uCAyFvDC,KAzFuD,EAyF1C;AACxB,gBAAI,KAAKC,cAAL,CAAoBD,KAApB,CAAJ,EAAgC;AAC9B,qBAAO,YAAP;AACD;;AAED,mBAAO,EAAP;AACD;AA/FmE;AAAA;AAAA,yCAiGrDA,KAjGqD,EAiG3C;AACvBA,iBAAK,GAAG,KAAKP,IAAL,CAAU3C,GAAV,CAAckD,KAAd,CAAR;AAEA,mBAAOA,KAAK,CAACE,MAAN,IAAgB,SAAhB,IAA6BF,KAAK,CAACG,OAA1C;AACD;AArGmE;AAAA;AAAA,0CAwGlEC,eAxGkE,EAyGlEC,oBAzGkE,EAyGrC;AAE7B,gBAAID,eAAe,CAACE,SAApB,EAA+B;AAC7B,kBAAMA,SAAS,GAAGF,eAAe,CAACE,SAAhB,CAA0B,EAA1B,CAAlB;;AACA,kBAAIA,SAAS,IAAIA,SAAS,CAACX,QAA3B,EAAqC;AACnC,uBAAO,aAAP;AACD;AACF;;AAED,gBAAIU,oBAAJ,EAA0B;AACxB,mBAAK,IAAME,WAAX,IAA0BH,eAAe,CAAC,UAAD,CAAzC,EAAuD;AACrD,oBAAIA,eAAe,CAAC,UAAD,CAAf,CAA4BG,WAA5B,CAAJ,EAA8C;AAC5C,sBACE,KAAKC,eAAL,CAAqBJ,eAAe,CAAC,UAAD,CAAf,CAA4BG,WAA5B,CAArB,KACAA,WAAW,IAAIF,oBAFjB,EAGE;AACA,2BAAO,aAAP;AACD;AACF;AACF;AACF;;AAED,mBAAO,EAAP;AACD;AAhImE;AAAA;AAAA,qCAkI5D;AAAA;;AACN,gBAAI,KAAKZ,IAAL,CAAUgB,QAAd,EAAwB;AACtB,mBAAKpC,QAAL,CAAc0B,IAAd;AACD,aAFD,MAEO;AACL,kBAAI,KAAKN,IAAL,CAAUiB,KAAd,EAAqB;AACnB,qBAAKC,YAAL,GAAoB,IAApB;AACA,qBAAKC,cAAL,GAAsB,IAAtB;AAEA,qBAAKjD,oBAAL,CACGkD,IADH,CACQ,KAAKpB,IAAL,CAAUqB,KADlB,EAEG/D,IAFH,CAGI,gEAAS,YAAM;AACb,wBAAI,CAAC4D,YAAL,GAAoB,KAApB;AACA,wBAAI,CAACC,cAAL,GAAsB,KAAtB;AACD,iBAHD,CAHJ,EAQGxB,SARH,CAQa;AACT2B,sBAAI,EAAE,cAACC,QAAD,EAAmB;AACvB,wBACEA,QAAQ,CAACC,cAAT,CAAwB,UAAxB,KACAD,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CADA,IAEAD,QAAQ,CAAClD,OAAT,KAAqB,IAHvB,EAIE;AACA,4BAAI,CAAC2B,IAAL,CAAUyB,KAAV;;AACA,4BAAI,CAACrC,WAAL,GAAmB,KAAnB;;AACA,4BAAI,CAACN,cAAL,CAAoBT,OAApB,CAA4BkD,QAAQ,CAACG,QAArC;;AAEA,4BAAI,CAAChD,cAAL,CAAoBzB,MAApB,CAA2B0C,SAA3B,CAAqC,UAAC1C,MAAD,EAAiB;AACpD,4BAAIA,MAAM,CAACuE,cAAP,CAAsB,IAAtB,CAAJ,EAAiC;AAC/B,gCAAI,CAAC5C,QAAL,CAAc0B,IAAd;AACD,yBAFD,MAEO;AACL,gCAAI,CAAC3B,MAAL,CAAYgD,QAAZ,CAAqB,CAAC,UAAD,CAArB,EAAmC;AACjCC,sCAAU,EAAE,MAAI,CAAClD;AADgB,2BAAnC;AAGD;AACF,uBARD;AASD,qBAlBD,MAkBO,IACL6C,QAAQ,CAACC,cAAT,CAAwB,UAAxB,KACAD,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CADA,IAEAD,QAAQ,CAAClD,OAAT,KAAqB,KAHhB,EAIL;AACA,4BAAI,CAACS,cAAL,CAAoBuB,KAApB,CAA0BkB,QAAQ,CAACG,QAAnC;AACD,qBANM,MAMA;AACL,4BAAI,CAAC5C,cAAL,CAAoBuB,KAApB;AACD;AACF,mBA7BQ;AA8BTA,uBAAK,EAAE,eAACA,MAAD,EAAgB;AACrB,0BAAI,CAACvB,cAAL,CAAoBuB,KAApB;AACD;AAhCQ,iBARb;AA0CD;AACF;AACF;AAtLmE;AAAA;AAAA,0CAwLvD;AAAA;;AACX,iBAAKpB,gBAAL,GAAwB,IAAxB;AAEA,iBAAKf,oBAAL,CACG2D,iBADH,GAEGvE,IAFH,CAGI,gEAAS,YAAM;AACb,oBAAI,CAAC2B,gBAAL,GAAwB,KAAxB;AACD,aAFD,CAHJ,EAOGU,SAPH,CAOa,UAAC4B,QAAD,EAA4B;AACrC,kBAAIA,QAAQ,CAAClD,OAAT,KAAqB,IAAzB,EAA+B;AAC7B,sBAAI,CAACc,aAAL,GAAqBoC,QAAQ,CAACjD,IAA9B;;AAEA,sBAAI,CAACa,aAAL,CAAmB2C,OAAnB,CAA2B;AACzBvE,iCAAe,EAAE,CADQ;AAEzBgB,2BAAS,EAAE;AAFc,iBAA3B;AAID;AACF,aAhBH;AAiBD;AA5MmE;AAAA;AAAA,qCA8M5D;AACN,iBAAKK,QAAL,CAAc0B,IAAd;AACD;AAhNmE;AAAA;AAAA,oCAkN7D;AACL,iBAAKlB,WAAL,GAAmB,IAAnB;AACD;AApNmE;AAAA;AAAA,8CAsNnD;AACf,gBAAI,KAAKA,WAAT,EAAsB;AACpB,kBAAI2C,OAAO,CAAC,4CAAD,CAAX,EAA2D;AACzD,uBAAO,IAAP;AACD,eAFD,MAEO;AACL,uBAAO,KAAP;AACD;AACF;;AACD,mBAAO,IAAP;AACD;AA/NmE;;AAAA;AAAA,S;;;;gBA7B7D;;gBAAgB;;gBAChB;;gBAGP;;gBAUO;;gBACA;;gBACA;;gBACA;;;;AAYItD,+DAAyD,6DALrE,gEAAU;AACTuD,gBAAQ,EAAE,uDADD;AAETC,gBAAQ,EAAR,6EAFS;;AAAA,OAAV,CAKqE,E,+EAe1C,8D,EACR,sD,EACE,wD,EACG,0D,EACS,qG,EACN,2F,EACG,sG,EACL,wF,EAtB4C,GAAzDxD,yDAAyD,CAAzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCVb;;;UAmBayD,oDAAoD;AAgD/D,sEACUxD,cADV,EAEUC,MAFV,EAGUE,WAHV,EAIUX,oBAJV,EAKUY,cALV,EAMUC,iBANV,EAOUC,YAPV,EAQUmD,mBARV,EASUC,kBATV,EASgD;AAAA;;AARtC,eAAA1D,cAAA,GAAAA,cAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAE,WAAA,GAAAA,WAAA;AACA,eAAAX,oBAAA,GAAAA,oBAAA;AACA,eAAAY,cAAA,GAAAA,cAAA;AACA,eAAAC,iBAAA,GAAAA,iBAAA;AACA,eAAAC,YAAA,GAAAA,YAAA;AACA,eAAAmD,mBAAA,GAAAA,mBAAA;AACA,eAAAC,kBAAA,GAAAA,kBAAA;AArDV,eAAAlB,YAAA,GAAe,KAAf;AACA,eAAAjC,gBAAA,GAAmB,IAAnB;AAEA,eAAAC,cAAA,GAAoC,EAApC;AAEA,eAAAmD,SAAA,GAA8B,CAC5B;AACElE,cAAE,EAAE,CADN;AAEEmE,gBAAI,EAAE,OAFR;AAGEC,iBAAK,EAAE;AAHT,WAD4B,EAM5B;AACEpE,cAAE,EAAE,CADN;AAEEmE,gBAAI,EAAE,SAFR;AAGEC,iBAAK,EAAE;AAHT,WAN4B,CAA9B;AAaA,eAAAC,WAAA,GAA0C;AACxCC,0BAAc,EAAE;AADwB,WAA1C;AAOA,eAAAC,eAAA,GAAkB,KAAlB;AAGA,eAAAC,OAAA,GAAU,iBAAV;AACA,eAAAC,SAAA,GAAY,KAAZ;AAEA,eAAAC,OAAA,GAAU,EAAV;AACA,eAAAC,YAAA,GAAe,GAAf;AACA,eAAAC,WAAA,GAAc,CAAd;AACA,eAAAC,UAAA,GAAa,CAAb;AAEA,eAAAC,KAAA,GAA6B,EAA7B;AACA,eAAAC,eAAA,GAAuC,EAAvC;AACA,eAAAC,WAAA,GAAc,KAAd;AACA,eAAAC,UAAA,GAAa,KAAb;AAGA,eAAAC,UAAA,GAAyB,EAAzB;AAaE,eAAKvE,cAAL,CAAoBO,UAApB;AACD;;AA5D8D;AAAA;AAAA,qCA8DvD;AACN,iBAAKC,eAAL;AACA,iBAAKC,aAAL;AACA,iBAAK+D,aAAL;AACA,iBAAKtE,YAAL,CAAkBS,QAAlB,CAA2B,mBAA3B;AACA,iBAAK8D,oBAAL;AACA,iBAAKC,0BAAL;AACD;AArE8D;AAAA;AAAA,wCAuEpD;AACT,iBAAKC,2BAAL,CAAiCC,WAAjC;AACD;AAzE8D;AAAA;AAAA,4CA2EhD;AACb,iBAAK3E,iBAAL,CAAuBO,eAAvB,GAAyCK,SAAzC;AACD;AA7E8D;AAAA;AAAA,0CA+ElD;AAAA;;AACX,iBAAKjB,cAAL,CAAoBzB,MAApB,CAA2B0C,SAA3B,CAAqC,UAAC1C,MAAD,EAAiB;AACpD,oBAAI,CAACiC,cAAL,GAAsB,CACpB;AACEX,yBAAS,EAAE,MADb;AAEEsB,0BAAU,EAAE;AAFd,eADoB,EAKpB;AACEtB,yBAAS,EAAE,WADb;AAEEsB,0BAAU,iCAA0B5C,MAAM,CAAC,aAAD,CAAhC;AAFZ,eALoB,EASpB;AACEsB,yBAAS,EAAE;AADb,eAToB,CAAtB;AAaD,aAdD;AAeD;AA/F8D;AAAA;AAAA,iDAiG3C;AAAA;;AAClB,iBAAKkF,2BAAL,GAAmC,KAAKrB,kBAAL,CAAwBuB,MAAxB,CAA+BhE,SAA/B,CACjC,UAACiE,KAAD,EAAgB;AACd,oBAAI,CAAClB,eAAL,GAAuBkB,KAAK,CAACC,OAA7B;AACD,aAHgC,CAAnC;AAKD;AAvG8D;AAAA;AAAA,0CAyGlD;AACX,gBAAMC,SAAS,GAAQ,KAAKC,iBAAL,EAAvB;AAEA,iBAAK/D,IAAL,GAAY,KAAKnB,WAAL,CAAiBoB,KAAjB,CAAuB;AACjC+D,0BAAY,EAAE,CAACF,SAAS,CAACE,YAAX,CADmB;AAEjCxF,yBAAW,EAAE,CAACsF,SAAS,CAACtF,WAAX,CAFoB;AAGjCmE,qBAAO,EAAE,CAACmB,SAAS,CAACnB,OAAX,CAHwB;AAIjCC,uBAAS,EAAE,CAACkB,SAAS,CAAClB,SAAX,CAJsB;AAKjCqB,oBAAM,EAAE,CAACH,SAAS,CAACG,MAAX,CALyB;AAMjCC,uBAAS,EAAE,CAACJ,SAAS,CAACI,SAAX,EAAsB,0DAAWhE,QAAjC;AANsB,aAAvB,CAAZ;AASA,iBAAKiE,UAAL;AACA,iBAAKlF,gBAAL,GAAwB,KAAxB;AACD;AAvH8D;AAAA;AAAA,8CAyH9C;AAAA;;AACf,gBAAI6E,SAAS,GAAG;AACdE,0BAAY,EAAE,IADA;AAEdxF,yBAAW,EAAE,EAFC;AAGdmE,qBAAO,EAAE,KAAKA,OAHA;AAIdC,uBAAS,EAAE,KAAKA,SAJF;AAKdqB,oBAAM,EAAE,CALM;AAMdC,uBAAS,EAAE,KAAKpB;AANF,aAAhB;AASA,iBAAKsB,0BAAL,GAAkC,KAAK1F,cAAL,CAAoB2F,WAApB,CAAgC1E,SAAhC,CAChC,UAAC0E,WAAD,EAAsB;AACpB,kBAAIC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EAAyBG,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,oBAAIvH,MAAM,GAAGwH,IAAI,CAACJ,WAAW,CAAC,GAAD,CAAZ,CAAjB;AACApH,sBAAM,GAAGyH,IAAI,CAACC,KAAL,CAAW1H,MAAX,CAAT;;AACA,sBAAI,CAAC2H,MAAL,CAAY3H,MAAZ;;AAEAqH,sBAAM,CAACC,IAAP,CAAYT,SAAZ,EAAuBe,OAAvB,CAA+B,UAACC,OAAD,EAAa;AAC1CR,wBAAM,CAACC,IAAP,CAAYtH,MAAZ,EAAoB4H,OAApB,CAA4B,UAACE,QAAD,EAAc;AACxC,wBACED,OAAO,IAAIC,QAAX,IACAjB,SAAS,CAACgB,OAAD,CAAT,IAAsB7H,MAAM,CAAC8H,QAAD,CAF9B,EAGE;AACA,0BAAI,CAACC,KAAK,CAACC,MAAM,CAAChI,MAAM,CAAC8H,QAAD,CAAP,CAAP,CAAV,EAAsC;AACpCjB,iCAAS,CAACgB,OAAD,CAAT,GAAqBG,MAAM,CAAChI,MAAM,CAAC8H,QAAD,CAAP,CAA3B;AACD,uBAFD,MAEO;AACLjB,iCAAS,CAACgB,OAAD,CAAT,GAAqB7H,MAAM,CAAC8H,QAAD,CAA3B;AACD;AACF;AACF,mBAXD;AAYD,iBAbD;AAcD;AACF,aAtB+B,CAAlC;AAwBA,iBAAKX,0BAAL,CAAgCV,WAAhC;AAEA,mBAAOI,SAAP;AACD;AA9J8D;AAAA;AAAA,uCAgKrD;AACR,gBAAI,KAAK9D,IAAL,CAAUqB,KAAV,CAAgBsB,OAAhB,KAA4B,KAAKA,OAArC,EAA8C;AAC5C,mBAAKA,OAAL,GAAe,KAAK3C,IAAL,CAAUqB,KAAV,CAAgBsB,OAA/B;AACD;;AAED,gBAAI,KAAK3C,IAAL,CAAUqB,KAAV,CAAgBuB,SAAhB,KAA8B,KAAKA,SAAvC,EAAkD;AAChD,mBAAKA,SAAL,GAAiB,KAAK5C,IAAL,CAAUqB,KAAV,CAAgBuB,SAAjC;AACD;AACF;AAxK8D;AAAA;AAAA,uDA0KrC;AACxB,iBAAKsC,uBAAL,GAA+B;AAC7B3H,6BAAe,EAAE,CADY;AAE7BgB,uBAAS,EAAE;AAFkB,aAA/B;AAID;AA/K8D;AAAA;AAAA,uCAiLlDgC,KAjLkD,EAiLrC;AACxB,gBAAI,KAAKC,cAAL,CAAoBD,KAApB,CAAJ,EAAgC;AAC9B,qBAAO,YAAP;AACD;;AAED,mBAAO,EAAP;AACD;AAvL8D;AAAA;AAAA,yCAyLhDA,KAzLgD,EAyLtC;AACvBA,iBAAK,GAAG,KAAKP,IAAL,CAAU3C,GAAV,CAAckD,KAAd,CAAR;AAEA,mBAAOA,KAAK,CAACE,MAAN,IAAgB,SAAhB,IAA6BF,KAAK,CAACG,OAA1C;AACD;AA7L8D;AAAA;AAAA,0CAgM7DC,eAhM6D,EAiM7DC,oBAjM6D,EAiMhC;AAE7B,gBAAID,eAAe,CAACE,SAApB,EAA+B;AAC7B,kBAAMA,SAAS,GAAGF,eAAe,CAACE,SAAhB,CAA0B,EAA1B,CAAlB;;AACA,kBAAIA,SAAS,IAAIA,SAAS,CAACX,QAA3B,EAAqC;AACnC,uBAAO,aAAP;AACD;AACF;;AAED,gBAAIU,oBAAJ,EAA0B;AACxB,mBAAK,IAAME,WAAX,IAA0BH,eAAe,CAAC,UAAD,CAAzC,EAAuD;AACrD,oBAAIA,eAAe,CAAC,UAAD,CAAf,CAA4BG,WAA5B,CAAJ,EAA8C;AAC5C,sBACE,KAAKC,eAAL,CAAqBJ,eAAe,CAAC,UAAD,CAAf,CAA4BG,WAA5B,CAArB,KACAA,WAAW,IAAIF,oBAFjB,EAGE;AACA,2BAAO,aAAP;AACD;AACF;AACF;AACF;;AAED,mBAAO,EAAP;AACD;AAxN8D;AAAA;AAAA,qCA0NpDuE,MA1NoD,EA0NtC;AACvB,gBAAI,KAAKxC,OAAL,KAAiBwC,MAArB,EAA6B;AAC3B,kBAAI,KAAKvC,SAAL,IAAkB,MAAtB,EAA8B;AAC5B,qBAAKA,SAAL,GAAiB,KAAjB;AACD,eAFD,MAEO,IAAI,KAAKA,SAAL,IAAkB,KAAtB,EAA6B;AAClC,qBAAKA,SAAL,GAAiB,MAAjB;AACD;AACF,aAND,MAMO;AACL,mBAAKD,OAAL,GAAewC,MAAf;AACA,mBAAKvC,SAAL,GAAiB,KAAjB;AACD;;AAED,iBAAK5C,IAAL,CAAUqB,KAAV,CAAgBsB,OAAhB,GAA0B,KAAKA,OAA/B;AACA,iBAAK3C,IAAL,CAAUqB,KAAV,CAAgBuB,SAAhB,GAA4B,KAAKA,SAAjC;AAEA,iBAAKwC,QAAL;AACD;AA1O8D;AAAA;AAAA,qCA4OvD;AACN,gBAAI,KAAKpF,IAAL,CAAUiB,KAAd,EAAqB;AACnB,mBAAK6B,YAAL,GAAoB,KAAK9C,IAAL,CAAUqB,KAAV,CAAgB6C,SAApC;AACA,mBAAKnB,WAAL,GAAmB,CAAnB;AACA,mBAAKsC,eAAL,CAAqB,KAAKC,cAAL,EAArB;AACD;AACF;AAlP8D;AAAA;AAAA,0CAoP/CrI,MApP+C,EAoPpC;AACzB,iBAAK0B,MAAL,CAAYgD,QAAZ,CAAqB,EAArB,EAAyB;AACvBC,wBAAU,EAAE,KAAKlD,cADM;AAEvB2F,yBAAW,EAAE;AAAEkB,iBAAC,EAAEC,IAAI,CAACd,IAAI,CAACe,SAAL,CAAexI,MAAf,CAAD;AAAT;AAFU,aAAzB;AAIA,iBAAK2H,MAAL,CAAY3H,MAAZ;AACD;AA1P8D;AAAA;AAAA,2CA4PjD;AACZ,gBAAIA,MAAM,GAAQ,EAAlB;;AAEA,gBAAI,KAAK+C,IAAL,CAAUqB,KAAV,CAAgB2C,YAApB,EAAkC;AAChC/G,oBAAM,CAAC+G,YAAP,GAAsB,KAAKhE,IAAL,CAAUqB,KAAV,CAAgB2C,YAAtC;AACD;;AAED,gBAAI,KAAKhE,IAAL,CAAUqB,KAAV,CAAgB7C,WAApB,EAAiC;AAC/BvB,oBAAM,CAACuB,WAAP,GAAqB,KAAKwB,IAAL,CAAUqB,KAAV,CAAgB7C,WAArC;AACD;;AAEDvB,kBAAM,CAAC0F,OAAP,GAAiB,KAAK3C,IAAL,CAAUqB,KAAV,CAAgBsB,OAAjC;AACA1F,kBAAM,CAAC2F,SAAP,GAAmB,KAAK5C,IAAL,CAAUqB,KAAV,CAAgBuB,SAAnC;AAEA,mBAAO3F,MAAP;AACD;AA3Q8D;AAAA;AAAA,iCA6QxDA,MA7QwD,EA6Q7C;AAAA;;AAChB,iBAAKiE,YAAL,GAAoB,IAApB;AACA,iBAAK+B,KAAL,GAAa,EAAb;AACA,iBAAKC,eAAL,GAAuB,EAAvB;AACA,iBAAKC,WAAL,GAAmB,KAAnB;AACA,iBAAKC,UAAL,GAAkB,KAAlB;AACA,iBAAKhB,kBAAL,CAAwBsD,IAAxB;AAEA,iBAAKxH,oBAAL,CACGyH,qBADH,CACyB1I,MADzB,EAEGK,IAFH,CAGI,gEAAS,YAAM;AACb,oBAAI,CAAC4D,YAAL,GAAoB,KAApB;AACA,oBAAI,CAACiC,WAAL,GAAmB,IAAnB;AACD,aAHD,CAHJ,EAQGxD,SARH,CAQa;AACT2B,kBAAI,EAAE,cAACC,QAAD,EAAmB;AACvB,oBAAIA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,KAAsCD,QAAQ,CAAClD,OAAT,KAAqB,IAA/D,EAAqE;AACnE,wBAAI,CAAC4E,KAAL,GAAa1B,QAAQ,CAACjD,IAAtB;AACA,wBAAI,CAAC4E,eAAL,GAAuB,MAAI,CAACD,KAAL,CAAW2C,KAAX,CAAiB,CAAjB,EAAoB,MAAI,CAAC9C,YAAzB,CAAvB;AACA,wBAAI,CAACE,UAAL,GAAkB,MAAI,CAACC,KAAL,CAAWuB,MAA7B;AACA,wBAAI,CAACrB,WAAL,GAAmB,IAAnB;AACA0C,yBAAO,CAACC,GAAR,CAAY,MAAI,CAAC7C,KAAjB;AACD,iBAND,MAMO,IACL1B,QAAQ,CAACC,cAAT,CAAwB,SAAxB,KACAD,QAAQ,CAAClD,OAAT,KAAqB,KAFhB,EAGL;AACA,wBAAI,CAAC+E,UAAL,GAAkB,IAAlB;AACD,iBALM,MAKA;AACL,wBAAI,CAACtE,cAAL,CAAoBuB,KAApB;;AACA,wBAAI,CAAC+C,UAAL,GAAkB,IAAlB;AACD;AACF,eAjBQ;AAkBT/C,mBAAK,EAAE,eAACA,OAAD,EAAgB;AACrB,sBAAI,CAAC+C,UAAL,GAAkB,IAAlB;;AAEA,oBAAI/C,OAAK,CAACA,KAAN,CAAYmB,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AAC1C,wBAAI,CAAC1C,cAAL,CAAoBuB,KAApB,CAA0BA,OAAK,CAACA,KAAN,CAAYqB,QAAtC;AACD,iBAFD,MAEO;AACL,wBAAI,CAAC5C,cAAL,CAAoBuB,KAApB;AACD;AACF;AA1BQ,aARb;AAoCD;AAzT8D;AAAA;AAAA,4CA2T7C2D,YA3T6C,EA2TnB;AAC1C,gBAAI+B,WAAJ;;AAEA,gBAAI/B,YAAY,CAACxF,WAAb,KAA6B,CAAjC,EAAoC;AAClCuH,yBAAW,GAAG,eAAd;AACD,aAFD,MAEO,IAAI/B,YAAY,CAACxF,WAAb,KAA6B,CAAjC,EAAoC;AACzCuH,yBAAW,GAAG,gBAAd;AACD;;AAED,mBAAOA,WAAP;AACD;AArU8D;AAAA;AAAA,wCAuUjDnC,KAvUiD,EAuU1B;AACnC,gBAAMoC,SAAS,GAAG,CAACpC,KAAK,CAACqC,IAAN,GAAa,CAAd,IAAmBrC,KAAK,CAACd,YAA3C;AACA,gBAAMoD,OAAO,GAAGtC,KAAK,CAACqC,IAAN,GAAarC,KAAK,CAACd,YAAnC;AACA,iBAAKI,eAAL,GAAuB,KAAKD,KAAL,CAAW2C,KAAX,CAAiBI,SAAjB,EAA4BE,OAA5B,CAAvB;AAEA,iBAAKC,cAAL,CAAoBC,aAApB,CAAkCC,cAAlC,CAAiD;AAC/CC,sBAAQ,EAAE;AADqC,aAAjD;AAGD;AA/U8D;AAAA;AAAA,oCAiVrDtC,YAjVqD,EAiV3B;AAAA;;AAClC,iBAAK9C,YAAL,GAAoB,IAApB;AACA,iBAAKkB,kBAAL,CAAwBzG,IAAxB;AACA,iBAAK6H,0BAAL;AACA,iBAAK0B,uBAAL,GAA+BlB,YAA/B;AACA,iBAAKX,UAAL,GAAkB,EAAlB;AAEA,iBAAKnF,oBAAL,CACGqI,aADH,CACiBvC,YAAY,CAACzG,eAD9B,EAEGD,IAFH,CAGI,gEAAS,YAAM;AACbkJ,wBAAU,CAAC,YAAM;AACf,sBAAI,CAACtF,YAAL,GAAoB,KAApB;AACD,eAFS,EAEP,GAFO,CAAV;AAGD,aAJD,CAHJ,EASGvB,SATH,CASa;AACT2B,kBAAI,EAAE,cAACC,QAAD,EAAmB;AACvB,oBAAIA,QAAQ,CAACC,cAAT,CAAwB,SAAxB,KAAsCD,QAAQ,CAAClD,OAAT,KAAqB,IAA/D,EAAqE;AACnE;AACA,wBAAI,CAAC+D,kBAAL,CAAwBqE,cAAxB,CAAuC,KAAvC;;AACA,wBAAI,CAACpD,UAAL,GAAkB9B,QAAQ,CAACjD,IAA3B;AACD,iBAJD,MAIO,IACLiD,QAAQ,CAACC,cAAT,CAAwB,SAAxB,KACAD,QAAQ,CAAClD,OAAT,KAAqB,KAFhB,EAGL;AACA;AACA,wBAAI,CAAC+D,kBAAL,CAAwBqE,cAAxB,CAAuC,IAAvC;AACD,iBANM,MAMA;AACL;AACA,wBAAI,CAAC3H,cAAL,CAAoBuB,KAApB;;AACA,wBAAI,CAAC+B,kBAAL,CAAwBqE,cAAxB,CAAuC,IAAvC;AACD;AACF,eAjBQ;AAkBTpG,mBAAK,EAAE,eAACA,OAAD,EAAgB;AACrB;AACA,sBAAI,CAAC+B,kBAAL,CAAwBqE,cAAxB,CAAuC,IAAvC;;AAEA,oBAAIpG,OAAK,CAACA,KAAN,CAAYmB,cAAZ,CAA2B,UAA3B,CAAJ,EAA4C;AAC1C,wBAAI,CAAC1C,cAAL,CAAoBuB,KAApB,CAA0BA,OAAK,CAACA,KAAN,CAAYqB,QAAtC;AACD,iBAFD,MAEO;AACL,wBAAI,CAAC5C,cAAL,CAAoBuB,KAApB;AACD;AACF;AA3BQ,aATb;AAsCD;AA9X8D;AAAA;AAAA,iCAgYxD2D,YAhYwD,EAgY9B;AAC/B,iBAAKrF,MAAL,CAAYgD,QAAZ,CAAqB,CAAC,WAAD,EAAcqC,YAAY,CAACzG,eAA3B,CAArB,EAAkE;AAChEqE,wBAAU,EAAE,KAAKlD;AAD+C,aAAlE;AAGD;AApY8D;AAAA;AAAA,qCAsYpDgI,KAtYoD,EAsYrC1C,YAtYqC,EAsYX;AAAA;;AAClD,iBAAK2C,eAAL,GACGC,YADH,GAEGtJ,IAFH,CAGI,4DAAK,CAAL,CAHJ,EAII,iEAAU,UAACuJ,MAAD;AAAA,qBACRA,MAAM,GAAG,MAAI,CAACC,oBAAL,CAA0BJ,KAA1B,EAAiC1C,YAAjC,CAAH,GAAoD,0CADlD;AAAA,aAAV,CAJJ,EAOI,gEAAS,YAAM;AACb,oBAAI,CAAC9C,YAAL,GAAoB,KAApB;AACD,aAFD,CAPJ,EAWGvB,SAXH,CAYI,UAACtB,OAAD,EAAkB;AAChB,oBAAI,CAACS,cAAL,CAAoBT,OAApB;;AACA,oBAAI,CAAC0I,eAAL,CAAqB/C,YAArB;AACD,aAfL,EAgBI,UAAC3D,KAAD,EAAgB;AACd,oBAAI,CAACvB,cAAL,CAAoBuB,KAApB;;AACA,oBAAI,CAAC6C,eAAL,CAAqBwD,KAArB,EAA4BlI,WAA5B,GAA0C,CAA1C;AACD,aAnBL;AAqBD;AA5Z8D;AAAA;AAAA,4CA8ZhD;AACb,mBAAO,KAAK2D,mBAAL,CAAyB6E,WAAzB,CACL,IADK,EAEL,IAFK,EAGL,yDAHK,EAIL,UAJK,EAKL,WALK,CAAP;AAOD;AAta8D;AAAA;AAAA,+CAya7DN,KAza6D,EA0a7D1C,YA1a6D,EA0anC;AAE1B,iBAAK9C,YAAL,GAAoB,IAApB;AACA,iBAAKgC,eAAL,CAAqBwD,KAArB,EAA4BlI,WAA5B,GAA0C,CAA1C;AAEA,mBAAO,KAAKN,oBAAL,CAA0B4I,oBAA1B,CACL9C,YAAY,CAACzG,eADR,CAAP;AAGD;AAlb8D;AAAA;AAAA,uCAoblDmJ,KApbkD,EAobnC1C,YApbmC,EAobT;AAAA;;AACpD,iBAAKiD,eAAL,GACGL,YADH,GAEGtJ,IAFH,CAGI,4DAAK,CAAL,CAHJ,EAII,iEAAU,UAACuJ,MAAD;AAAA,qBACRA,MAAM,GAAG,OAAI,CAACK,sBAAL,CAA4BR,KAA5B,EAAmC1C,YAAnC,CAAH,GAAsD,0CADpD;AAAA,aAAV,CAJJ,EAOI,gEAAS,YAAM;AACb,qBAAI,CAAC9C,YAAL,GAAoB,KAApB;AACD,aAFD,CAPJ,EAWGvB,SAXH,CAYI,UAACtB,OAAD,EAAkB;AAChB,qBAAI,CAACS,cAAL,CAAoBT,OAApB;;AACA,qBAAI,CAAC0I,eAAL,CAAqB/C,YAArB;AACD,aAfL,EAgBI,UAAC3D,KAAD,EAAgB;AACd,qBAAI,CAACvB,cAAL,CAAoBuB,KAApB;;AACA,qBAAI,CAAC6C,eAAL,CAAqBwD,KAArB,EAA4BlI,WAA5B,GAA0C,CAA1C;AACD,aAnBL;AAqBD;AA1c8D;AAAA;AAAA,4CA4chD;AACb,mBAAO,KAAK2D,mBAAL,CAAyB6E,WAAzB,CACL,YADK,EAEL,sBAFK,EAGL,2DAHK,EAIL,UAJK,EAKL,WALK,CAAP;AAOD;AApd8D;AAAA;AAAA,iDAud7DN,KAvd6D,EAwd7D1C,YAxd6D,EAwdnC;AAE1B,iBAAK9C,YAAL,GAAoB,IAApB;AAEA,iBAAKgC,eAAL,CAAqBwD,KAArB,EAA4BlI,WAA5B,GAA0C,CAA1C;AAEA,mBAAO,KAAKN,oBAAL,CAA0BgJ,sBAA1B,CACLlD,YAAY,CAACzG,eADR,CAAP;AAGD;AAje8D;AAAA;AAAA,0CAme/CyG,YAne+C,EAmerB;AACxC,iBAAK,IAAImD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKlE,KAAL,CAAWuB,MAA/B,EAAuC2C,CAAC,EAAxC,EAA4C;AAC1C,kBAAInD,YAAY,CAACzG,eAAb,KAAiC,KAAK0F,KAAL,CAAWkE,CAAX,EAAc5J,eAAnD,EAAoE;AAClE,qBAAK0F,KAAL,CAAWkE,CAAX,EAAc3I,WAAd,GAA4BwF,YAAY,CAACxF,WAAzC;AACA;AACD;AACF;AACF;AA1e8D;;AAAA;AAAA,S;;;;gBAhCxD;;gBAAgB;;gBAGvB;;gBAWO;;gBACA;;gBACA;;gBACA;;gBACA;;gBACA;;;;;;gBAeN,uD;AAAS,iBAAC,gBAAD,EAAmB,EAAnB;;;AAFC0D,0DAAoD,6DALhE,gEAAU;AACTF,gBAAQ,EAAE,kDADD;AAETC,gBAAQ,EAAR,wEAFS;;AAAA,OAAV,CAKgE,E,+EAiDrC,8D,EACR,sD,EACK,0D,EACS,qG,EACN,2F,EACG,sG,EACL,wF,EACO,+G,EACD,6G,EAzDiC,GAApDC,oDAAoD,CAApD","file":"contato-formas-contato-formas-contato-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n// ngx-bootstrap\r\nimport { PaginationModule } from 'ngx-bootstrap/pagination';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\n\r\n// ng-select\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n// ng-brazil\r\nimport { TextMaskModule } from 'angular2-text-mask';\r\nimport { NgBrazil } from 'ng-brazil';\r\n\r\n// PNotify\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\n\r\n// Modules\r\nimport { ComercialCadastrosContatoFormasContatoRoutingModule } from './formas-contato-routing.module';\r\nimport { SharedModule } from 'src/app/shared/modules/shared.module';\r\nimport { TemplatesModule } from 'src/app/shared/templates/templates.module';\r\n\r\n// Components\r\nimport { ComercialCadastrosContatoFormasContatoListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosContatoFormasContatoFormularioComponent } from './formulario/formulario.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ComercialCadastrosContatoFormasContatoListaComponent,\r\n    ComercialCadastrosContatoFormasContatoFormularioComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    PaginationModule.forRoot(),\r\n    TooltipModule.forRoot(),\r\n    NgSelectModule,\r\n    TextMaskModule,\r\n    NgBrazil,\r\n    ComercialCadastrosContatoFormasContatoRoutingModule,\r\n    SharedModule,\r\n    TemplatesModule,\r\n  ],\r\n  providers: [PNotifyService],\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { BsModalService } from 'ngx-bootstrap/modal';\r\n\r\n// Components\r\nimport { ConfirmModalComponent } from './confirm-modal.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConfirmModalService {\r\n  constructor(private modalService: BsModalService) {}\r\n\r\n  showConfirm(\r\n    type: string,\r\n    title: string,\r\n    message: string,\r\n    cancelTxt?: string,\r\n    okTxt?: string\r\n  ) {\r\n    const modalRef = this.modalService.show(ConfirmModalComponent, {\r\n      animated: false,\r\n      ignoreBackdropClick: true,\r\n      keyboard: false,\r\n      class: 'confirm'\r\n    });\r\n\r\n    modalRef.content.type = type;\r\n    modalRef.content.title = title;\r\n    modalRef.content.message = message;\r\n\r\n    if (type === 'delete') {\r\n      modalRef.content.messageAlerts = [\r\n        \"Se eliminará toda la información relacionada.\",\r\n        \"Esta acción no se puede deshacer.\"\r\n      ];\r\n    }\r\n\r\n    if (type === 'inactivate') {\r\n      modalRef.content.messageAlerts = [\r\n        'Las informaciones serán inactivadas.'\r\n      ];\r\n    }\r\n\r\n    if (cancelTxt) {\r\n      modalRef.content.cancelTxt = cancelTxt;\r\n    }\r\n\r\n    if (okTxt) {\r\n      modalRef.content.okTxt = okTxt;\r\n    }\r\n\r\n    // É uma boa prática tipar o retorno.\r\n    // Obs.: ao tipar o retorno é possível acessar o intellisense do serviço.\r\n    return (<ConfirmModalComponent>modalRef.content).confirmResult;\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9jb250YXRvL2Zvcm1hcy1jb250YXRvL2Zvcm11bGFyaW8vZm9ybXVsYXJpby5jb21wb25lbnQuc2NzcyJ9 */\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n// Guards\r\nimport { FormDeactivateGuard } from 'src/app/guards/form-deactivate.guard';\r\nimport { ComercialCadastrosContatoFormasContatoFormularioResolverGuard } from './formulario/formulario-resolver.guard';\r\n\r\n// Components\r\nimport { ComercialCadastrosContatoFormasContatoListaComponent } from './lista/lista.component';\r\nimport { ComercialCadastrosContatoFormasContatoFormularioComponent } from './formulario/formulario.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'lista',\r\n    component: ComercialCadastrosContatoFormasContatoListaComponent,\r\n  },\r\n  {\r\n    path: 'novo',\r\n    component: ComercialCadastrosContatoFormasContatoFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosContatoFormasContatoFormularioResolverGuard,\r\n    },\r\n    canDeactivate: [FormDeactivateGuard],\r\n  },\r\n  {\r\n    path: 'editar/:id',\r\n    component: ComercialCadastrosContatoFormasContatoFormularioComponent,\r\n    resolve: {\r\n      detalhes: ComercialCadastrosContatoFormasContatoFormularioResolverGuard,\r\n    },\r\n    canDeactivate: [FormDeactivateGuard],\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: 'lista',\r\n    pathMatch: 'full',\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoRoutingModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\n\r\nimport { environment } from 'src/environments/environment';\r\n\r\n// Interfaces\r\nimport { FormaContato } from './models/formas-contato';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoService {\r\n  private readonly API = `http://23.254.204.187/api/comercial/cadastros/contato/forma-contato`;\r\n\r\n  constructor(protected http: HttpClient) {}\r\n\r\n  getListaFormasContato(params: any): Observable<any> {\r\n    let httpParams = new HttpParams();\r\n\r\n    for (let param in params) {\r\n      httpParams = httpParams.append(param, params[param]);\r\n    }\r\n\r\n    return this.http\r\n      .get(`${this.API}/lista`, { params: httpParams })\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getAlteracoes(codFormaContato: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/alteracoes/${codFormaContato}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getFormaContato(codFormaContato: number): Observable<any> {\r\n    return this.http\r\n      .get(`${this.API}/detalhes/${codFormaContato}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  private saveFormaContato(record: any) {\r\n    return this.http.post(`${this.API}/salvar`, record).pipe(take(1));\r\n  }\r\n\r\n  private updateFormaContato(record: any) {\r\n    return this.http.put(`${this.API}/atualizar`, record).pipe(take(1));\r\n  }\r\n\r\n  save(record: FormaContato): Observable<any> {\r\n    if (record.codFormaContato !== null) {\r\n      return this.updateFormaContato(record);\r\n    }\r\n\r\n    return this.saveFormaContato(record);\r\n  }\r\n\r\n  deleteFormaContato(codFormaContato: number): Observable<any> {\r\n    return this.http\r\n      .delete(`${this.API}/excluir/${codFormaContato}`)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  activateFormaContato(codFormaContato: number): Observable<any> {\r\n    return this.http.post(`${this.API}/ativar`, codFormaContato).pipe(take(1));\r\n  }\r\n\r\n  inactivateFormaContato(codFormaContato: number): Observable<any> {\r\n    return this.http\r\n      .post(`${this.API}/inativar`, codFormaContato)\r\n      .pipe(take(1));\r\n  }\r\n\r\n  getListaFormasERP(): Observable<any> {\r\n    return this.http.get(`${this.API}/erp/lista`).pipe(take(1));\r\n  }\r\n}\r\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header [appTitle]=\\\"appTitle\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onCancel()\\\"\\r\\n    [disabled]=\\\"submittingForm\\\">\\r\\n    Cancelar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onSubmit()\\\"\\r\\n    [disabled]=\\\"!form.valid || submittingForm\\\">\\r\\n    Salvar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n  <div class=\\\"row justify-content-center\\\">\\r\\n    <div class=\\\"col-lg-4\\\">\\r\\n      <form [formGroup]=\\\"form\\\">\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"descricao\\\">Descrição</label>\\r\\n            <input\\r\\n              type=\\\"text\\\"\\r\\n              class=\\\"form-control\\\"\\r\\n              id=\\\"descricao\\\"\\r\\n              formControlName=\\\"descricao\\\"\\r\\n              (input)=\\\"onInput()\\\"\\r\\n              autocomplete=\\\"new-password\\\"\\r\\n              [ngClass]=\\\"onFieldError('descricao') + ' ' + onFieldRequired(form.controls.descricao)\\\">\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('descricao')\\\" message=\\\"Descrição é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-row\\\">\\r\\n          <div class=\\\"form-group col\\\">\\r\\n            <label for=\\\"codSituacao\\\">Situação</label>\\r\\n            <select\\r\\n              class=\\\"form-control custom-select\\\"\\r\\n              id=\\\"codSituacao\\\"\\r\\n              formControlName=\\\"codSituacao\\\"\\r\\n              [ngClass]=\\\"onFieldError('codSituacao') + ' ' + onFieldRequired(form.controls.codSituacao)\\\">\\r\\n              <option value=\\\"0\\\">Inativo</option>\\r\\n              <option value=\\\"1\\\">Ativo</option>\\r\\n            </select>\\r\\n            <invalid-form-control [show]=\\\"onFieldInvalid('codSituacao')\\\" message=\\\"Situação é obrigatório.\\\"></invalid-form-control>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n</app-body>\\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvY29tZXJjaWFsL2NhZGFzdHJvcy9jb250YXRvL2Zvcm1hcy1jb250YXRvL2xpc3RhL2xpc3RhLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  CanDeactivate,\r\n  ActivatedRouteSnapshot,\r\n  RouterStateSnapshot,\r\n  UrlTree\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from './iform-candeactivate';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FormDeactivateGuard implements CanDeactivate<IFormCanDeactivate> {\r\n  canDeactivate(\r\n    component: IFormCanDeactivate,\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n    return component.formCanDeactivate();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n// Services\r\nimport { ComercialCadastrosContatoFormasContatoService } from '../formas-contato.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoFormularioResolverGuard\r\n  implements Resolve<any> {\r\n  constructor(\r\n    private formasContatoService: ComercialCadastrosContatoFormasContatoService\r\n  ) {}\r\n\r\n  resolve(route: ActivatedRouteSnapshot): Observable<any> {\r\n    if (route.params && route.params.id) {\r\n      return this.formasContatoService.getFormaContato(route.params.id);\r\n    }\r\n\r\n    // É implementado o método \"of\" para manter a tipagem de retorno com Observable.\r\n    return of({\r\n      success: true,\r\n      data: {\r\n        codFormaContato: null,\r\n        descricao: null,\r\n        codSituacao: null,\r\n      },\r\n    });\r\n  }\r\n}\r\n","export default \"<loader-spinner-navbar *ngIf=\\\"loaderNavbar\\\"></loader-spinner-navbar>\\r\\n<loader-spinner-full-screen *ngIf=\\\"loaderFullScreen\\\"></loader-spinner-full-screen>\\r\\n<app-header appTitle=\\\"Formas de contato\\\">\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    [routerLink]=\\\"['../novo']\\\">\\r\\n    Adicionar\\r\\n  </button>\\r\\n  <button\\r\\n    type=\\\"button\\\"\\r\\n    (click)=\\\"onFilter()\\\">\\r\\n    Filtrar\\r\\n  </button>\\r\\n</app-header>\\r\\n<app-body [breadCrumbTree]=\\\"breadCrumbTree\\\" [show]=\\\"!loaderFullScreen\\\">\\r\\n    <div class=\\\"row\\\" #scrollToFilter>\\r\\n      <div class=\\\"col\\\">\\r\\n        <advanced-filter>\\r\\n          <form [formGroup]=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n            <div class=\\\"form-row\\\">\\r\\n              <div class=\\\"form-group col-lg-7\\\">\\r\\n                <label for=\\\"formaContato\\\">Descrição</label>\\r\\n                <input\\r\\n                  type=\\\"text\\\"\\r\\n                  class=\\\"form-control\\\"\\r\\n                  formControlName=\\\"formaContato\\\"\\r\\n                  (keydown.enter)=\\\"onFilter()\\\">\\r\\n              </div>\\r\\n              <div class=\\\"form-group col-lg-3\\\">\\r\\n                <label for=\\\"codSituacao\\\">Situação</label>\\r\\n                <select\\r\\n                  class=\\\"form-control custom-select\\\"\\r\\n                  id=\\\"codSituacao\\\"\\r\\n                  formControlName=\\\"codSituacao\\\">\\r\\n                  <option value=\\\"\\\">Todos</option>\\r\\n                  <option value=\\\"0\\\">Inativos</option>\\r\\n                  <option value=\\\"1\\\">Ativos</option>\\r\\n                </select>\\r\\n              </div>\\r\\n              <div class=\\\"form-group col-lg-2\\\">\\r\\n                <label for=\\\"registros\\\">Registros</label>\\r\\n                <select\\r\\n                  class=\\\"form-control\\\"\\r\\n                  id=\\\"registros\\\"\\r\\n                  formControlName=\\\"registros\\\">\\r\\n                  <option>25</option>\\r\\n                  <option>50</option>\\r\\n                  <option>100</option>\\r\\n                  <option>200</option>\\r\\n                  <option>300</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </form>\\r\\n        </advanced-filter>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col\\\">\\r\\n        <subtitles\\r\\n          [data]=\\\"subtitles\\\"\\r\\n          [show]=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n        </subtitles>\\r\\n      </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n      <div [ngClass]=\\\"{'col': !showDetailPanel, 'col-5 pr-0': showDetailPanel}\\\">\\r\\n        <custom-table [config]=\\\"tableConfig\\\" *ngIf=\\\"dadosPagination.length > 0 && !dadosEmpty\\\">\\r\\n          <ng-template #thead let-thead>\\r\\n            <tr>\\r\\n              <th class=\\\"text-center\\\" scope=\\\"col\\\">Código</th>\\r\\n              <th scope=\\\"col\\\">Descrição</th>\\r\\n              <th scope=\\\"col\\\" [hidden]=\\\"showDetailPanel\\\"></th>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n          <ng-template #tbody let-tbody>\\r\\n            <tr\\r\\n              *ngFor=\\\"let formaContato of dadosPagination; let i = index\\\"\\r\\n              [class.table-active]=\\\"formaContato.codFormaContato == formaContatoSelecionada.codFormaContato\\\">\\r\\n              <td\\r\\n                class=\\\"text-center hover\\\"\\r\\n                [ngClass]=\\\"classStatusBorder(formaContato)\\\"\\r\\n                (click)=\\\"onDetails(formaContato)\\\">\\r\\n                {{ formaContato.codFormaContato }}\\r\\n              </td>\\r\\n              <td\\r\\n                class=\\\"hover\\\"\\r\\n                (click)=\\\"onDetails(formaContato)\\\">\\r\\n                {{ formaContato.descricao | uppercase }}\\r\\n              </td>\\r\\n              <td class=\\\"text-right\\\" [hidden]=\\\"showDetailPanel\\\">\\r\\n                <span *ngIf=\\\"formaContato.codSituacao == 0\\\" class=\\\"mr-3\\\" tooltip=\\\"Ativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onActivate(i, formaContato)\\\">\\r\\n                    <i class=\\\"fas fa-toggle-off\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n                <span *ngIf=\\\"formaContato.codSituacao == 1\\\" class=\\\"mr-3\\\" tooltip=\\\"Inativar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onInactivate(i, formaContato)\\\">\\r\\n                    <i class=\\\"fas fa-toggle-on\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n                <span class=\\\"mr-2\\\" tooltip=\\\"Editar\\\" placement=\\\"left\\\" container=\\\"body\\\">\\r\\n                  <button type=\\\"button\\\" class=\\\"btn-icon-sm\\\" (click)=\\\"onEdit(formaContato)\\\">\\r\\n                    <i class=\\\"fas fa-edit\\\"></i>\\r\\n                  </button>\\r\\n                </span>\\r\\n              </td>\\r\\n            </tr>\\r\\n          </ng-template>\\r\\n        </custom-table>\\r\\n        <empty-result\\r\\n          message=\\\"Nenhuma informação encontrada\\\"\\r\\n          class=\\\"my-3\\\"\\r\\n          *ngIf=\\\"dadosEmpty\\\">\\r\\n        </empty-result>\\r\\n        <div class=\\\"d-flex justify-content-center mt-3\\\" *ngIf=\\\"totalItems > itemsPerPage && dadosLoaded\\\">\\r\\n          <pagination\\r\\n            [maxSize]=\\\"maxSize\\\"\\r\\n            [(totalItems)]=\\\"totalItems\\\"\\r\\n            (pageChanged)=\\\"onPageChanged($event)\\\"\\r\\n            [(itemsPerPage)]=\\\"itemsPerPage\\\"\\r\\n            [boundaryLinks]=\\\"true\\\"\\r\\n            [(ngModel)]=\\\"currentPage\\\"\\r\\n            previousText=\\\"&lsaquo;\\\"\\r\\n            nextText=\\\"&rsaquo;\\\"\\r\\n            firstText=\\\"&laquo;\\\"\\r\\n            lastText=\\\"&raquo;\\\">\\r\\n          </pagination>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"col-7\\\" [hidden]=\\\"!showDetailPanel\\\">\\r\\n        <detail-panel panelTitle=\\\"Histórico de alterações\\\">\\r\\n          <custom-table *ngIf=\\\"alteracoes.length > 0\\\">\\r\\n            <ng-template #thead let-thead>\\r\\n              <tr>\\r\\n                <th scope=\\\"col\\\" class=\\\"text-center\\\">Data</th>\\r\\n                <th scope=\\\"col\\\">Usuário</th>\\r\\n                <th scope=\\\"col\\\">Alteração</th>\\r\\n              </tr>\\r\\n            </ng-template>\\r\\n            <ng-template #tbody let-tbody>\\r\\n              <tr *ngFor=\\\"let alteracao of alteracoes\\\">\\r\\n                <td class=\\\"text-center\\\">{{ alteracao.dataLog | date: 'dd/MM/yyyy HH:mm' }}</td>\\r\\n                <td>{{ alteracao.nomeUsuario | uppercase }}</td>\\r\\n                <td>{{ alteracao.mensagem | uppercase }}</td>\\r\\n              </tr>\\r\\n            </ng-template>\\r\\n          </custom-table>\\r\\n        </detail-panel>\\r\\n      </div>\\r\\n    </div>\\r\\n  </app-body>\\r\\n\";","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { finalize } from 'rxjs/operators';\r\n\r\n// Interfaces\r\nimport { IFormCanDeactivate } from 'src/app/guards/iform-candeactivate';\r\n\r\n// Services\r\nimport { ComercialCadastrosContatoFormasContatoService } from '../formas-contato.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\n\r\n// Interfaces\r\nimport { FormaContato } from '../models/formas-contato';\r\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\r\nimport { JsonResponse } from 'src/app/models/json-response';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-contato-formas-contato-formulario',\r\n  templateUrl: './formulario.component.html',\r\n  styleUrls: ['./formulario.component.scss'],\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoFormularioComponent\r\n  implements OnInit, IFormCanDeactivate {\r\n  loaderNavbar: boolean;\r\n  loaderFullScreen = true;\r\n\r\n  appTitle: string;\r\n  breadCrumbTree: Array<Breadcrumb> = [];\r\n\r\n  descFormasERP: Array<any> = [];\r\n\r\n  form: FormGroup;\r\n  formChanged = false;\r\n  submittingForm: boolean;\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private location: Location,\r\n    private formBuilder: FormBuilder,\r\n    private formasContatoService: ComercialCadastrosContatoFormasContatoService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService\r\n  ) {\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.setFormBuilder();\r\n    this.titleService.setTitle('Cadastro de formas de contato');\r\n    this.getFormFields();\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      if (params.id) {\r\n        this.appTitle = 'Editar forma de contato';\r\n      } else {\r\n        this.appTitle = 'Nova forma de contato';\r\n      }\r\n\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home',\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}`,\r\n        },\r\n        {\r\n          descricao: 'Formas de contato',\r\n          routerLink: `/comercial/cadastros/${params.idSubModulo}/contato/formas-contato/lista`,\r\n        },\r\n        {\r\n          descricao: this.appTitle,\r\n        },\r\n      ];\r\n    });\r\n  }\r\n\r\n  setFormBuilder(): void {\r\n    if (this.activatedRoute.snapshot.data.detalhes.success === true) {\r\n      const detalhes: FormaContato = this.activatedRoute.snapshot.data.detalhes\r\n        .data;\r\n\r\n      this.form = this.formBuilder.group({\r\n        codFormaContato: [detalhes.codFormaContato],\r\n        descricao: [\r\n          detalhes.descricao,\r\n          [Validators.required, Validators.maxLength(40)],\r\n        ],\r\n        codReferenteErp:[\r\n          detalhes.codReferenteErp,\r\n        ],\r\n        codSituacao: [detalhes.codSituacao, [Validators.required]],\r\n      });\r\n    } else {\r\n      this.pnotifyService.error();\r\n      this.location.back();\r\n    }\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onSubmit(): void {\r\n    if (this.form.pristine) {\r\n      this.location.back();\r\n    } else {\r\n      if (this.form.valid) {\r\n        this.loaderNavbar = true;\r\n        this.submittingForm = true;\r\n\r\n        this.formasContatoService\r\n          .save(this.form.value)\r\n          .pipe(\r\n            finalize(() => {\r\n              this.loaderNavbar = false;\r\n              this.submittingForm = false;\r\n            })\r\n          )\r\n          .subscribe({\r\n            next: (response: any) => {\r\n              if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === true\r\n              ) {\r\n                this.form.reset();\r\n                this.formChanged = false;\r\n                this.pnotifyService.success(response.mensagem);\r\n\r\n                this.activatedRoute.params.subscribe((params: any) => {\r\n                  if (params.hasOwnProperty('id')) {\r\n                    this.location.back();\r\n                  } else {\r\n                    this.router.navigate(['../lista'], {\r\n                      relativeTo: this.activatedRoute,\r\n                    });\r\n                  }\r\n                });\r\n              } else if (\r\n                response.hasOwnProperty('mensagem') &&\r\n                response.hasOwnProperty('success') &&\r\n                response.success === false\r\n              ) {\r\n                this.pnotifyService.error(response.mensagem);\r\n              } else {\r\n                this.pnotifyService.error();\r\n              }\r\n            },\r\n            error: (error: any) => {\r\n              this.pnotifyService.error();\r\n            }\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  getFormFields(): void {\r\n    this.loaderFullScreen = true;\r\n\r\n    this.formasContatoService\r\n      .getListaFormasERP()\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderFullScreen = false;\r\n        })\r\n      )\r\n      .subscribe((response: JsonResponse) => {\r\n        if (response.success === true) {\r\n          this.descFormasERP = response.data;\r\n\r\n          this.descFormasERP.unshift({\r\n            codFormaContato: 0,\r\n            descricao: 'NENHUM',\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  onCancel(): void {\r\n    this.location.back();\r\n  }\r\n\r\n  onInput(): void {\r\n    this.formChanged = true;\r\n  }\r\n\r\n  formCanDeactivate(): boolean {\r\n    if (this.formChanged) {\r\n      if (confirm('Este cliente no forma parte de tu cartera?')) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport {\r\n  FormGroup,\r\n  FormBuilder,\r\n  Validators,\r\n  AbstractControl,\r\n} from '@angular/forms';\r\nimport { Subscription, EMPTY, Observable } from 'rxjs';\r\nimport { take, switchMap, finalize } from 'rxjs/operators';\r\n\r\n// ngx-bootstrap\r\nimport { PageChangedEvent } from 'ngx-bootstrap/pagination';\r\n\r\n// Services\r\nimport { ComercialCadastrosContatoFormasContatoService } from '../formas-contato.service';\r\nimport { PNotifyService } from 'src/app/shared/services/core/pnotify.service';\r\nimport { AtividadesService } from 'src/app/shared/services/requests/atividades.service';\r\nimport { TitleService } from 'src/app/shared/services/core/title.service';\r\nimport { ConfirmModalService } from 'src/app/shared/modules/confirm-modal/confirm-modal.service';\r\nimport { DetailPanelService } from 'src/app/shared/templates/detail-panel/detal-panel.service';\r\n\r\n// Interfaces\r\nimport { FormaContato } from './../models/formas-contato';\r\nimport { Breadcrumb } from 'src/app/shared/modules/breadcrumb/breadcrumb';\r\nimport { Subtitles } from 'src/app/shared/modules/subtitles/subtitles';\r\nimport { CustomTableConfig } from 'src/app/shared/templates/custom-table/models/config';\r\n\r\n@Component({\r\n  selector: 'comercial-cadastros-contato-formas-contato-lista',\r\n  templateUrl: './lista.component.html',\r\n  styleUrls: ['./lista.component.scss'],\r\n})\r\nexport class ComercialCadastrosContatoFormasContatoListaComponent\r\n  implements OnInit {\r\n  @ViewChild('scrollToFilter', {}) scrollToFilter: ElementRef;\r\n\r\n  loaderNavbar = false;\r\n  loaderFullScreen = true;\r\n\r\n  breadCrumbTree: Array<Breadcrumb> = [];\r\n\r\n  subtitles: Array<Subtitles> = [\r\n    {\r\n      id: 1,\r\n      text: 'Ativo',\r\n      color: 'green',\r\n    },\r\n    {\r\n      id: 2,\r\n      text: 'Inativo',\r\n      color: 'red',\r\n    },\r\n  ];\r\n\r\n  tableConfig: Partial<CustomTableConfig> = {\r\n    subtitleBorder: true,\r\n  };\r\n\r\n  activatedRouteSubscription: Subscription;\r\n\r\n  showDetailPanelSubscription: Subscription;\r\n  showDetailPanel = false;\r\n\r\n  form: FormGroup;\r\n  orderBy = 'codFormaContato';\r\n  orderType = 'ASC';\r\n\r\n  maxSize = 10;\r\n  itemsPerPage = 300;\r\n  currentPage = 1;\r\n  totalItems = 0;\r\n\r\n  dados: Array<FormaContato> = [];\r\n  dadosPagination: Array<FormaContato> = [];\r\n  dadosLoaded = false;\r\n  dadosEmpty = false;\r\n\r\n  formaContatoSelecionada: FormaContato;\r\n  alteracoes: Array<any> = [];\r\n\r\n  constructor(\r\n    private activatedRoute: ActivatedRoute,\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private formasContatoService: ComercialCadastrosContatoFormasContatoService,\r\n    private pnotifyService: PNotifyService,\r\n    private atividadesService: AtividadesService,\r\n    private titleService: TitleService,\r\n    private confirmModalService: ConfirmModalService,\r\n    private detailPanelService: DetailPanelService\r\n  ) {\r\n    this.pnotifyService.getPNotify();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.registrarAcesso();\r\n    this.setBreadCrumb();\r\n    this.setFormFilter();\r\n    this.titleService.setTitle('Formas de Contato');\r\n    this.onDetailPanelEmitter();\r\n    this.setFormaContatoSelecionada();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.showDetailPanelSubscription.unsubscribe();\r\n  }\r\n\r\n  registrarAcesso(): void {\r\n    this.atividadesService.registrarAcesso().subscribe();\r\n  }\r\n\r\n  setBreadCrumb(): void {\r\n    this.activatedRoute.params.subscribe((params: any) => {\r\n      this.breadCrumbTree = [\r\n        {\r\n          descricao: 'Home',\r\n          routerLink: '/comercial/home',\r\n        },\r\n        {\r\n          descricao: 'Cadastros',\r\n          routerLink: `/comercial/cadastros/${params['idSubModulo']}`,\r\n        },\r\n        {\r\n          descricao: 'Formas de contato',\r\n        },\r\n      ];\r\n    });\r\n  }\r\n\r\n  onDetailPanelEmitter(): void {\r\n    this.showDetailPanelSubscription = this.detailPanelService.config.subscribe(\r\n      (event: any) => {\r\n        this.showDetailPanel = event.showing;\r\n      }\r\n    );\r\n  }\r\n\r\n  setFormFilter(): void {\r\n    const formValue: any = this.checkRouterParams();\r\n\r\n    this.form = this.formBuilder.group({\r\n      formaContato: [formValue.formaContato],\r\n      codSituacao: [formValue.codSituacao],\r\n      orderBy: [formValue.orderBy],\r\n      orderType: [formValue.orderType],\r\n      pagina: [formValue.pagina],\r\n      registros: [formValue.registros, Validators.required],\r\n    });\r\n\r\n    this.checkOrder();\r\n    this.loaderFullScreen = false;\r\n  }\r\n\r\n  checkRouterParams(): Object {\r\n    let formValue = {\r\n      formaContato: null,\r\n      codSituacao: '',\r\n      orderBy: this.orderBy,\r\n      orderType: this.orderType,\r\n      pagina: 1,\r\n      registros: this.itemsPerPage,\r\n    };\r\n\r\n    this.activatedRouteSubscription = this.activatedRoute.queryParams.subscribe(\r\n      (queryParams: any) => {\r\n        if (Object.keys(queryParams).length > 0) {\r\n          let params = atob(queryParams['q']);\r\n          params = JSON.parse(params);\r\n          this.search(params);\r\n\r\n          Object.keys(formValue).forEach((formKey) => {\r\n            Object.keys(params).forEach((paramKey) => {\r\n              if (\r\n                formKey == paramKey &&\r\n                formValue[formKey] != params[paramKey]\r\n              ) {\r\n                if (!isNaN(Number(params[paramKey]))) {\r\n                  formValue[formKey] = Number(params[paramKey]);\r\n                } else {\r\n                  formValue[formKey] = params[paramKey];\r\n                }\r\n              }\r\n            });\r\n          });\r\n        }\r\n      }\r\n    );\r\n    this.activatedRouteSubscription.unsubscribe();\r\n\r\n    return formValue;\r\n  }\r\n\r\n  checkOrder(): void {\r\n    if (this.form.value.orderBy !== this.orderBy) {\r\n      this.orderBy = this.form.value.orderBy;\r\n    }\r\n\r\n    if (this.form.value.orderType !== this.orderType) {\r\n      this.orderType = this.form.value.orderType;\r\n    }\r\n  }\r\n\r\n  setFormaContatoSelecionada(): void {\r\n    this.formaContatoSelecionada = {\r\n      codFormaContato: 0,\r\n      descricao: null,\r\n    };\r\n  }\r\n\r\n  onFieldError(field: string): string {\r\n    if (this.onFieldInvalid(field)) {\r\n      return 'is-invalid';\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  onFieldInvalid(field: any): boolean {\r\n    field = this.form.get(field);\r\n\r\n    return field.status == 'INVALID' && field.touched;\r\n  }\r\n\r\n  onFieldRequired(\r\n    abstractControl: AbstractControl,\r\n    abstractControlField?: string\r\n  ): string {\r\n    if (abstractControl.validator) {\r\n      const validator = abstractControl.validator({} as AbstractControl);\r\n      if (validator && validator.required) {\r\n        return 'is-required';\r\n      }\r\n    }\r\n\r\n    if (abstractControlField) {\r\n      for (const controlName in abstractControl['controls']) {\r\n        if (abstractControl['controls'][controlName]) {\r\n          if (\r\n            this.onFieldRequired(abstractControl['controls'][controlName]) &&\r\n            controlName == abstractControlField\r\n          ) {\r\n            return 'is-required';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  setOrderBy(column: string): void {\r\n    if (this.orderBy === column) {\r\n      if (this.orderType == 'DESC') {\r\n        this.orderType = 'ASC';\r\n      } else if (this.orderType == 'ASC') {\r\n        this.orderType = 'DESC';\r\n      }\r\n    } else {\r\n      this.orderBy = column;\r\n      this.orderType = 'ASC';\r\n    }\r\n\r\n    this.form.value.orderBy = this.orderBy;\r\n    this.form.value.orderType = this.orderType;\r\n\r\n    this.onFilter();\r\n  }\r\n\r\n  onFilter(): void {\r\n    if (this.form.valid) {\r\n      this.itemsPerPage = this.form.value.registros;\r\n      this.currentPage = 1;\r\n      this.setRouterParams(this.verificaParams());\r\n    }\r\n  }\r\n\r\n  setRouterParams(params: any): void {\r\n    this.router.navigate([], {\r\n      relativeTo: this.activatedRoute,\r\n      queryParams: { q: btoa(JSON.stringify(params)) },\r\n    });\r\n    this.search(params);\r\n  }\r\n\r\n  verificaParams(): Object {\r\n    let params: any = {};\r\n\r\n    if (this.form.value.formaContato) {\r\n      params.formaContato = this.form.value.formaContato;\r\n    }\r\n\r\n    if (this.form.value.codSituacao) {\r\n      params.codSituacao = this.form.value.codSituacao;\r\n    }\r\n\r\n    params.orderBy = this.form.value.orderBy;\r\n    params.orderType = this.form.value.orderType;\r\n\r\n    return params;\r\n  }\r\n\r\n  search(params: any): void {\r\n    this.loaderNavbar = true;\r\n    this.dados = [];\r\n    this.dadosPagination = [];\r\n    this.dadosLoaded = false;\r\n    this.dadosEmpty = false;\r\n    this.detailPanelService.hide();\r\n\r\n    this.formasContatoService\r\n      .getListaFormasContato(params)\r\n      .pipe(\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n          this.dadosLoaded = true;\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            this.dados = response.data;\r\n            this.dadosPagination = this.dados.slice(0, this.itemsPerPage);\r\n            this.totalItems = this.dados.length;\r\n            this.dadosLoaded = true;\r\n            console.log(this.dados)\r\n          } else if (\r\n            response.hasOwnProperty('success') &&\r\n            response.success === false\r\n          ) {\r\n            this.dadosEmpty = true;\r\n          } else {\r\n            this.pnotifyService.error();\r\n            this.dadosEmpty = true;\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          this.dadosEmpty = true;\r\n\r\n          if (error.error.hasOwnProperty('mensagem')) {\r\n            this.pnotifyService.error(error.error.mensagem);\r\n          } else {\r\n            this.pnotifyService.error();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  classStatusBorder(formaContato: FormaContato): string {\r\n    let borderClass: string;\r\n\r\n    if (formaContato.codSituacao === 0) {\r\n      borderClass = 'border-danger';\r\n    } else if (formaContato.codSituacao === 1) {\r\n      borderClass = 'border-success';\r\n    }\r\n\r\n    return borderClass;\r\n  }\r\n\r\n  onPageChanged(event: PageChangedEvent): void {\r\n    const startItem = (event.page - 1) * event.itemsPerPage;\r\n    const endItem = event.page * event.itemsPerPage;\r\n    this.dadosPagination = this.dados.slice(startItem, endItem);\r\n\r\n    this.scrollToFilter.nativeElement.scrollIntoView({\r\n      behavior: 'instant',\r\n    });\r\n  }\r\n\r\n  onDetails(formaContato: FormaContato): void {\r\n    this.loaderNavbar = true;\r\n    this.detailPanelService.show();\r\n    this.setFormaContatoSelecionada();\r\n    this.formaContatoSelecionada = formaContato;\r\n    this.alteracoes = [];\r\n\r\n    this.formasContatoService\r\n      .getAlteracoes(formaContato.codFormaContato)\r\n      .pipe(\r\n        finalize(() => {\r\n          setTimeout(() => {\r\n            this.loaderNavbar = false;\r\n          }, 500);\r\n        })\r\n      )\r\n      .subscribe({\r\n        next: (response: any) => {\r\n          if (response.hasOwnProperty('success') && response.success === true) {\r\n            // Não está vazio.\r\n            this.detailPanelService.loadedFinished(false);\r\n            this.alteracoes = response.data;\r\n          } else if (\r\n            response.hasOwnProperty('success') &&\r\n            response.success === false\r\n          ) {\r\n            // Vazio.\r\n            this.detailPanelService.loadedFinished(true);\r\n          } else {\r\n            // Vazio e com possível erro.\r\n            this.pnotifyService.error();\r\n            this.detailPanelService.loadedFinished(true);\r\n          }\r\n        },\r\n        error: (error: any) => {\r\n          // Vazio e com erro.\r\n          this.detailPanelService.loadedFinished(true);\r\n\r\n          if (error.error.hasOwnProperty('mensagem')) {\r\n            this.pnotifyService.error(error.error.mensagem);\r\n          } else {\r\n            this.pnotifyService.error();\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  onEdit(formaContato: FormaContato): void {\r\n    this.router.navigate(['../editar', formaContato.codFormaContato], {\r\n      relativeTo: this.activatedRoute,\r\n    });\r\n  }\r\n\r\n  onActivate(index: number, formaContato: FormaContato): void {\r\n    this.confirmActivate()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((result) =>\r\n          result ? this.activateFormaContato(index, formaContato) : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(formaContato);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 0;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmActivate(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      null,\r\n      null,\r\n      'Deseja realmente prosseguir com a ativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  activateFormaContato(\r\n    index: number,\r\n    formaContato: FormaContato\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n    this.dadosPagination[index].codSituacao = 1;\r\n\r\n    return this.formasContatoService.activateFormaContato(\r\n      formaContato.codFormaContato\r\n    );\r\n  }\r\n\r\n  onInactivate(index: number, formaContato: FormaContato): void {\r\n    this.confirmInactive()\r\n      .asObservable()\r\n      .pipe(\r\n        take(1),\r\n        switchMap((result) =>\r\n          result ? this.inactivateFormaContato(index, formaContato) : EMPTY\r\n        ),\r\n        finalize(() => {\r\n          this.loaderNavbar = false;\r\n        })\r\n      )\r\n      .subscribe(\r\n        (success: any) => {\r\n          this.pnotifyService.success();\r\n          this.refreshMainData(formaContato);\r\n        },\r\n        (error: any) => {\r\n          this.pnotifyService.error();\r\n          this.dadosPagination[index].codSituacao = 1;\r\n        }\r\n      );\r\n  }\r\n\r\n  confirmInactive(): any {\r\n    return this.confirmModalService.showConfirm(\r\n      'inactivate',\r\n      'Confirmar inativação',\r\n      'Deseja realmente prosseguir com a inativação do registro?',\r\n      'Cancelar',\r\n      'Confirmar'\r\n    );\r\n  }\r\n\r\n  inactivateFormaContato(\r\n    index: number,\r\n    formaContato: FormaContato\r\n  ): Observable<any> {\r\n    this.loaderNavbar = true;\r\n\r\n    this.dadosPagination[index].codSituacao = 0;\r\n\r\n    return this.formasContatoService.inactivateFormaContato(\r\n      formaContato.codFormaContato\r\n    );\r\n  }\r\n\r\n  refreshMainData(formaContato: FormaContato): void {\r\n    for (let i = 0; i < this.dados.length; i++) {\r\n      if (formaContato.codFormaContato === this.dados[i].codFormaContato) {\r\n        this.dados[i].codSituacao = formaContato.codSituacao;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n"]}